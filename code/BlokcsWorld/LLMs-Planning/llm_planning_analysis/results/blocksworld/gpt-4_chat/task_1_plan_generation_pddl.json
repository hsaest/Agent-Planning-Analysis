{
    "task": "t1",
    "engine": "gpt-4_chat",
    "prompt_type": "oneshot",
    "domain": "blocksworld",
    "instances": [
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 2,
            "example_instance_id": 1,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(unstack b c)\n(stack b d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack d b)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack b c)",
                "(stack b d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 3,
            "example_instance_id": 2,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(put-down c)\n(unstack d a)\n(stack d b)\n(pick-up a)\n(stack a c)\n(unstack d b)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(stack a b)\n(pick-up d)\n(stack d a)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 4,
            "example_instance_id": 3,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up b)\n(unstack c b)\n(put-down b)\n(stack c d)\n(pick-up b)\n(stack b a)\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(unstack c b)",
                "(put-down b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 5,
            "example_instance_id": 4,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a d)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 6,
            "example_instance_id": 5,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(stack a d)\n(unstack c b)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(put-down a)\n(unstack b c)\n(put-down b)\n(unstack d b)\n(put-down d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 7,
            "example_instance_id": 6,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(unstack a b)\n(stack a d)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 8,
            "example_instance_id": 7,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(stack b a)\n(pick-up d)\n(stack d c)\n(unstack b a)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack c d)\n(stack c a)\n(pick-up d)\n(stack d b)\n(unstack c a)\n(stack c d)\n(pick-up b)\n(stack b a) \n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack c d)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 9,
            "example_instance_id": 8,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(put-down d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c b)\n(put-down c)\n(unstack d a)\n(stack d c)\n(unstack a c)\n(stack a d)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d c)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 10,
            "example_instance_id": 9,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b c)\n(unstack d a)\n(put-down d)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a d)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack b c)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": true,
            "instance_id": 11,
            "example_instance_id": 10,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d a)\n(unstack b c)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a d)\n(unstack b d)\n(put-down d)\n(pick-up c)\n(stack c b)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack b d)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c b)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 12,
            "example_instance_id": 11,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d a)\n(put-down d)\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": true,
            "instance_id": 13,
            "example_instance_id": 12,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack d a)\n(put-down d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b d)\n(unstack c d)\n(stack c b)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack c d)",
                "(stack c b)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 14,
            "example_instance_id": 13,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(unstack c d)\n(stack c b)\n(pick-up d)\n(stack d a)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack b d)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 15,
            "example_instance_id": 14,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a c)\n(unstack b d)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem:\n\n[PLAN]\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 16,
            "example_instance_id": 15,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c d)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 17,
            "example_instance_id": 16,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up d)\n(stack d c)\n(unstack b a)\n(stack b c)\n(unstack a c)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b c)",
                "(unstack a c)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 18,
            "example_instance_id": 17,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 19,
            "example_instance_id": 18,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d b)\n(unstack c a)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack c a)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 20,
            "example_instance_id": 19,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack b d)\n(stack b a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d a)\n(put-down d)\n(pick-up b)\n(stack b d)\n(unstack d a)\n(stack d a)\n(pickle-up a)\n(stack a c)\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack d a)",
                "(stack d a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 21,
            "example_instance_id": 20,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d a)\n[QUERY PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d b)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 22,
            "example_instance_id": 21,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(stack d b)\n(unstack c a)\n(put-down c)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b c)\n(unstack a d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack a d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 23,
            "example_instance_id": 22,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(stack a c)\n(unstack b d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a c)",
                "(unstack b d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 24,
            "example_instance_id": 23,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up c)\n(put-down c)\n(unstack b a)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 25,
            "example_instance_id": 24,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(put-down b)\n(pick-up a)\n(stack a b)\n(unstack c d)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 26,
            "example_instance_id": 25,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a b)\n(unstack c d)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c a)\n(pick-up d)\n(stack d a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(pick-up d)",
                "(stack d a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 27,
            "example_instance_id": 26,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a b)\n(put-down a)\n(unstack b d)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n(stack b d)\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 28,
            "example_instance_id": 27,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the query problem:\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack c b)\n(pick-up b)\n(stack b a)\n(stack c b)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack c b)",
                "(pick-up b)",
                "(stack b a)",
                "(stack c b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 29,
            "example_instance_id": 28,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b a)\n(unstack c d)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up c)\n(stack c a)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b d)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 30,
            "example_instance_id": 29,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d c)\n(unstack b a)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(stack a d)\n(unstack b d)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(stack a d)",
                "(unstack b d)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 31,
            "example_instance_id": 30,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack b d)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(put-down a)\n(unstack c b)\n(stack c d)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c d)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 32,
            "example_instance_id": 31,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(pick-up d)\n(stack d c)\n(unstack a c)\n(stack a b)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 33,
            "example_instance_id": 32,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b a)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 34,
            "example_instance_id": 33,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 35,
            "example_instance_id": 34,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(unstack d b)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(stack b a)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 36,
            "example_instance_id": 35,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(stack b a)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b d)\n(stack b a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(stack b c)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack b d)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 37,
            "example_instance_id": 36,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack b d)\n(stack b c)\n(unstack d a)\n(put-down d)\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a d)\n(put-down a)\n(unstack b c)\n(stack b d)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 38,
            "example_instance_id": 37,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c d)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 39,
            "example_instance_id": 38,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack d a)\n(put-down d)\n(unstack c d)\n(stack c a)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 40,
            "example_instance_id": 39,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(put-down a)\n(pick-up d)\n(put-down d)\n(unstack b c)\n(stack b d)\n(unstack c a)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up d)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack c a)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 41,
            "example_instance_id": 40,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 42,
            "example_instance_id": 41,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(stack b c)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(stack a c)\n(pick-up d)\n(put-down d)\n(unstack a c)\n(unstack c b)\n(stack c on b)\n(stack a on c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack a d)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(put-down d)",
                "(unstack a c)",
                "(unstack c b)",
                "(stack c on b)",
                "(stack a on c)"
            ],
            "correct": false,
            "instance_id": 43,
            "example_instance_id": 42,
            "relaxed_checks": {
                "del_and_precond_relax": -1,
                "del_relax_only": -1,
                "precond_relax_only": -1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack c b)\n(unstack a d)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(stack b a)\n(unstack a c)\n(stack a d)\n(unstack c b)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack b c)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)",
                "(unstack a c)",
                "(stack a d)",
                "(unstack c b)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 44,
            "example_instance_id": 43,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(unstack b d)\n(stack b c)\n(pick-up a)\n(stack a d)\n(unstack b c)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": true,
            "instance_id": 45,
            "example_instance_id": 44,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up b)\n(unstack b d)\n(put-down d)\n(pick-up c)\n(stack b c)\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(unstack b d)",
                "(put-down d)",
                "(pick-up c)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 46,
            "example_instance_id": 45,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack b d)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "For the given query problem, the plan will be as follows:\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b a)\n(unstack c a)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack c a)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 47,
            "example_instance_id": 46,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d c)\n(unstack a b)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack b a)\n(put-down b)\n(unstack c b)\n(stack c d)\n(unstack a d)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack c b)",
                "(stack c d)",
                "(unstack a d)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 48,
            "example_instance_id": 47,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n```\n(unstack a c)\n(put-down a)\n(unstack b d)\n(put-down b)\n(unstack c b)\n(stack c a)\n(stack d c)\n(stack b d)\n```\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack c b)",
                "(stack c a)",
                "(stack d c)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 49,
            "example_instance_id": 48,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(stack c a)\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(plan\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n)\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack b a)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 50,
            "example_instance_id": 49,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c d)\n(unstack b a)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n(unstack d b)\n(stack d a)\n(pick-up a)\n(stack a b)\n(unstack d a)\n(stack d c)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack d a)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 51,
            "example_instance_id": 50,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 52,
            "example_instance_id": 51,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a b)\n(unstack c d)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(unstack b c)\n(pick-up d)\n(stack d b)\n(stack b d)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a d)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(unstack b c)",
                "(pick-up d)",
                "(stack d b)",
                "(stack b d)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 53,
            "example_instance_id": 52,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a d)\n(unstack b c)\n(put-down b)\n(unstack a d)\n(stack a c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 54,
            "example_instance_id": 53,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d b)\n(put-down d)\n(pick-up a)\n(stack a c)\n(unstack c b)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 55,
            "example_instance_id": 54,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(put-down b)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a b)\n(unstack c d)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan in PDDL syntax for the query problem:\n\n1. (unstack a d)\n2. (put-down a)\n3. (pick-up b)\n4. (stack b d)\n5. (pick-up a)\n6. (stack a b)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack a c)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": true,
            "instance_id": 56,
            "example_instance_id": 55,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack a d)\n(stack a c)\n(pick-up b)\n(stack b d)\n(unstack a c)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a d)\n(unstack c b)\n(stack c a)\n(unstack b d)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack c b)",
                "(stack c a)",
                "(unstack b d)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 57,
            "example_instance_id": 56,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b d)\n(put-down b)\n(unstack d a)\n(put-down d)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the query problem:\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(unstack d c)\n(put-down d)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": true,
            "instance_id": 58,
            "example_instance_id": 57,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack b c)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 59,
            "example_instance_id": 58,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(stack b c)\n(pick-up d)\n(stack d a)\n(unstack b c)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 60,
            "example_instance_id": 59,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(put-down a)\n(unstack d b)\n(stack d a)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 61,
            "example_instance_id": 60,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 62,
            "example_instance_id": 61,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d c)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 63,
            "example_instance_id": 62,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b a)\n(unstack c d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(unstack c d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 64,
            "example_instance_id": 63,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(stack b d)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 65,
            "example_instance_id": 64,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d a)\n(put-down d)\n(pick-up b)\n(stack b d)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack c a)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 66,
            "example_instance_id": 65,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "; Plan for the query problem:\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 67,
            "example_instance_id": 66,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the QUERY PROBLEM in PDDL syntax:\n\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b d)\n(pick-up d)\n(stack d b)\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 68,
            "example_instance_id": 67,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 69,
            "example_instance_id": 68,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(stack b c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up d)\n(stack d c)\n(unstack c b)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(unstack c b)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 70,
            "example_instance_id": 69,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c d))\n)\n)\n\n[PLAN]\n(unstack c b)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d a)\n(unstack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d a)",
                "(unstack c b)"
            ],
            "correct": false,
            "instance_id": 71,
            "example_instance_id": 70,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": true,
            "instance_id": 72,
            "example_instance_id": 71,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 73,
            "example_instance_id": 72,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a b)\n(put-down a)\n(unstack b d)\n(stack b a)\n(pick-up c)\n(put-down c)\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up c)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 74,
            "example_instance_id": 73,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d c)\n(unstack a b)\n(stack a c)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(unstack a b)",
                "(stack a c)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 75,
            "example_instance_id": 74,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 76,
            "example_instance_id": 75,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": true,
            "instance_id": 77,
            "example_instance_id": 76,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b d)\n(pick-up a)\n(put-down a)\n(unstack c d)\n(stack c a)\n(unstack d b)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 78,
            "example_instance_id": 77,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c d)\n(stack c a)\n(unstack d b)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b d)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 79,
            "example_instance_id": 78,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 80,
            "example_instance_id": 79,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n(unstack b a)\n(stack b d)\n(unstack a b)\n(stack a c)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b d)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 81,
            "example_instance_id": 80,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(put-down d)\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the query problem in PDDL syntax:\n\n(pick-up a)\n(unstack c b)\n(stack c a)\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 82,
            "example_instance_id": 81,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(unstack b c)\n(stack b a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 83,
            "example_instance_id": 82,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a b)\n(unstack c d)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up c)\n(stack c a)\n(unstack a b)\n(stack a d)\n(pick-up b)\n(stack b c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 84,
            "example_instance_id": 83,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up a)\n(stack a b)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack a b)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 85,
            "example_instance_id": 84,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c d)\n(unstack a b)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 86,
            "example_instance_id": 85,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(pick-up d)\n(stack d a)\n(unstack c d)\n(stack c a)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a b)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 87,
            "example_instance_id": 86,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a b)\n(unstack c d)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d a)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 88,
            "example_instance_id": 87,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d a)\n(unstack b c)\n(put-down b)\n(unstack d a)\n(stack d c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a d)\n(stack a b)\n(unstack b c)\n(put-down b)\n(unstack a b)\n(stack a d)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(stack a b)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 89,
            "example_instance_id": 88,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack b c)\n(stack b a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 90,
            "example_instance_id": 89,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a b)",
                "(unstack d c)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 91,
            "example_instance_id": 90,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a b)\n(unstack d c)\n(put-down d)\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 92,
            "example_instance_id": 91,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(pick-up d)\n(stack d c)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 93,
            "example_instance_id": 92,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c a)\n(unstack d b)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a b)\n(unstack b c)\n(pick-up d)\n(stack d c)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack b c)",
                "(pick-up d)",
                "(stack d c)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 94,
            "example_instance_id": 93,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(stack b a)\n(unstack d a)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d b)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)",
                "(unstack d a)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 95,
            "example_instance_id": 94,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d a)\n(stack d b)\n(unstack a c)\n(put-down a)\n(unstack d b)\n(stack d c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b d)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 96,
            "example_instance_id": 95,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "The plan for the query problem in PDDL syntax is as follows:\n\n(unstack a c)\n(put-down a)\n(pick-up d)\n(put-down d)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a c)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a b)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 97,
            "example_instance_id": 96,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a b)\n(unstack c d)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 98,
            "example_instance_id": 97,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(stack c a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a d)\n(pick-up c)\n(stack c d)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(stack a c)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(pick-up c)",
                "(stack c d)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 99,
            "example_instance_id": 98,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack a d)\n(stack a c)\n(unstack d b)\n(put-down d)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b d)\n(unstack a c)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack a c)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 100,
            "example_instance_id": 99,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(on c a)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b d)\n[QUERY PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 101,
            "example_instance_id": 100,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(on c a)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(unstack b d)\n(stack b a)\n(pick-up d)\n(stack d c)\n(unstack b a)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n(unstack c d)\n(stack c b)\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack c d)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 102,
            "example_instance_id": 101,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(put-down a)\n(unstack c d)\n(put-down c)\n(unstack b a)\n(stack b c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack b a)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 103,
            "example_instance_id": 102,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c d)\n(unstack b a)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d a)\n(unstack b c)\n(stack b c)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack b c)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 104,
            "example_instance_id": 103,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(put-down a)\n(unstack b a)\n(stack b d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(stack b c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 105,
            "example_instance_id": 104,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(stack b c)\n(unstack a d)\n(put-down a)\n(unstack b c)\n(stack b d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 106,
            "example_instance_id": 105,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(pick-up d)\n(put-down d)\n(unstack b c)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack b d)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 107,
            "example_instance_id": 106,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack b c)\n(stack b d)\n(pick-up a)\n(stack a c)\n(unstack b d)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a b)\n(put-down a)\n(pick-up d)\n(stack d c)\n(unstack a b)\n(stack a d)\n(pick-up b)\n(stack b a)\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 108,
            "example_instance_id": 107,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 109,
            "example_instance_id": 108,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(unstack c d)\n(stack b c)\n(unstack d b)\n(stack a d)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack b c)",
                "(unstack d b)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 110,
            "example_instance_id": 109,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(unstack d b)\n(put-down d)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(on c a)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the query problem in PDDL syntax:\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(unstack b d)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 111,
            "example_instance_id": 110,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(on c a)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up d)\n(stack d b)\n(unstack a d)\n(putdown a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d b)",
                "(unstack a d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 112,
            "example_instance_id": 111,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a c)\n(unstack d c)\n(stack d a)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack d a)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a c)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 113,
            "example_instance_id": 112,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c b)\n(unstack d a)\n(stack d c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(put-down a)\n(unstack d b)\n(stack d a)\n(unstack b a)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(unstack b a)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 114,
            "example_instance_id": 113,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(stack d c)\n(unstack b a)\n(put-down b)\n(unstack d c)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d b)\n(put-down d)\n(unstack b c)\n(put-down b)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": true,
            "instance_id": 115,
            "example_instance_id": 114,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack b d)\n(stack c a)\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack b d)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 116,
            "example_instance_id": 115,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up d)\n(stack d c)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a c)\n(unstack d b)\n(stack d a)\n(unstack b c)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack d b)",
                "(stack d a)",
                "(unstack b c)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 117,
            "example_instance_id": 116,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(stack b d)\n(pick-up c)\n(stack c a)\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b d)\n(unstack c a)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack c a)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack c a)",
                "(stack c b)"
            ],
            "correct": true,
            "instance_id": 118,
            "example_instance_id": 117,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b d)\n(unstack c a)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a c)\n(unstack d b)\n(stack d a)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a c)",
                "(unstack d b)",
                "(stack d a)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 119,
            "example_instance_id": 118,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a c)\n(pick-up d)\n(stack d b)\n(unstack a c)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up d)\n(stack d b)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 120,
            "example_instance_id": 119,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 121,
            "example_instance_id": 120,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b d)\n(pick-up a)\n(stack a d)\n(unstack d c)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d b)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack b d)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack d c)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 122,
            "example_instance_id": 121,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d b)\n(unstack c a)\n(put-down c)\n(unstack d b)\n(stack d c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 123,
            "example_instance_id": 122,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n[PLAN]\n(unstack a d)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 124,
            "example_instance_id": 123,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b a)\n(pick-up d)\n(stack a d)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(stack a d)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up d)",
                "(stack a d)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 125,
            "example_instance_id": 124,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(stack a d)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 126,
            "example_instance_id": 125,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the query problem:\n\n[QUERY_PLAN]\n(pick-up a)\n(put-down a)\n(pick-up d)\n(stack d c)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c d)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 127,
            "example_instance_id": 126,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d a)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a b)\n(put-down a)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a d)\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 128,
            "example_instance_id": 127,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": true,
            "instance_id": 129,
            "example_instance_id": 128,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 130,
            "example_instance_id": 129,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack b a)\n(stack b c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c b)\n(pick-up a)\n(stack a c)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c a)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 131,
            "example_instance_id": 130,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c a)\n(unstack d b)\n(put-down d)\n(unstack c a)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(standup c b)\n(put-down c)\n(standup d b)\n(stack d a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(put-down c)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 132,
            "example_instance_id": 131,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 133,
            "example_instance_id": 132,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 134,
            "example_instance_id": 133,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b d)\n(unstack c a)\n(put-down c)\n(unstack b d)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(unstack c a)\n(put-down c)\n(stack a b)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(unstack c a)",
                "(put-down c)",
                "(stack a b)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 135,
            "example_instance_id": 134,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(unstack d c)\n(put-down d)\n(stack a c)\n(stack d a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack a d)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(unstack d c)",
                "(put-down d)",
                "(stack a c)",
                "(stack d a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 136,
            "example_instance_id": 135,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack c b)\n(unstack a d)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the PDDL syntax for the plan of your query problem:\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(stack b a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 137,
            "example_instance_id": 136,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 138,
            "example_instance_id": 137,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(put-down a)\n(pick-up c)\n(put-down c)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up c)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 139,
            "example_instance_id": 138,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a d)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b a)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b a)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 140,
            "example_instance_id": 139,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n(pick-up c)\n(stack c a)\n(unstack d c)\n(put-down c)\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(unstack d c)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 141,
            "example_instance_id": 140,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c a)\n(unstack d b)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n```\n(unstack d c)\n(put-down d)\n(unstack c b)\n(stack c a)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n```\nPlease note that there might be alternative plans leading to the same goal; the provided plan is just one possible solution.\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 142,
            "example_instance_id": 141,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 143,
            "example_instance_id": 142,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c a)\n(unstack d b)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 144,
            "example_instance_id": 143,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(stack c b)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 145,
            "example_instance_id": 144,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack c a)\n(stack c b)\n(unstack a d)\n(put-down a)\n(unstack c b)\n(stack c d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d b)\n(unstack c a)\n(stack c b)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 146,
            "example_instance_id": 145,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b c)\n(unstack d a)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(stack a d)\n(unstack b c)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack b c)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a d)",
                "(unstack b c)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 147,
            "example_instance_id": 146,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up d)\n(stack d a)\n(unstack b c)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a b)\n(unstack d b)\n(stack d a)\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack a d)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a b)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 148,
            "example_instance_id": 147,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a d)\n(pick-up c)\n(stack c b)\n(unstack a d)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b c)\n(unstack d a)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(unstack d a)",
                "(stack d a)"
            ],
            "correct": true,
            "instance_id": 149,
            "example_instance_id": 148,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 150,
            "example_instance_id": 149,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c a)\n(unstack d b)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack d b)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d a)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack d b)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 151,
            "example_instance_id": 150,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(stack d a)\n(unstack c b)\n(put-down c)\n(unstack d a)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b a)\n(pick-up d)\n(stack d c)\n(unstack c a)\n(stack c b)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack c a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 152,
            "example_instance_id": 151,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(put-down b)\n(unstack c a)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 153,
            "example_instance_id": 152,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(put-down d)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n(pick-up c)\n(put-down c)\n(unstack a d)\n(stack a b)\n(unstack d a)\n(put-down d)\n(unstack b a)\n(stack b d)\n(pick-up c)\n(stack c a)\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 154,
            "example_instance_id": 153,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(stack b c)\n(unstack a d)\n(put-down a)\n(unstack b c)\n(stack b d)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(stack d c)\n(unstack b c)\n(stack b a)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack b d)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d c)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 155,
            "example_instance_id": 154,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b d)\n(pick-up a)\n(stack a c)\n(unstack b d)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d b)\n(pick-up a)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up a)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 156,
            "example_instance_id": 155,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b a)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a d)\n(put-down a)\n(pick-up c)\n(put-down c)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(put-down b)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(stack a c)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(put-down b)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 157,
            "example_instance_id": 156,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a d)\n(stack a c)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 158,
            "example_instance_id": 157,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 159,
            "example_instance_id": 158,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 160,
            "example_instance_id": 159,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c a)\n(unstack d b)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up d)\n(stack d c)\n(unstack b c)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(unstack b c)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 161,
            "example_instance_id": 160,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(pick-up b)\n(stack b a)\n(unstack a d)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack a d)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 162,
            "example_instance_id": 161,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 163,
            "example_instance_id": 162,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 164,
            "example_instance_id": 163,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c d)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 165,
            "example_instance_id": 164,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(stack c d)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack c b)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 166,
            "example_instance_id": 165,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(stack c b)\n(pick-up a)\n(stack a d)\n(unstack c b)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(stack a b)\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(stack a b)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 167,
            "example_instance_id": 166,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d c)\n(put-down d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d a)\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": true,
            "instance_id": 168,
            "example_instance_id": 167,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack c b)\n(unstack a d)\n(stack a c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n(unstack c d)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 169,
            "example_instance_id": 168,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": true,
            "instance_id": 170,
            "example_instance_id": 169,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up c)\n(put-down c)\n(pick-up b)\n(put-down b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d a)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(put-down c)",
                "(pick-up b)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 171,
            "example_instance_id": 170,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d a)\n(unstack b c)\n(put-down b)\n(unstack d a)\n(stack d b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c a)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a d)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a b)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 172,
            "example_instance_id": 171,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a b)\n(unstack c d)\n(put-down c)\n(unstack a b)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up c)\n(unstack b d)\n(stack b a)\n(put-down c)\n(unstack a b)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(unstack b d)",
                "(stack b a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 173,
            "example_instance_id": 172,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n(unstack a b)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(stack d c)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack a b)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 174,
            "example_instance_id": 173,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d a)\n(stack d c)\n(unstack a b)\n(put-down a)\n(unstack d c)\n(stack d a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b d)\n(unstack a c)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack a c)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 175,
            "example_instance_id": 174,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack d b)\n(put-down d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack b c)\n(put-down b)\n(unstack a d)\n(put-down a)\n(unstack c a)\n(pick-up b)\n(stack c b)\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack c a)",
                "(pick-up b)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 176,
            "example_instance_id": 175,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b d)\n(unstack a c)\n(stack a d)\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack a c)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 177,
            "example_instance_id": 176,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up c)\n(stack c a)\n(unstack d b)\n(stack d c)\n(unstack b a)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 178,
            "example_instance_id": 177,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c a)\n(put-down c)\n(unstack b c)\n(put-down b)\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 179,
            "example_instance_id": 178,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "Here's a PDDL plan for the provided QUERY PROBLEM.\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack a b)\n(stack a d)\n(unstack b a)\n(stack b a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a d)",
                "(unstack b a)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 180,
            "example_instance_id": 179,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(put-down d)\n(pick-up c)\n(stack c d)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 181,
            "example_instance_id": 180,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(stack b c)\n(unstack a c)\n(stack a b)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b d)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b c)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 182,
            "example_instance_id": 181,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(stack b d)\n(unstack a c)\n(put-down a)\n(unstack b d)\n(stack b c)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 183,
            "example_instance_id": 182,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(put-down c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down a)\n(unstack d b)\n(pick-up c)\n(stack c a)\n(put-down d)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 184,
            "example_instance_id": 183,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(put-down d)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": true,
            "instance_id": 185,
            "example_instance_id": 184,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(stack c b)\n(unstack d a)\n(stack d c)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(stack c b)",
                "(unstack d a)",
                "(stack d c)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 186,
            "example_instance_id": 185,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(put-down c)\n(unstack d a)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 187,
            "example_instance_id": 186,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up d)\n(stack d a)\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": true,
            "instance_id": 188,
            "example_instance_id": 187,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack c b)\n(pick-up a)\n(stack a d)\n(unstack b a)\n(stack b d)\n(stack c a)\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack b a)",
                "(stack b d)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 189,
            "example_instance_id": 188,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(stack b c)\n(unstack a d)\n(put-down a)\n(unstack b c)\n(stack b d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d c)\n(put-down d)\n(unstack b a)\n(pick-up d)\n(stack d b)\n(unstack b a)\n(stack b c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack b a)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack b a)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 190,
            "example_instance_id": 189,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 191,
            "example_instance_id": 190,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d a))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack d c)\n(pick-up a)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(pick-up a)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 192,
            "example_instance_id": 191,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(unstack d b)\n(stack b d)\n(stack a b)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(unstack d b)",
                "(stack b d)",
                "(stack a b)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 193,
            "example_instance_id": 192,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(stack b d)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(stack b d)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(stack b d)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 194,
            "example_instance_id": 193,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(stack b d)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem:\n\n[PLAN]\n(unstack d a)\n(stack d c)\n(unstack a b)\n(stack a d)\n(unstack b c)\n(stack b a)\n(unstack c d)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(stack d c)",
                "(unstack a b)",
                "(stack a d)",
                "(unstack b c)",
                "(stack b a)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 195,
            "example_instance_id": 194,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a d)\n(put-down b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 196,
            "example_instance_id": 195,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d c)\n(put-down d)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack c b)\n(put-down c)\n(unstack b d)\n(put-down b)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 197,
            "example_instance_id": 196,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b d)\n(put-down b)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack d c)\n(stack b d)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack d c)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 198,
            "example_instance_id": 197,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d b)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 199,
            "example_instance_id": 198,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d a)\n(stack d b)\n(unstack a c)\n(put-down a)\n(unstack d b)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a d)\n(unstack b c)\n(put-down b)\n(unstack d a)\n(stack d c)\n(unstack a d)\n(stack a b)\n(unstack d c)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a d)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d c)",
                "(unstack a d)",
                "(stack a b)",
                "(unstack d c)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 200,
            "example_instance_id": 199,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 201,
            "example_instance_id": 200,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b c)"
            ],
            "correct": true,
            "instance_id": 202,
            "example_instance_id": 201,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(unstack b a)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(unstack b a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 203,
            "example_instance_id": 202,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n(unstack d c)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d c)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 204,
            "example_instance_id": 203,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c b)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 205,
            "example_instance_id": 204,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(unstack d b)\n(stack d c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 206,
            "example_instance_id": 205,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a d)\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack d c)\n(stack d a)\n(unstack c b)\n(stack c d)\n(unstack b a)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(stack d a)",
                "(unstack c b)",
                "(stack c d)",
                "(unstack b a)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 207,
            "example_instance_id": 206,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 208,
            "example_instance_id": 207,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(put-down c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a d)\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 209,
            "example_instance_id": 208,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": true,
            "instance_id": 210,
            "example_instance_id": 209,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d b)\n(unstack a c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d b)",
                "(unstack a c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 211,
            "example_instance_id": 210,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(stack c a)\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n(unstack b a)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 212,
            "example_instance_id": 211,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up d)\n(stack d c)\n(unstack b a)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(put-down a)\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b a)\n(unstack c a)\n(stack c b)\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b a)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 213,
            "example_instance_id": 212,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b d)\n(unstack c a)\n(put-down c)\n(unstack b d)\n(stack b a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 214,
            "example_instance_id": 213,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a d)\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 215,
            "example_instance_id": 214,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d a)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d b)\n(pick-up c)\n(stack c b)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 216,
            "example_instance_id": 215,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b a)\n(unstack a c)\n(stack a d)\n(stack c d)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack a c)",
                "(stack a d)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 217,
            "example_instance_id": 216,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c a)\n(pick-up d)\n(stack d b)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": true,
            "instance_id": 218,
            "example_instance_id": 217,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(unstack b a)\n(pick-up d)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack b a)",
                "(pick-up d)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 219,
            "example_instance_id": 218,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack b a)\n(stack b d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack c b)\n(pick-up a)\n(stack c a)\n(unstack b a)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(pick-up a)",
                "(stack c a)",
                "(unstack b a)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 220,
            "example_instance_id": 219,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(stack b d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d b)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c b)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 221,
            "example_instance_id": 220,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 222,
            "example_instance_id": 221,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack a c)\n(stack a d)\n(pick-up b)\n(stack b c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(put-down a)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(put-down b)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 223,
            "example_instance_id": 222,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": true,
            "instance_id": 224,
            "example_instance_id": 223,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 225,
            "example_instance_id": 224,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(stack a b)\n(unstack c b)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a b)",
                "(unstack c b)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 226,
            "example_instance_id": 225,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(put-down a)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up d)\n(stack d c)\n(pick-up b)\n(put-down b)\n(pick-up a)\n(stack a b)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 227,
            "example_instance_id": 226,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack c a)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 228,
            "example_instance_id": 227,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c d))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack c a)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d a)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 229,
            "example_instance_id": 228,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d a)\n(unstack b c)\n(put-down b)\n(unstack d a)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(stack d a)\n(unstack b a)\n(stack b d)\n(unstack c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d a)",
                "(unstack b a)",
                "(stack b d)",
                "(unstack c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 230,
            "example_instance_id": 229,
            "relaxed_checks": {
                "del_and_precond_relax": -1,
                "del_relax_only": -1,
                "precond_relax_only": -1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(stack d c)\n(unstack b a)\n(put-down b)\n(unstack d c)\n(stack d a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(pick-up d)\n(stack d a)\n(unstack c d)\n(stack c b)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 231,
            "example_instance_id": 230,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(stack d c)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b c)\n(unstack d a)\n(stack d c)\n(pick-up a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(unstack d a)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 232,
            "example_instance_id": 231,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d a)\n(put-down d)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a b)\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 233,
            "example_instance_id": 232,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c d))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(pick-up b)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(pick-up b)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 234,
            "example_instance_id": 233,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(plan)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n(plan_end)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 235,
            "example_instance_id": 234,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL:\n\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": true,
            "instance_id": 236,
            "example_instance_id": 235,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(unstack c d)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 237,
            "example_instance_id": 236,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n(unstack c d)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack d a)\n(put-down d)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(stack d b)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 238,
            "example_instance_id": 237,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d a)\n(stack d b)\n(unstack a c)\n(put-down a)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(stack a b)\n(unstack c a)\n(stack c a)\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack c a)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 239,
            "example_instance_id": 238,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a b)\n(unstack c d)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the PDDL syntax for the query problem's plan:\n\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 240,
            "example_instance_id": 239,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(stack a c)\n(unstack c b)\n(stack c a)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(stack a c)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 241,
            "example_instance_id": 240,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack a d)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack a b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack a b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 242,
            "example_instance_id": 241,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(unstack d c)\n(put-down d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [],
            "correct": false,
            "instance_id": 243,
            "example_instance_id": 242,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a d)\n(pick-up c)\n(stack c b)\n(unstack a d)\n(stack a c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(unstack d b)\n(stack d a)\n(unstack c d)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack d b)",
                "(stack d a)",
                "(unstack c d)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 244,
            "example_instance_id": 243,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(stack d c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 245,
            "example_instance_id": 244,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack d a)\n(stack d c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a b)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 246,
            "example_instance_id": 245,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b d)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": true,
            "instance_id": 247,
            "example_instance_id": 246,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 248,
            "example_instance_id": 247,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 249,
            "example_instance_id": 248,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack c b)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b c)\n(unstack c d)\n(pick-up d)\n(stack d a)\n(stack c a)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(stack c b)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(unstack c d)",
                "(pick-up d)",
                "(stack d a)",
                "(stack c a)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 250,
            "example_instance_id": 249,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(stack c b)\n(unstack d a)\n(put-down d)\n(unstack c b)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d b)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 251,
            "example_instance_id": 250,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 252,
            "example_instance_id": 251,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(unstack d a)\n(stack d c)\n(stack b c)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(unstack d a)",
                "(stack d c)",
                "(stack b c)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 253,
            "example_instance_id": 252,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a b)\n(put-down a)\n(unstack d a)\n(stack d b)\n(pick-up a)\n(stack a c)\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 254,
            "example_instance_id": 253,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the query problem:\n\n[PLAN]\n(unstack a b)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(unstack a b)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack a b)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 255,
            "example_instance_id": 254,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack c d)\n(stack c b)\n(pick-up d)\n(stack d a)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(unstack c d)\n(pick-up b)\n(stack b d)\n(stack a c)\n(pick-up d)\n(stack d c)\n[pddl_QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c d)",
                "(pick-up b)",
                "(stack b d)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 256,
            "example_instance_id": 255,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack c d)\n(stack c a)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 257,
            "example_instance_id": 256,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d a)\n(put-down d)\n(unstack a c)\n(stack a d)\n(pick-up c)\n(stack c d)\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(stack d b)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 258,
            "example_instance_id": 257,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d a)\n(stack d b)\n(unstack a c)\n(put-down a)\n(unstack d b)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 259,
            "example_instance_id": 258,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the given query problem:\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 260,
            "example_instance_id": 259,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 261,
            "example_instance_id": 260,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 262,
            "example_instance_id": 261,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a d)\n(pick-up b)\n(stack b d)\n(unstack c d)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 263,
            "example_instance_id": 262,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(pick-up d)\n(unstack b d)\n(stack d a)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(unstack b d)",
                "(stack d a)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 264,
            "example_instance_id": 263,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d b)\n(pick-up a)\n(stack a c)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a b)"
            ],
            "correct": true,
            "instance_id": 265,
            "example_instance_id": 264,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 266,
            "example_instance_id": 265,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(stack a d)\n(pick-up b)\n(stack b c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack d a)\n(stack d c)\n(unstack a b)\n(stack a d)\n(unstack b c)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(stack d c)",
                "(unstack a b)",
                "(stack a d)",
                "(unstack b c)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 267,
            "example_instance_id": 266,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 268,
            "example_instance_id": 267,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b d)\n(stack b a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a d)\n(pick-up d)\n(stack d c)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a d)\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 269,
            "example_instance_id": 268,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c d)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c d)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 270,
            "example_instance_id": 269,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(unstack d b)\n(stack d c)\n(pick-up a)\n(stack a b)\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(put-down b)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 271,
            "example_instance_id": 270,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack c a)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 272,
            "example_instance_id": 271,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 273,
            "example_instance_id": 272,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 274,
            "example_instance_id": 273,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d a)\n(stack d c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack b a)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 275,
            "example_instance_id": 274,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack b d)\n(stack b a)\n(pick-up c)\n(stack c d)\n(unstack b a)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in pddl syntax:\n\n(unstack a b)\n(stack a c)\n(unstack b c)\n(stack b d)\n(pick-up d)\n(stack d a)\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a c)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 276,
            "example_instance_id": 275,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 277,
            "example_instance_id": 276,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack b c)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 278,
            "example_instance_id": 277,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack b d)\n(stack b c)\n(pick-up a)\n(stack a d)\n(unstack b c)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack c d)\n(stack c b)\n(pick-up a)\n(stack a d)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 279,
            "example_instance_id": 278,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d b)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c a)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 280,
            "example_instance_id": 279,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 281,
            "example_instance_id": 280,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up d)\n(stack d b)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack c b)\n(put-down c)\n(unstack b a)\n(stack b c)\n(unstack a d)\n(stack a c)\n(pick-up d)\n(stack d a)\n(put-down b)\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b c)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(put-down b)"
            ],
            "correct": false,
            "instance_id": 282,
            "example_instance_id": 281,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 283,
            "example_instance_id": 282,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(unstack c d)\n(stack c a)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c a)\n(unstack b d)\n(stack b d)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(unstack b d)",
                "(stack b d)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 284,
            "example_instance_id": 283,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n(unstack a d)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack a b)\n(pick-up c)\n(stack c d)\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 285,
            "example_instance_id": 284,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(put-down a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 286,
            "example_instance_id": 285,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack d c)\n(stack d a)\n(unstack c b)\n(stack b c)\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(stack d a)",
                "(unstack c b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 287,
            "example_instance_id": 286,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(stack d a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c d)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 288,
            "example_instance_id": 287,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a d)\n(put-down a)\n(unstack b c)\n(stack b d)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 289,
            "example_instance_id": 288,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack b c)\n(stack b d)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem:\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 290,
            "example_instance_id": 289,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack a d)\n(stack a c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "; Query Problem Plan\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 291,
            "example_instance_id": 290,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a b)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 292,
            "example_instance_id": 291,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up c)\n(put-down c)\n(unstack b d)\n(stack b c)\n(unstack d c)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d b)",
                "(unstack c a)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b c)",
                "(unstack d c)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 293,
            "example_instance_id": 292,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d b)\n(unstack c a)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a b)\n(put-down a)\n(unstack c d)\n(put-down c)\n(unstack d a)\n(stack d c)\n(unstack b *)\n(stack b c)\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d c)",
                "(unstack b *)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 294,
            "example_instance_id": 293,
            "relaxed_checks": {
                "del_and_precond_relax": -1,
                "del_relax_only": -1,
                "precond_relax_only": -1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 295,
            "example_instance_id": 294,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack c a)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(unstack c d)\n(pick-up b)\n(stack b d)\n(stack c b)\n(stack a c)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(pick-up b)",
                "(stack b d)",
                "(stack c b)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 296,
            "example_instance_id": 295,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(unstack b c)\n(stack b c)\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack b c)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 297,
            "example_instance_id": 296,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(stack c b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c b)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": true,
            "instance_id": 298,
            "example_instance_id": 297,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(stack c b)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d a)\n(unstack c b)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(stack a d)\n(unstack c b)\n(put-down c)\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(stack a d)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 299,
            "example_instance_id": 298,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack c a)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 300,
            "example_instance_id": 299,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d b)\n(unstack c a)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 301,
            "example_instance_id": 300,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack c a)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a c)\n(pick-up d)\n(stack d b)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 302,
            "example_instance_id": 301,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack c b)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 303,
            "example_instance_id": 302,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(stack c b)\n(pick-up a)\n(stack a d)\n(unstack c b)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b c)\n(unstack a d)\n(stack a b)\n(stack d a)\n(unstack c a)\n(stack c d)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(unstack a d)",
                "(stack a b)",
                "(stack d a)",
                "(unstack c a)",
                "(stack c d)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 304,
            "example_instance_id": 303,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b c)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b a)\n(unstack d c)\n(put-down d)\n(unstack c b)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 305,
            "example_instance_id": 304,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem:\n\n(pick-up b)\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a c)\n(put-down d)\n(pick-up d)\n(stack d a)\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(put-down d)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 306,
            "example_instance_id": 305,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up c)\n(stack c b)\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c a)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 307,
            "example_instance_id": 306,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c a)\n(unstack d b)\n(put-down d)\n(unstack c a)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up c)\n(stack c d)\n(unstack b c)\n(stack b c)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack b a)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c d)",
                "(unstack b c)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 308,
            "example_instance_id": 307,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c d)\n(unstack b a)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(pick-up b)\n(stack b d)\n(unstack c b)\n(stack c a)\n(unstack a d)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack c b)",
                "(stack c a)",
                "(unstack a d)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 309,
            "example_instance_id": 308,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d c)\n(put-down d)\n(unstack c b)\n(stack c a)\n(pick-up b)\n(stack b d)\n(unstack c a)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c a)\n(put-down c)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c a)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 310,
            "example_instance_id": 309,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan in PDDL syntax for the query problem.\n\n(unstack b c)\n(put-down b)\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack d a)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 311,
            "example_instance_id": 310,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d a)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c b)\n(unstack d a)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": true,
            "instance_id": 312,
            "example_instance_id": 311,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(unstack d c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(unstack d c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 313,
            "example_instance_id": 312,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a b)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(unstack b c)\n(stack b d)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 314,
            "example_instance_id": 313,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(unstack d b)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack d b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 315,
            "example_instance_id": 314,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack d b)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 316,
            "example_instance_id": 315,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(unstack b a)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack b a)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 317,
            "example_instance_id": 316,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n(unstack c d)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c d)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 318,
            "example_instance_id": 317,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(stack d c)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 319,
            "example_instance_id": 318,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b a)\n(unstack a c)\n(pick-up c)\n(stack c d)\n(stack a c)\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack a c)",
                "(pick-up c)",
                "(stack c d)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 320,
            "example_instance_id": 319,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c d)\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a d)\n(unstack d a)\n(put-down d)\n(pick-up b)\n(stack a b)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up b)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 321,
            "example_instance_id": 320,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "; Plan for the query problem\n(unstack d b)\n(put-down d)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c)\n; End of plan\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": true,
            "instance_id": 322,
            "example_instance_id": 321,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c b)\n(unstack b c)\n(stack b d)\n(unstack d a)\n(stack d a)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack d a)",
                "(stack d a)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 323,
            "example_instance_id": 322,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(put-down c)\n(unstack d a)\n(put-down d)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(put-down a)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 324,
            "example_instance_id": 323,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b c)\n(put-down b)\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 325,
            "example_instance_id": 324,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d a)\n(unstack a d)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack a d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 326,
            "example_instance_id": 325,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack c b)\n(put-down c)\n(pick-up d)\n(put-down d)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up d)",
                "(put-down d)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": true,
            "instance_id": 327,
            "example_instance_id": 326,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c d)\n(unstack a c)\n(stack a d)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(stack a c)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 328,
            "example_instance_id": 327,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(stack a c)\n(unstack b d)\n(put-down b)\n(unstack a c)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b d)\n(unstack c d)\n(stack c b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 329,
            "example_instance_id": 328,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b d)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d b)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 330,
            "example_instance_id": 329,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d a)\n(stack d b)\n(unstack a c)\n(put-down a)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b a)\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 331,
            "example_instance_id": 330,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack a c)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(plan\n  (unstack a c)\n  (put-down a)\n  (unstack d b)\n  (stack d a)\n  (unstack b a)\n  (stack b c)\n  (pick-up a)\n  (stack a d)\n)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(unstack b a)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 332,
            "example_instance_id": 331,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(on d b)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b c)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d b)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 333,
            "example_instance_id": 332,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b c)\n(unstack d a)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d b)\n(unstack b c)\n(stack b d)\n(unstack c a)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(stack b d)",
                "(unstack c a)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d b)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack c a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 334,
            "example_instance_id": 333,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(stack b d)\n(unstack c a)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack b d)\n(stack b c)\n(unstack c a)\n(stack c a)\n(unstack d d)\n(stack d b)\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack b d)",
                "(stack b c)",
                "(unstack c a)",
                "(stack c a)",
                "(unstack d d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 335,
            "example_instance_id": 334,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a d)\n(pick-up c)\n(stack c d)\n(stack a c)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack a b)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(pick-up c)",
                "(stack c d)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 336,
            "example_instance_id": 335,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack a d)\n(stack a b)\n(pick-up c)\n(stack c d)\n(unstack a b)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(unstack c d)\n(stack c a)\n(pick-up b)\n(stack b a)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b a)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 337,
            "example_instance_id": 336,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(put-down d)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan PDDL syntax for the given query problem:\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 338,
            "example_instance_id": 337,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(stack a b)\n(unstack c b)\n(stack c d)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a b)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 339,
            "example_instance_id": 338,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c d)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 340,
            "example_instance_id": 339,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(stack c d)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d c) \n(unstack c d)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 341,
            "example_instance_id": 340,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a b)\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d a)\n(pick-up b)\n(stack b a)\n(put-down d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a d)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(pick-up b)",
                "(stack b a)",
                "(put-down d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 342,
            "example_instance_id": 341,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(on d a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(stack a d)\n(unstack c b)\n(put-down c)\n(unstack a d)\n(stack a c)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c a)\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 343,
            "example_instance_id": 342,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c a)\n(unstack d b)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 344,
            "example_instance_id": 343,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack b d)\n(stack b c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(on c a)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(unstack c a)\n(stack c b)\n(unstack a b)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(unstack c a)",
                "(stack c b)",
                "(unstack a b)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 345,
            "example_instance_id": 344,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(on c a)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 346,
            "example_instance_id": 345,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 347,
            "example_instance_id": 346,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a b)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(plan\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n(plan_end)\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 348,
            "example_instance_id": 347,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "(plan\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n)\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 349,
            "example_instance_id": 348,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": true,
            "instance_id": 350,
            "example_instance_id": 349,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a d)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 351,
            "example_instance_id": 350,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 352,
            "example_instance_id": 351,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b a)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 353,
            "example_instance_id": 352,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d a)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 354,
            "example_instance_id": 353,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d c)\n(stack d a)\n(unstack c b)\n(put-down c)\n(unstack d a)\n(stack d c)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 355,
            "example_instance_id": 354,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 356,
            "example_instance_id": 355,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a c)\n(stack a d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(stack a b)\n(unstack b c)\n(stack c a)\n(unstack d a)\n(put-down d)\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack b c)",
                "(stack c a)",
                "(unstack d a)",
                "(put-down d)"
            ],
            "correct": false,
            "instance_id": 357,
            "example_instance_id": 356,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack d a)\n(put-down d)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b a)\n(unstack a d)\n(stack a c)\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 358,
            "example_instance_id": 357,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a c)\n(unstack b d)\n(put-down b)\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(stack c a)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 359,
            "example_instance_id": 358,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack c b)\n(stack c a)\n(unstack b d)\n(put-down b)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 360,
            "example_instance_id": 359,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack d c)\n(put-down d)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(unstack d b)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack d b)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 361,
            "example_instance_id": 360,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(stack d c)\n(unstack b a)\n(put-down b)\n(unstack d c)\n(stack d b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": true,
            "instance_id": 362,
            "example_instance_id": 361,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(unstack d b)\n(stack d b)\n(stack b c)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(unstack d b)",
                "(stack d b)",
                "(stack b c)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 363,
            "example_instance_id": 362,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b c)\n(unstack d a)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 364,
            "example_instance_id": 363,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 365,
            "example_instance_id": 364,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": true,
            "instance_id": 366,
            "example_instance_id": 365,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a b)\n(pick-up b)\n(stack b c)\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 367,
            "example_instance_id": 366,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 368,
            "example_instance_id": 367,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 369,
            "example_instance_id": 368,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(stack d b)\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d c)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 370,
            "example_instance_id": 369,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d a)\n(clear c)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(stack d c)\n(unstack a b)\n(put-down a)\n(unstack d c)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c a)\n(unstack a b)\n(put-down a)\n(unstack b d)\n(stack b a)\n(unstack c a)\n(stack c b)\n(unstack a b)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)",
                "(unstack c a)",
                "(stack c b)",
                "(unstack a b)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 371,
            "example_instance_id": 370,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up a)\n(stack a b)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 372,
            "example_instance_id": 371,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(stack b d)\n(unstack a c)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(stack b d)",
                "(unstack a c)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 373,
            "example_instance_id": 372,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c a)\n(unstack d a)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(unstack d a)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 374,
            "example_instance_id": 373,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack d a)\n(stack d b)\n(pick-up c)\n(stack c a)\n(unstack d b)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(plan\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n(unstack d c)\n(stack d b)\n(unstack a c)\n(stack a d)\n(unstack c a)\n(stack c b)\n)\n(plan_end)\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)",
                "(unstack d c)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d c)",
                "(stack d b)",
                "(unstack a c)",
                "(stack a d)",
                "(unstack c a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 375,
            "example_instance_id": 374,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(stack b a)\n(unstack d c)\n(put-down d)\n(unstack b a)\n(stack b c)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up b)\n(stack a b)\n(unstack d b)\n(pick-up c)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up b)",
                "(stack a b)",
                "(unstack d b)",
                "(pick-up c)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 376,
            "example_instance_id": 375,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(stack d c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n; Plan for the query problem\n(unstack a c)\n(put-down a)\n(unstack b d)\n(put-down b)\n(pick-up a)\n(stack b a)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up a)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 377,
            "example_instance_id": 376,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(on c b)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(unstack b d)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 378,
            "example_instance_id": 377,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a d)\n(unstack c a)\n(stack c a)\n(unstack d b)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack c a)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 379,
            "example_instance_id": 378,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d b)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack c d)\n(put-down c)\n(unstack b a)\n(put-down b)\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 380,
            "example_instance_id": 379,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(put-down d)\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 381,
            "example_instance_id": 380,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(put-down a)\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b c)\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(stack c b)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 382,
            "example_instance_id": 381,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack c a)\n(stack c b)\n(unstack a d)\n(put-down a)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(stack a c)\n(unstack b c)\n(pick-up c)\n(stack c b)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(stack a d)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack a d)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a c)",
                "(unstack b c)",
                "(pick-up c)",
                "(stack c b)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 383,
            "example_instance_id": 382,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(stack a d)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c b)\n(unstack a d)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(put-down b)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack d a)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 384,
            "example_instance_id": 383,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d a)\n(pick-up c)\n(stack c b)\n(unstack d a)\n(stack d c)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem using PDDL syntax:\n\n[PLAN]\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d a)\n(unstack a c)\n(stack a d)\n(unstack c b)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack a c)",
                "(stack a d)",
                "(unstack c b)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 385,
            "example_instance_id": 384,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(unstack c d)\n(stack c a)\n(unstack d b)\n(stack d c)\n(unstack b a)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack b d)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack c d)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 386,
            "example_instance_id": 385,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(put-down d)\n(unstack b a)\n(stack b d)\n(pick-up a)\n(stack a c)\n(unstack b d)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "The plan for the query problem should be:\n\n[PLAN]\n(unstack b c)\n(unstack c a)\n(put-down c)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(unstack c a)",
                "(put-down c)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 387,
            "example_instance_id": 386,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n[PLAN]\n(pick-up c)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 388,
            "example_instance_id": 387,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d a)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b a)\n(unstack c d)\n(put-down c)\n(stack a c)\n(stack d c)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(unstack c d)",
                "(put-down c)",
                "(stack a c)",
                "(stack d c)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 389,
            "example_instance_id": 388,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c a)\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 390,
            "example_instance_id": 389,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(stack b d)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": true,
            "instance_id": 391,
            "example_instance_id": 390,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d b)\n(put-down d)\n(unstack b a)\n(stack b d)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 392,
            "example_instance_id": 391,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d c)\n(unstack b a)\n(put-down b)\n(unstack d c)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack d c)\n(put-down d)\n(unstack b d)\n(stack b a)\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack d a)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 393,
            "example_instance_id": 392,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on c b)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(unstack d c)\n(stack d a)\n(pick-up c)\n(stack c b)\n(unstack d a)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 394,
            "example_instance_id": 393,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a d)\n(put-down a)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c a)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(stack a c)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 395,
            "example_instance_id": 394,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(stack a c)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 396,
            "example_instance_id": 395,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c d)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(unstack c b)\n(pick-up a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack c b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 397,
            "example_instance_id": 396,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a d))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d b)\n(unstack a c)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(unstack a c)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 398,
            "example_instance_id": 397,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a d)\n(unstack b d)\n(stack b a)\n(unstack c a)\n(put-down c)\n(unstack d b)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack b d)",
                "(stack b a)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 399,
            "example_instance_id": 398,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(on d c)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d c)\n(put-down d)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 400,
            "example_instance_id": 399,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b d)\n(pick-up c)\n(stack c a)\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c b)\n(unstack b a)\n(put-down b)\n(pick-up d)\n(stack d a)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 401,
            "example_instance_id": 400,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(stack d a)\n(unstack b a)\n(stack b d)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(put-down d)",
                "(unstack b a)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack b c)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(stack d a)",
                "(unstack b a)",
                "(stack b d)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 402,
            "example_instance_id": 401,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(on d b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d b)\n(put-down d)\n(unstack b a)\n(stack b c)\n(pick-up a)\n(stack a d)\n(unstack b c)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c d)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 403,
            "example_instance_id": 402,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "For the given query problem, here is the corresponding plan:\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": true,
            "instance_id": 404,
            "example_instance_id": 403,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b a)\n(unstack c d)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(unstack c d)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 405,
            "example_instance_id": 404,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d a)\n(put-down d)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 406,
            "example_instance_id": 405,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c b)\n(ontable d)\n(clear c)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(unstack a d)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 407,
            "example_instance_id": 406,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up b)\n(stack b a)\n(unstack d a)\n(stack d c)\n(unstack a c)\n(stack a d)\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(unstack d a)",
                "(stack d c)",
                "(unstack a c)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 408,
            "example_instance_id": 407,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d a)\n(put-down d)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c d)\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(unstack b a)\n(stack b c)\n(pick-up d)\n(stack d a)\n(unstack a c)\n(stack a b)\n(unstack d a)\n(stack d c)\n[QUERY PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack b a)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack b a)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack a c)",
                "(stack a b)",
                "(unstack d a)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 409,
            "example_instance_id": 408,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c d)\n(unstack b a)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 410,
            "example_instance_id": 409,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c d)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d b)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b d)\n(unstack c a)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack c a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 411,
            "example_instance_id": 410,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(unstack b c)\n(stack b d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(put-down c)\n(unstack a b)\n(stack a c)\n(unstack b d)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b d)",
                "(put-down b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(unstack b d)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 412,
            "example_instance_id": 411,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b d)\n(ontable c)\n(on d c)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b d)\n(put-down b)\n(unstack d c)\n(put-down d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a d)\n(put-down a)\n(unstack d b)\n(put-down d)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b d)\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(stack a c)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 413,
            "example_instance_id": 412,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack a d)\n(stack a c)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b d)\n(unstack c d)\n(stack c a)\n(unstack d b)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack c d)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 414,
            "example_instance_id": 413,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(clear a)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c a)\n(unstack d b)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up d)\n(stack d b)\n(unstack c a)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(stack c d)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d b)",
                "(unstack c a)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 415,
            "example_instance_id": 414,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(ontable d)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(stack c d)\n(unstack a b)\n(put-down a)\n(unstack c d)\n(stack c a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a b)\n(stack a d)\n(unstack b c)\n(stack b d)\n(unstack a d)\n(stack a c)\n(unstack d b)\n(stack d a)\n(unstack c b)\n(stack c d)\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a d)",
                "(unstack b c)",
                "(stack b d)",
                "(unstack a d)",
                "(stack a c)",
                "(unstack d b)",
                "(stack d a)",
                "(unstack c b)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 416,
            "example_instance_id": 415,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(unstack c d)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 417,
            "example_instance_id": 416,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(put-down a)\n(unstack b c)\n(stack b a)\n(unstack c d)\n(put-down c)\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b a)",
                "(unstack d c)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 418,
            "example_instance_id": 417,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(put-down c)\n(unstack d a)\n(stack d c)\n(pick-up b)\n(stack b a)\n(unstack d c)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(put-down a)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 419,
            "example_instance_id": 418,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "Based on the given query problem, the plan is as follows:\n\n[QUERY_PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(unstack b a)\n(stack b d)\n(stack c a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(stack b d)",
                "(stack c a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 420,
            "example_instance_id": 419,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n(unstack b d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack b d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 421,
            "example_instance_id": 420,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d a)\n(stack d b)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 422,
            "example_instance_id": 421,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b c)\n(put-down b)\n(stack a c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(stack b d)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 423,
            "example_instance_id": 422,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack b c)\n(stack b d)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(unstack c b)\n(stack c d)\n(pick-up d)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d a)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 424,
            "example_instance_id": 423,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(stack d a)\n(unstack c b)\n(put-down c)\n(unstack d a)\n(stack d b)\n(pick-up c)\n(stack c d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(stack c b)"
            ],
            "correct": true,
            "instance_id": 425,
            "example_instance_id": 424,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a d)\n(put-down a)\n(unstack c b)\n(stack c a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 426,
            "example_instance_id": 425,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b c)\n(pick-up d)\n(stack d c)\n(unstack b a)\n(stack b d)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(stack c b)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack b a)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 427,
            "example_instance_id": 426,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(stack c b)\n(unstack d a)\n(put-down d)\n(unstack c b)\n(stack c a)\n(pick-up d)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a d)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 428,
            "example_instance_id": 427,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on d b))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack d c)\n(unstack c b)\n(unstack b a)\n(stack d a)\n(stack b d)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c d)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(unstack c b)",
                "(unstack b a)",
                "(stack d a)",
                "(stack b d)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 429,
            "example_instance_id": 428,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(stack c d)\n(unstack b a)\n(put-down b)\n(unstack c d)\n(stack c b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 430,
            "example_instance_id": 429,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up d)\n(put-down d)\n(pick-up b)\n(stack b d)\n[QUERY PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 431,
            "example_instance_id": 430,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(stack b a)\n(unstack c d)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b a)",
                "(unstack c d)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 432,
            "example_instance_id": 431,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack b d)\n(stack b a)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b d)\n(pick-up a)\n(stack a b)\n(unstack d a)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d a)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack b d)",
                "(pick-up a)",
                "(stack a b)",
                "(unstack d a)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 433,
            "example_instance_id": 432,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(on b d)\n(ontable c)\n(on d a)\n(clear b)\n)\n(:goal\n(and\n(on d b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d a)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 434,
            "example_instance_id": 433,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(ontable d)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(stack a d)\n(unstack c d)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack c b)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a d)",
                "(unstack c d)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 435,
            "example_instance_id": 434,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c d)\n(ontable d)\n(clear a)\n)\n(:goal\n(and\n(on a d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(unstack c d)\n(stack c b)\n(pick-up a)\n(stack a d)\n(unstack c b)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b d)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 436,
            "example_instance_id": 435,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 437,
            "example_instance_id": 436,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d c)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on c d))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c d)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 438,
            "example_instance_id": 437,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 439,
            "example_instance_id": 438,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a d)\n(on b c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c a)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 440,
            "example_instance_id": 439,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a d)\n(put-down a)\n(unstack c b)\n(stack c a)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack a d)",
                "(stack a b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 441,
            "example_instance_id": 440,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b c)\n(unstack a d)\n(stack a b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(unstack d c)\n(put-down d)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n(unstack a d)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack a d)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 442,
            "example_instance_id": 441,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(on d c)\n(clear d)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a d)\n(unstack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 443,
            "example_instance_id": 442,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack d c)\n(put-down d)\n(pick-up a)\n(stack a d)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 444,
            "example_instance_id": 443,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(on e a)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(put-down b)\n(unstack e a)\n(put-down e)\n(unstack d b)\n(stack d b)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(put-down b)",
                "(unstack e a)",
                "(put-down e)",
                "(unstack d b)",
                "(stack d b)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 445,
            "example_instance_id": 444,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(on e a)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b d)\n(on c b)\n(ontable d)\n(on e c)\n(clear a)\n)\n(:goal\n(and\n(on c d)\n(on d e))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a e)\n(put-down a)\n(unstack b d)\n(stack b e)\n(unstack c b)\n(stack c d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack e c)",
                "(put-down e)",
                "(unstack c b)",
                "(stack c a)",
                "(unstack b d)",
                "(put-down b)",
                "(pick-up d)",
                "(stack d e)",
                "(unstack c a)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack b d)",
                "(stack b e)",
                "(unstack c b)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 446,
            "example_instance_id": 445,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b d)\n(on c b)\n(ontable d)\n(on e c)\n(clear a)\n)\n(:goal\n(and\n(on c d)\n(on d e))\n)\n)\n\n[PLAN]\n(unstack a e)\n(put-down a)\n(unstack e c)\n(put-down e)\n(unstack c b)\n(stack c a)\n(unstack b d)\n(put-down b)\n(pick-up d)\n(stack d e)\n(unstack c a)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(on b e)\n(on c a)\n(ontable d)\n(ontable e)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(put-down a)\n(unstack b e)\n(stack a b)\n(pick-up d)\n(stack b d)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a c)",
                "(unstack b e)",
                "(stack b d)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack b e)",
                "(stack a b)",
                "(pick-up d)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 447,
            "example_instance_id": 446,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(on b e)\n(on c a)\n(ontable d)\n(ontable e)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b d)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a c)\n(unstack b e)\n(stack b d)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(on e d)\n(clear e)\n)\n(:goal\n(and\n(on c b)\n(on d e)\n(on e c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(unstack b a)\n(stack b c)\n(unstack c b)\n(put-down c)\n(unstack d c)\n(stack d e)\n(unstack e d)\n(stack e c)\n(pick-up d)\n(stack d e)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack e d)",
                "(put-down e)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up e)",
                "(stack e c)",
                "(pick-up d)",
                "(stack d e)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack b a)",
                "(stack b c)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack d c)",
                "(stack d e)",
                "(unstack e d)",
                "(stack e c)",
                "(pick-up d)",
                "(stack d e)"
            ],
            "correct": false,
            "instance_id": 448,
            "example_instance_id": 447,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(on d c)\n(on e d)\n(clear e)\n)\n(:goal\n(and\n(on c b)\n(on d e)\n(on e c))\n)\n)\n\n[PLAN]\n(unstack e d)\n(put-down e)\n(unstack d c)\n(put-down d)\n(pick-up e)\n(stack e c)\n(pick-up d)\n(stack d e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(ontable e)\n(clear a)\n(clear b)\n(clear e)\n)\n(:goal\n(and\n(on b d)\n(on c e)\n(on e a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down a)\n(pick-up e)\n(stack e a)\n(pick-up b)\n(stack b d)\n(pick-up c)\n(stack c e)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up e)",
                "(stack e a)",
                "(unstack c d)",
                "(stack c e)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up e)",
                "(stack e a)",
                "(pick-up b)",
                "(stack b d)",
                "(pick-up c)",
                "(stack c e)"
            ],
            "correct": false,
            "instance_id": 449,
            "example_instance_id": 448,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(ontable d)\n(ontable e)\n(clear a)\n(clear b)\n(clear e)\n)\n(:goal\n(and\n(on b d)\n(on c e)\n(on e a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up e)\n(stack e a)\n(unstack c d)\n(stack c e)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(ontable e)\n(clear a)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on d a)\n(on e d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(unstack d b)\n(pick-up a)\n(stack a c)\n(stack d a)\n(pick-up e)\n(stack e d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a e)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack a e)",
                "(stack a c)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up e)",
                "(stack e d)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d b)",
                "(pick-up a)",
                "(stack a c)",
                "(stack d a)",
                "(pick-up e)",
                "(stack e d)"
            ],
            "correct": false,
            "instance_id": 450,
            "example_instance_id": 449,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c d)\n(on d b)\n(ontable e)\n(clear a)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on d a)\n(on e d))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a e)\n(unstack c d)\n(put-down c)\n(unstack a e)\n(stack a c)\n(unstack d b)\n(stack d a)\n(pick-up e)\n(stack e d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear b)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on b e)\n(on d a)\n(on e c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up e)\n(put-down e)\n(pick-up c)\n(stack c e)\n(pick-up b)\n(stack b e)\n(pick-up a)\n(stack a d)\n(unstack c e)\n(stack c b)\n(unstack b e)\n(stack b c)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up e)",
                "(stack e c)",
                "(unstack b a)",
                "(stack b e)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up e)",
                "(put-down e)",
                "(pick-up c)",
                "(stack c e)",
                "(pick-up b)",
                "(stack b e)",
                "(pick-up a)",
                "(stack a d)",
                "(unstack c e)",
                "(stack c b)",
                "(unstack b e)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 451,
            "example_instance_id": 450,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear b)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on b e)\n(on d a)\n(on e c))\n)\n)\n\n[PLAN]\n(pick-up e)\n(stack e c)\n(unstack b a)\n(stack b e)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(on c b)\n(on d a)\n(on e c)\n(clear d)\n)\n(:goal\n(and\n(on a e)\n(on b c)\n(on e b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d a)\n(stack d e)\n(unstack c b)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a e)",
                "(stack a d)",
                "(unstack e c)",
                "(stack e a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack e a)",
                "(stack e b)",
                "(unstack a d)",
                "(stack a e)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(stack d e)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 452,
            "example_instance_id": 451,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(on c b)\n(on d a)\n(on e c)\n(clear d)\n)\n(:goal\n(and\n(on a e)\n(on b c)\n(on e b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a e)\n(stack a d)\n(unstack e c)\n(stack e a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b c)\n(unstack e a)\n(stack e b)\n(unstack a d)\n(stack a e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(on e a)\n(clear e)\n)\n(:goal\n(and\n(on b e)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack e a)\n(put-down e)\n(unstack a d)\n(stack a e)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b d)\n(unstack a e)\n(put-down a)\n(pick-up e)\n(stack e b)\n(unstack a d)\n(stack a e)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack e a)",
                "(put-down e)",
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(unstack b c)",
                "(stack b e)",
                "(unstack d a)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack e a)",
                "(put-down e)",
                "(unstack a d)",
                "(stack a e)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b d)",
                "(unstack a e)",
                "(put-down a)",
                "(pick-up e)",
                "(stack e b)",
                "(unstack a d)",
                "(stack a e)"
            ],
            "correct": false,
            "instance_id": 453,
            "example_instance_id": 452,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(on b c)\n(ontable c)\n(on d b)\n(on e a)\n(clear e)\n)\n(:goal\n(and\n(on b e)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack e a)\n(put-down e)\n(unstack a d)\n(put-down a)\n(unstack d b)\n(stack d a)\n(unstack b c)\n(stack b e)\n(unstack d a)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d e)\n(on e a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on e d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b c)\n(stack b a)\n(unstack c d)\n(stack c e)\n(unstack d e)\n(stack d a)\n(unstack e a)\n(stack e d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d e)",
                "(put-down d)",
                "(unstack e a)",
                "(stack e d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(stack b a)",
                "(unstack c d)",
                "(stack c e)",
                "(unstack d e)",
                "(stack d a)",
                "(unstack e a)",
                "(stack e d)"
            ],
            "correct": false,
            "instance_id": 454,
            "example_instance_id": 453,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c d)\n(on d e)\n(on e a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on e d))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c d)\n(put-down c)\n(unstack d e)\n(put-down d)\n(unstack e a)\n(stack e d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c e)\n(ontable d)\n(on e b)\n(clear c)\n)\n(:goal\n(and\n(on d a)\n(on e b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(unstack a d)\n(stack a d)\n(pick-up b)\n(stack b e)\n(unstack c e)\n(stack c e)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c e)",
                "(put-down c)",
                "(unstack e b)",
                "(stack e c)",
                "(unstack b a)",
                "(put-down b)",
                "(unstack e c)",
                "(stack e b)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b e)",
                "(unstack c e)",
                "(stack c e)"
            ],
            "correct": false,
            "instance_id": 455,
            "example_instance_id": 454,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(on b a)\n(on c e)\n(ontable d)\n(on e b)\n(clear c)\n)\n(:goal\n(and\n(on d a)\n(on e b))\n)\n)\n\n[PLAN]\n(unstack c e)\n(put-down c)\n(unstack e b)\n(stack e c)\n(unstack b a)\n(put-down b)\n(unstack e c)\n(stack e b)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(on c b)\n(ontable d)\n(on e d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on d b)\n(on e a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a e)\n(put-down a)\n(unstack c b)\n(stack c a)\n(unstack e d)\n(stack e c)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack e d)",
                "(stack e a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c a)",
                "(unstack e d)",
                "(stack e c)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 456,
            "example_instance_id": 455,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(on c b)\n(ontable d)\n(on e d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on d b)\n(on e a))\n)\n)\n\n[PLAN]\n(unstack a e)\n(put-down a)\n(unstack e d)\n(stack e a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d e)\n(ontable e)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b e)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b e)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d e)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b e)",
                "(unstack d a)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b e)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 457,
            "example_instance_id": 456,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d e)\n(ontable e)\n(clear a)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b e)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d e)\n(stack d a)\n(pick-up b)\n(stack b e)\n(unstack d a)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(ontable e)\n(clear b)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on b e)\n(on c b)\n(on e d))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for your query problem:\n\n[QUERY PLAN]\n(unstack b c)\n(pick-up e)\n(stack e d)\n(unstack c a)\n(stack c b)\n(unstack a c)\n(stack a c)\n(stack b e)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up e)",
                "(stack e d)",
                "(unstack b c)",
                "(stack b e)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(pick-up e)",
                "(stack e d)",
                "(unstack c a)",
                "(stack c b)",
                "(unstack a c)",
                "(stack a c)",
                "(stack b e)"
            ],
            "correct": false,
            "instance_id": 458,
            "example_instance_id": 457,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(ontable d)\n(ontable e)\n(clear b)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on b e)\n(on c b)\n(on e d))\n)\n)\n\n[PLAN]\n(pick-up e)\n(stack e d)\n(unstack b c)\n(stack b e)\n(unstack c a)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(on c d)\n(ontable d)\n(on e b)\n(clear e)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(unstack e b)\n(unstack b a)\n(stack b d)\n(stack a b)\n(stack e c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack e b)",
                "(put-down e)",
                "(unstack b a)",
                "(stack b e)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack b e)",
                "(stack b d)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(unstack e b)",
                "(unstack b a)",
                "(stack b d)",
                "(stack a b)",
                "(stack e c)"
            ],
            "correct": false,
            "instance_id": 459,
            "example_instance_id": 458,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(on c d)\n(ontable d)\n(on e b)\n(clear e)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n[PLAN]\n(unstack e b)\n(put-down e)\n(unstack b a)\n(stack b e)\n(unstack a c)\n(put-down a)\n(unstack c d)\n(put-down c)\n(unstack b e)\n(stack b d)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d e)\n(on e b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b e)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the corresponding plan for the query problem in PDDL syntax:\n\n[PLAN]\n(pick-up b)\n(stack b e)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n(unstack d e)\n(put-down d)\n(pick-up a)\n(stack a d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d e)",
                "(put-down d)",
                "(unstack a c)",
                "(stack a d)",
                "(unstack e b)",
                "(put-down e)",
                "(pick-up b)",
                "(stack b e)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b e)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(unstack d e)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 460,
            "example_instance_id": 459,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d e)\n(on e b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on b e)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack d e)\n(put-down d)\n(unstack a c)\n(stack a d)\n(unstack e b)\n(put-down e)\n(pick-up b)\n(stack b e)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(on e d)\n(clear a)\n(clear e)\n)\n(:goal\n(and\n(on b a)\n(on d e))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(unstack e d)\n(stack e a)\n(unstack d b)\n(put-down d)\n(pick-up b)\n(stack b a)\n(pick-up d)\n(stack d e)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack e d)",
                "(put-down e)",
                "(unstack d b)",
                "(stack d e)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack e d)",
                "(stack e a)",
                "(unstack d b)",
                "(put-down d)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d e)"
            ],
            "correct": false,
            "instance_id": 461,
            "example_instance_id": 460,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(on d b)\n(on e d)\n(clear a)\n(clear e)\n)\n(:goal\n(and\n(on b a)\n(on d e))\n)\n)\n\n[PLAN]\n(unstack e d)\n(put-down e)\n(unstack d b)\n(stack d e)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(on e d)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on a e))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack e d)\n(put-down e)\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a e)\n",
            "ground_truth_plan": [
                "(unstack e d)",
                "(put-down e)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a e)"
            ],
            "extracted_llm_plan": [
                "(unstack e d)",
                "(put-down e)",
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a e)"
            ],
            "correct": true,
            "instance_id": 462,
            "example_instance_id": 461,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(on d a)\n(on e d)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on a e))\n)\n)\n\n[PLAN]\n(unstack e d)\n(put-down e)\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(on e a)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a e)\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up e)\n(stack e a)\n(pick-up d)\n(stack d b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d e)",
                "(unstack c b)",
                "(put-down c)",
                "(unstack d e)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack e a)",
                "(put-down e)",
                "(pick-up a)",
                "(stack a e)"
            ],
            "extracted_llm_plan": [
                "(pick-up e)",
                "(stack e a)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 463,
            "example_instance_id": 462,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(on e a)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a e)\n(on c d)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack d c)\n(stack d e)\n(unstack c b)\n(put-down c)\n(unstack d e)\n(stack d b)\n(pick-up c)\n(stack c d)\n(unstack e a)\n(put-down e)\n(pick-up a)\n(stack a e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(on b e)\n(on c a)\n(ontable d)\n(on e d)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a)\n(on e b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(stack a d)\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a c)\n(pick-up b)\n(stack b e)\n(pick-up c)\n(stack c d)\n(pick-up e)\n(stack e b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(unstack b e)",
                "(put-down b)",
                "(unstack e d)",
                "(put-down e)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up e)",
                "(stack e b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(stack a d)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b e)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up e)",
                "(stack e b)"
            ],
            "correct": false,
            "instance_id": 464,
            "example_instance_id": 463,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(on b e)\n(on c a)\n(ontable d)\n(on e d)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c d)\n(on d a)\n(on e b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(unstack b e)\n(put-down b)\n(unstack e d)\n(put-down e)\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(pick-up b)\n(stack b c)\n(pick-up e)\n(stack e b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear b)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on c e)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(stack a c)\n(pick-up e)\n(stack e a)\n(pick-up b)\n(stack b d)\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c e)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up e)",
                "(stack e a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 465,
            "example_instance_id": 464,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear b)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on c e)\n(on d b))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c e)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(on e b)\n(clear a)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d e))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack e b)\n(put-down e)\n(pick-up c)\n(stack c a)\n(unstack e b)\n(pick-up d)\n(stack d e)\n(put-down b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(unstack e b)",
                "(put-down e)",
                "(unstack b d)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d e)",
                "(unstack b c)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack e b)",
                "(put-down e)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack e b)",
                "(pick-up d)",
                "(stack d e)",
                "(put-down b)"
            ],
            "correct": false,
            "instance_id": 466,
            "example_instance_id": 465,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(on e b)\n(clear a)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d e))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c a)\n(unstack e b)\n(put-down e)\n(unstack b d)\n(stack b c)\n(pick-up d)\n(stack d e)\n(unstack b c)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d e)\n(on e b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c d)\n(on e a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack d e)\n(pick-up e)\n(stack e a)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d e)",
                "(put-down d)",
                "(unstack e b)",
                "(stack e a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack d e)",
                "(pick-up e)",
                "(stack e a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "correct": false,
            "instance_id": 467,
            "example_instance_id": 466,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d e)\n(on e b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c d)\n(on e a))\n)\n)\n\n[PLAN]\n(unstack d e)\n(put-down d)\n(unstack e b)\n(stack e a)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b d)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c e)\n(on e b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a e)\n(put-down a)\n(pick-up c)\n(stack c e)\n(unstack b d)\n(stack b a)\n(pick-up a)\n(stack a d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack a e)",
                "(stack a d)",
                "(pick-up e)",
                "(stack e b)",
                "(pick-up c)",
                "(stack c e)"
            ],
            "extracted_llm_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c e)",
                "(unstack b d)",
                "(stack b a)",
                "(pick-up a)",
                "(stack a d)"
            ],
            "correct": false,
            "instance_id": 468,
            "example_instance_id": 467,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b d)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on c e)\n(on e b))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack a e)\n(stack a d)\n(pick-up e)\n(stack e b)\n(pick-up c)\n(stack c e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(on e c)\n(clear b)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack e c)\n(put-down e)\n(unstack a d)\n(put-down a)\n(pick-up d)\n(stack d a)\n(unstack c a)\n(stack c d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b d)\n",
            "ground_truth_plan": [
                "(unstack e c)",
                "(put-down e)",
                "(unstack c a)",
                "(put-down c)",
                "(unstack a d)",
                "(stack a c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack e c)",
                "(put-down e)",
                "(unstack a d)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 469,
            "example_instance_id": 468,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c a)\n(ontable d)\n(on e c)\n(clear b)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack e c)\n(put-down e)\n(unstack c a)\n(put-down c)\n(unstack a d)\n(stack a c)\n(pick-up d)\n(stack d a)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(on d e)\n(ontable e)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a c)\n(pick-up e)\n(stack e c)\n(unstack b d)\n(stack b d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(unstack d e)",
                "(stack d c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up e)",
                "(stack e c)",
                "(unstack b d)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 470,
            "example_instance_id": 469,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(on c a)\n(on d e)\n(ontable e)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on c a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b d)\n(put-down b)\n(unstack d e)\n(stack d c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(ontable e)\n(clear a)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on c e)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d c)\n(put-down d)\n(unstack c b)\n(put-down c)\n(pick-up c)\n(stack c e)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d a)",
                "(unstack c b)",
                "(stack c e)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up c)",
                "(stack c e)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": true,
            "instance_id": 471,
            "example_instance_id": 470,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d c)\n(ontable e)\n(clear a)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on c e)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d c)\n(stack d a)\n(unstack c b)\n(stack c e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c e)\n(ontable d)\n(on e d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c e)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(stack a b)\n(unstack c e)\n(stack c e)\n(unstack e d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a b)",
                "(unstack c e)",
                "(stack c a)",
                "(unstack e d)",
                "(put-down e)",
                "(unstack c a)",
                "(stack c e)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(stack a b)",
                "(unstack c e)",
                "(stack c e)",
                "(unstack e d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 472,
            "example_instance_id": 471,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c e)\n(ontable d)\n(on e d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c e)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a b)\n(unstack c e)\n(stack c a)\n(unstack e d)\n(put-down e)\n(unstack c a)\n(stack c e)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(on e a)\n(clear b)\n(clear e)\n)\n(:goal\n(and\n(on a e)\n(on b d)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(put-down a)\n(unstack e a)\n(put-down e)\n(pick-up a)\n(stack a e)\n(unstack d c)\n(stack d b)\n(unstack c d)\n(stack c b)\n(pick-up d)\n(stack d c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack e a)",
                "(put-down e)",
                "(unstack a d)",
                "(stack a e)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack e a)",
                "(put-down e)",
                "(pick-up a)",
                "(stack a e)",
                "(unstack d c)",
                "(stack d b)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "correct": false,
            "instance_id": 473,
            "example_instance_id": 472,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(ontable c)\n(on d c)\n(on e a)\n(clear b)\n(clear e)\n)\n(:goal\n(and\n(on a e)\n(on b d)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack e a)\n(put-down e)\n(unstack a d)\n(stack a e)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c e)\n(ontable d)\n(ontable e)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d e)\n(on e c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b a)\n(pick-up d)\n(stack d e)\n(unstack c e)\n(stack c b)\n(stack e c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(unstack c e)",
                "(stack c b)",
                "(pick-up e)",
                "(stack e c)",
                "(pick-up d)",
                "(stack d e)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up d)",
                "(stack d e)",
                "(unstack c e)",
                "(stack c b)",
                "(stack e c)"
            ],
            "correct": false,
            "instance_id": 474,
            "example_instance_id": 473,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(on c e)\n(ontable d)\n(ontable e)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b a)\n(on c b)\n(on d e)\n(on e c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b a)\n(unstack c e)\n(stack c b)\n(pick-up e)\n(stack e c)\n(pick-up d)\n(stack d e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(on e b)\n(clear a)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on b e)\n(on c d)\n(on d a)\n(on e c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b e)\n(pick-up c)\n(stack c d)\n(pick-up d)\n(stack d a)\n(unstack e b)\n(stack e c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d a)",
                "(pick-up c)",
                "(stack c d)",
                "(unstack e b)",
                "(stack e c)",
                "(pick-up b)",
                "(stack b e)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b e)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up d)",
                "(stack d a)",
                "(unstack e b)",
                "(stack e c)"
            ],
            "correct": false,
            "instance_id": 475,
            "example_instance_id": 474,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(on e b)\n(clear a)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on b e)\n(on c d)\n(on d a)\n(on e c))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d a)\n(pick-up c)\n(stack c d)\n(unstack e b)\n(stack e c)\n(pick-up b)\n(stack b e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b e)\n(on c d)\n(on d a)\n(ontable e)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a e)\n(on c a)\n(on d b)\n(on e d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a e)\n(pick-up c)\n(stack c a)\n(unstack d b)\n(stack d e)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b e)",
                "(put-down b)",
                "(unstack c d)",
                "(put-down c)",
                "(unstack d a)",
                "(stack d b)",
                "(pick-up e)",
                "(stack e d)",
                "(pick-up a)",
                "(stack a e)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a e)",
                "(pick-up c)",
                "(stack c a)",
                "(unstack d b)",
                "(stack d e)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 476,
            "example_instance_id": 475,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b e)\n(on c d)\n(on d a)\n(ontable e)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a e)\n(on c a)\n(on d b)\n(on e d))\n)\n)\n\n[PLAN]\n(unstack b e)\n(put-down b)\n(unstack c d)\n(put-down c)\n(unstack d a)\n(stack d b)\n(pick-up e)\n(stack e d)\n(pick-up a)\n(stack a e)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(on e b)\n(clear a)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on b d)\n(on c e)\n(on e a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a d)\n(unstack e b)\n(stack e a)\n(pick-up c)\n(stack c e)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack e b)",
                "(stack e a)",
                "(pick-up c)",
                "(stack c e)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(unstack e b)",
                "(stack e a)",
                "(pick-up c)",
                "(stack c e)"
            ],
            "correct": false,
            "instance_id": 477,
            "example_instance_id": 476,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(on e b)\n(clear a)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on b d)\n(on c e)\n(on e a))\n)\n)\n\n[PLAN]\n(unstack e b)\n(stack e a)\n(pick-up c)\n(stack c e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d e)\n(on e a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b e)\n(on e a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(unstack c d)\n(stack c a)\n(unstack e a)\n(unstack d e)\n(stack d a)\n(stack e d)\n(stack b e)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c d)",
                "(put-down c)",
                "(unstack d e)",
                "(put-down d)",
                "(unstack e a)",
                "(stack e c)",
                "(unstack a b)",
                "(stack a d)",
                "(unstack e c)",
                "(stack e a)",
                "(pick-up b)",
                "(stack b e)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(unstack c d)",
                "(stack c a)",
                "(unstack e a)",
                "(unstack d e)",
                "(stack d a)",
                "(stack e d)",
                "(stack b e)"
            ],
            "correct": false,
            "instance_id": 478,
            "example_instance_id": 477,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c d)\n(on d e)\n(on e a)\n(clear c)\n)\n(:goal\n(and\n(on a d)\n(on b e)\n(on e a))\n)\n)\n\n[PLAN]\n(unstack c d)\n(put-down c)\n(unstack d e)\n(put-down d)\n(unstack e a)\n(stack e c)\n(unstack a b)\n(stack a d)\n(unstack e c)\n(stack e a)\n(pick-up b)\n(stack b e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(ontable c)\n(on d c)\n(ontable e)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on e c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a d)\n(pick-up e)\n(stack e c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack a e)",
                "(stack a d)",
                "(pick-up e)",
                "(stack e c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a d)",
                "(pick-up e)",
                "(stack e c)"
            ],
            "correct": false,
            "instance_id": 479,
            "example_instance_id": 478,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(ontable c)\n(on d c)\n(ontable e)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a d)\n(on e c))\n)\n)\n\n[PLAN]\n(unstack d c)\n(put-down d)\n(unstack a e)\n(stack a d)\n(pick-up e)\n(stack e c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b c)\n(ontable c)\n(ontable d)\n(on e b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on e a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a e)\n(put-down a)\n(unstack b c)\n(stack b d)\n(pick-up e)\n(stack e a)\n",
            "ground_truth_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack e b)",
                "(stack e a)",
                "(unstack b c)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b d)",
                "(pick-up e)",
                "(stack e a)"
            ],
            "correct": false,
            "instance_id": 480,
            "example_instance_id": 479,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b c)\n(ontable c)\n(ontable d)\n(on e b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b d)\n(on e a))\n)\n)\n\n[PLAN]\n(unstack a e)\n(put-down a)\n(unstack e b)\n(stack e a)\n(unstack b c)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(ontable e)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on d a)\n(on e b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack d a)\n(put-down d)\n(unstack a b)\n(stack a c)\n(unstack d)\n(stack e b)\n(unstack b c)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(stack d e)",
                "(unstack a b)",
                "(stack a d)",
                "(unstack b c)",
                "(put-down b)",
                "(unstack a d)",
                "(stack a c)",
                "(unstack d e)",
                "(stack d a)",
                "(pick-up e)",
                "(stack e b)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a b)",
                "(stack a c)",
                "(unstack d)",
                "(stack e b)",
                "(unstack b c)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 481,
            "example_instance_id": 480,
            "relaxed_checks": {
                "del_and_precond_relax": -1,
                "del_relax_only": -1,
                "precond_relax_only": -1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(on d a)\n(ontable e)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on d a)\n(on e b))\n)\n)\n\n[PLAN]\n(unstack d a)\n(stack d e)\n(unstack a b)\n(stack a d)\n(unstack b c)\n(put-down b)\n(unstack a d)\n(stack a c)\n(unstack d e)\n(stack d a)\n(pick-up e)\n(stack e b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(on e c)\n(clear a)\n(clear e)\n)\n(:goal\n(and\n(on b d)\n(on d e))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(put-down a)\n(unstack e c)\n(stack e d)\n(unstack c b)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack e c)",
                "(put-down e)",
                "(pick-up d)",
                "(stack d e)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack e c)",
                "(stack e d)",
                "(unstack c b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 482,
            "example_instance_id": 481,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(ontable b)\n(on c b)\n(ontable d)\n(on e c)\n(clear a)\n(clear e)\n)\n(:goal\n(and\n(on b d)\n(on d e))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack e c)\n(put-down e)\n(pick-up d)\n(stack d e)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear b)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d c)\n(unstack b a)\n(put-down b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d c)",
                "(unstack b a)",
                "(put-down b)"
            ],
            "correct": false,
            "instance_id": 483,
            "example_instance_id": 482,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear b)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on d c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(on c b)\n(on d c)\n(ontable e)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c e)\n(on d a)\n(on e d))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a e)\n(put-down a)\n(unstack d c)\n(put-down d)\n(unstack c b)\n(stack c e)\n(stack b c)\n(pick-up d)\n(stack d a)\n(pick-up e)\n(stack e d)\n",
            "ground_truth_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d a)",
                "(pick-up e)",
                "(stack e d)",
                "(unstack c b)",
                "(stack c e)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack d c)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c e)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up e)",
                "(stack e d)"
            ],
            "correct": false,
            "instance_id": 484,
            "example_instance_id": 483,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(on c b)\n(on d c)\n(ontable e)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on b c)\n(on c e)\n(on d a)\n(on e d))\n)\n)\n\n[PLAN]\n(unstack a e)\n(put-down a)\n(unstack d c)\n(stack d a)\n(pick-up e)\n(stack e d)\n(unstack c b)\n(stack c e)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b e)\n(ontable c)\n(ontable d)\n(on e c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a e)\n(on d c)\n(on e b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a e)\n(pick-up d)\n(stack d c)\n(pick-up e)\n(unstack b e)\n(stack e b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b e)",
                "(put-down b)",
                "(unstack e c)",
                "(stack e b)",
                "(pick-up a)",
                "(stack a e)",
                "(pick-up d)",
                "(stack d c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a e)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up e)",
                "(unstack b e)",
                "(stack e b)"
            ],
            "correct": false,
            "instance_id": 485,
            "example_instance_id": 484,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b e)\n(ontable c)\n(ontable d)\n(on e c)\n(clear a)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on a e)\n(on d c)\n(on e b))\n)\n)\n\n[PLAN]\n(unstack b e)\n(put-down b)\n(unstack e c)\n(stack e b)\n(pick-up a)\n(stack a e)\n(pick-up d)\n(stack d c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(on c b)\n(on d a)\n(ontable e)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b e)\n(on c d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b e)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(stack d c)",
                "(unstack a e)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d a)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b e)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack c b)",
                "(stack c d)",
                "(pick-up b)",
                "(stack b e)"
            ],
            "correct": false,
            "instance_id": 486,
            "example_instance_id": 485,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(on c b)\n(on d a)\n(ontable e)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b e)\n(on c d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d a)\n(stack d c)\n(unstack a e)\n(put-down a)\n(unstack d c)\n(stack d a)\n(unstack c b)\n(stack c d)\n(pick-up b)\n(stack b e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(on b e)\n(ontable c)\n(on d b)\n(ontable e)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b d)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(unstack b e)",
                "(stack b d)"
            ],
            "extracted_llm_plan": [
                "(unstack a d)",
                "(put-down a)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b d)"
            ],
            "correct": false,
            "instance_id": 487,
            "example_instance_id": 486,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a d)\n(on b e)\n(ontable c)\n(on d b)\n(ontable e)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b d)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack a d)\n(put-down a)\n(unstack d b)\n(stack d a)\n(unstack b e)\n(stack b d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c e)\n(on d b)\n(on e d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on c a)\n(on d c)\n(on e d))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack c a)\n(pick-up d)\n(stack d c)\n(pick-up e)\n(stack e d)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c e)",
                "(stack c a)",
                "(unstack e d)",
                "(put-down e)",
                "(unstack d b)",
                "(stack d c)",
                "(pick-up e)",
                "(stack e d)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up e)",
                "(stack e d)"
            ],
            "correct": false,
            "instance_id": 488,
            "example_instance_id": 487,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c e)\n(on d b)\n(on e d)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on c a)\n(on d c)\n(on e d))\n)\n)\n\n[PLAN]\n(unstack c e)\n(stack c a)\n(unstack e d)\n(put-down e)\n(unstack d b)\n(stack d c)\n(pick-up e)\n(stack e d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b d)\n(ontable c)\n(ontable d)\n(on e c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b e)\n(on c a)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack b d)\n(stack b e)\n(unstack a e)\n(stack a b)\n(unstack e c)\n(stack e a)\n(pick-up c)\n(stack c a)\n",
            "ground_truth_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack e c)",
                "(put-down e)",
                "(unstack b d)",
                "(stack b e)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(unstack b d)",
                "(stack b e)",
                "(unstack a e)",
                "(stack a b)",
                "(unstack e c)",
                "(stack e a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 489,
            "example_instance_id": 488,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b d)\n(ontable c)\n(ontable d)\n(on e c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b e)\n(on c a)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack a e)\n(put-down a)\n(unstack e c)\n(put-down e)\n(unstack b d)\n(stack b e)\n(pick-up c)\n(stack c a)\n(pick-up d)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(on e c)\n(clear a)\n(clear b)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n",
            "ground_truth_plan": [
                "(unstack e c)",
                "(put-down e)",
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(pick-up a)",
                "(stack a d)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 490,
            "example_instance_id": 489,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(ontable d)\n(on e c)\n(clear a)\n(clear b)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a d)\n(on b a)\n(on d c))\n)\n)\n\n[PLAN]\n(unstack e c)\n(put-down e)\n(pick-up d)\n(stack d c)\n(pick-up a)\n(stack a d)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(ontable c)\n(on d c)\n(on e d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d e)\n(on e c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a e)\n(put-down a)\n(unstack d c)\n(stack d e)\n(pick-up c)\n(stack c a)\n(pick-up a)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack a e)",
                "(stack a b)",
                "(unstack e d)",
                "(put-down e)",
                "(unstack d c)",
                "(put-down d)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up e)",
                "(stack e c)",
                "(pick-up d)",
                "(stack d e)"
            ],
            "extracted_llm_plan": [
                "(unstack a e)",
                "(put-down a)",
                "(unstack d c)",
                "(stack d e)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 491,
            "example_instance_id": 490,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(ontable b)\n(ontable c)\n(on d c)\n(on e d)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a)\n(on d e)\n(on e c))\n)\n)\n\n[PLAN]\n(unstack a e)\n(stack a b)\n(unstack e d)\n(put-down e)\n(unstack d c)\n(put-down d)\n(pick-up c)\n(stack c a)\n(pick-up e)\n(stack e c)\n(pick-up d)\n(stack d e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d a)\n(ontable e)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d e)\n(on e b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up e)\n(stack e b)\n(pick-up a)\n(stack a c)\n(unstack c b)\n(stack c a)\n(pick-up d)\n(stack d e)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack d a)",
                "(put-down d)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up e)",
                "(stack e b)",
                "(pick-up d)",
                "(stack d e)"
            ],
            "extracted_llm_plan": [
                "(pick-up e)",
                "(stack e b)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up d)",
                "(stack d e)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 492,
            "example_instance_id": 491,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(on d a)\n(ontable e)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on a c)\n(on b a)\n(on d e)\n(on e b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack d a)\n(put-down d)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n(pick-up e)\n(stack e b)\n(pick-up d)\n(stack d e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(on e c)\n(clear a)\n(clear b)\n(clear e)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d e))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack b d)\n(put-down b)\n(pick-up a)\n(stack b a)\n(unstack e c)\n(pick-up c)\n(stack c d)\n(pick-up e)\n(stack d e)\n",
            "ground_truth_plan": [
                "(unstack b d)",
                "(stack b a)",
                "(unstack e c)",
                "(put-down e)",
                "(pick-up d)",
                "(stack d e)",
                "(pick-up c)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack b d)",
                "(put-down b)",
                "(pick-up a)",
                "(stack b a)",
                "(unstack e c)",
                "(pick-up c)",
                "(stack c d)",
                "(pick-up e)",
                "(stack d e)"
            ],
            "correct": false,
            "instance_id": 493,
            "example_instance_id": 492,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(ontable d)\n(on e c)\n(clear a)\n(clear b)\n(clear e)\n)\n(:goal\n(and\n(on b a)\n(on c d)\n(on d e))\n)\n)\n\n[PLAN]\n(unstack b d)\n(stack b a)\n(unstack e c)\n(put-down e)\n(pick-up d)\n(stack d e)\n(pick-up c)\n(stack c d)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(ontable e)\n(clear a)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on d c)\n(on e a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up d)\n(stack d c)\n(pick-up e)\n(stack e a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(pick-up e)",
                "(stack e a)"
            ],
            "extracted_llm_plan": [
                "(pick-up d)",
                "(stack d c)",
                "(pick-up e)",
                "(stack e a)"
            ],
            "correct": true,
            "instance_id": 494,
            "example_instance_id": 493,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(ontable d)\n(ontable e)\n(clear a)\n(clear c)\n(clear d)\n(clear e)\n)\n(:goal\n(and\n(on d c)\n(on e a))\n)\n)\n\n[PLAN]\n(pick-up d)\n(stack d c)\n(pick-up e)\n(stack e a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d e)\n(on e c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": true,
            "instance_id": 495,
            "example_instance_id": 494,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(on b d)\n(ontable c)\n(on d e)\n(on e c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b d))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(on e d)\n(clear a)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on b c)\n(on c e)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b c)\n(pick-up d)\n(stack d b)\n(pick-up e)\n(stack e c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack e d)",
                "(put-down e)",
                "(pick-up c)",
                "(stack c e)",
                "(unstack d b)",
                "(stack d a)",
                "(pick-up b)",
                "(stack b c)",
                "(unstack d a)",
                "(stack d b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up d)",
                "(stack d b)",
                "(pick-up e)",
                "(stack e c)"
            ],
            "correct": false,
            "instance_id": 496,
            "example_instance_id": 495,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(on d b)\n(on e d)\n(clear a)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on b c)\n(on c e)\n(on d b))\n)\n)\n\n[PLAN]\n(unstack e d)\n(put-down e)\n(pick-up c)\n(stack c e)\n(unstack d b)\n(stack d a)\n(pick-up b)\n(stack b c)\n(unstack d a)\n(stack d b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b a)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b e)\n(on d a)\n(on e d))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(unstack a e)\n(stack a d)\n(pick-up e)\n(stack e a)\n(pick-up b)\n(stack b e)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(stack b c)",
                "(unstack a e)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d a)",
                "(pick-up e)",
                "(stack e d)",
                "(unstack b c)",
                "(stack b e)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a e)",
                "(stack a d)",
                "(pick-up e)",
                "(stack e a)",
                "(pick-up b)",
                "(stack b e)"
            ],
            "correct": false,
            "instance_id": 497,
            "example_instance_id": 496,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b a)\n(ontable c)\n(ontable d)\n(ontable e)\n(clear b)\n(clear c)\n(clear d)\n)\n(:goal\n(and\n(on b e)\n(on d a)\n(on e d))\n)\n)\n\n[PLAN]\n(unstack b a)\n(stack b c)\n(unstack a e)\n(put-down a)\n(pick-up d)\n(stack d a)\n(pick-up e)\n(stack e d)\n(unstack b c)\n(stack b e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(on e b)\n(clear a)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on a e)\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a e)\n(unstack c d)\n(stack c b)\n(pick-up d)\n(stack d a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack e b)",
                "(put-down e)",
                "(pick-up a)",
                "(stack a e)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a e)",
                "(unstack c d)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 498,
            "example_instance_id": 497,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c d)\n(ontable d)\n(on e b)\n(clear a)\n(clear c)\n(clear e)\n)\n(:goal\n(and\n(on a e)\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack e b)\n(put-down e)\n(pick-up a)\n(stack a e)\n(unstack c d)\n(stack c b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b c)\n(ontable c)\n(on d a)\n(on e b)\n(clear d)\n)\n(:goal\n(and\n(on d e))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack d a)\n(put-down d)\n(unstack a e)\n(stack a d)\n(pick-up e)\n(stack e a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a e)",
                "(put-down a)",
                "(pick-up d)",
                "(stack d e)"
            ],
            "extracted_llm_plan": [
                "(unstack d a)",
                "(put-down d)",
                "(unstack a e)",
                "(stack a d)",
                "(pick-up e)",
                "(stack e a)"
            ],
            "correct": false,
            "instance_id": 499,
            "example_instance_id": 498,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-5)\n(:domain blocksworld-4ops)\n(:objects a b c d e )\n(:init\n(handempty)\n(on a e)\n(on b c)\n(ontable c)\n(on d a)\n(on e b)\n(clear d)\n)\n(:goal\n(and\n(on d e))\n)\n)\n\n[PLAN]\n(unstack d a)\n(put-down d)\n(unstack a e)\n(put-down a)\n(pick-up d)\n(stack d e)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up c)\n(stack c b)\n(pick-up d)\n(stack d a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d b)",
                "(stack d a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)",
                "(pick-up d)",
                "(stack d a)"
            ],
            "correct": false,
            "instance_id": 500,
            "example_instance_id": 499,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(on d b)\n(clear a)\n(clear d)\n)\n(:goal\n(and\n(on c b)\n(on d a))\n)\n)\n\n[PLAN]\n(unstack d b)\n(stack d a)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-4)\n(:domain blocksworld-4ops)\n(:objects a b c d )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(on d c)\n(clear b)\n(clear d)\n)\n(:goal\n(and\n(on c d)\n(on d b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack d c)\n(put-down d)\n(unstack c a)\n(stack c d)\n(pick-up b)\n(stack d b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack d c)",
                "(stack d b)",
                "(unstack c a)",
                "(stack c d)"
            ],
            "extracted_llm_plan": [
                "(unstack d c)",
                "(put-down d)",
                "(unstack c a)",
                "(stack c d)",
                "(pick-up b)",
                "(stack d b)"
            ],
            "correct": false,
            "instance_id": 501,
            "example_instance_id": 500,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        }
    ]
}