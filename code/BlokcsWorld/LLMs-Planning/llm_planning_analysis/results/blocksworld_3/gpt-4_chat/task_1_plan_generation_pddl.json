{
    "task": "t1",
    "engine": "gpt-4_chat",
    "prompt_type": "oneshot",
    "domain": "blocksworld_3",
    "instances": [
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": true,
            "instance_id": 2,
            "example_instance_id": 1,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b a)\n(unstack c a)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(unstack c a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 3,
            "example_instance_id": 2,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(clear a)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n[QUERY PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 4,
            "example_instance_id": 3,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(clear a)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 5,
            "example_instance_id": 4,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(pick-up b)\n(stack b c)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(pick-up b)",
                "(stack b c)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 6,
            "example_instance_id": 5,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(put-down c)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 7,
            "example_instance_id": 6,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 8,
            "example_instance_id": 7,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(put-down c)\n(pick-up a)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down c)",
                "(pick-up a)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 9,
            "example_instance_id": 8,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 10,
            "example_instance_id": 9,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "Based on the given query problem, here's the correct plan for it:\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 11,
            "example_instance_id": 10,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 12,
            "example_instance_id": 11,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": true,
            "instance_id": 13,
            "example_instance_id": 12,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 14,
            "example_instance_id": 13,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 15,
            "example_instance_id": 14,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 16,
            "example_instance_id": 15,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 17,
            "example_instance_id": 16,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(unstack b a)\n(stack a c)\n(stack b a)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(unstack b a)",
                "(stack a c)",
                "(stack b a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 18,
            "example_instance_id": 17,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 19,
            "example_instance_id": 18,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": true,
            "instance_id": 20,
            "example_instance_id": 19,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 21,
            "example_instance_id": 20,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 22,
            "example_instance_id": 21,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": true,
            "instance_id": 23,
            "example_instance_id": 22,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a b)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 24,
            "example_instance_id": 23,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n(pick-up c)\n(unstack c b)\n(pick-up b)\n(stack b a)\n(stack c b)\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(unstack c b)",
                "(pick-up b)",
                "(stack b a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 25,
            "example_instance_id": 24,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n( unstack b a )\n( put-down b )\n( unstack a c )\n( stack a b )\n( pick-up c )\n( stack c b )\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "( unstack b a )",
                "( put-down b )",
                "( unstack a c )",
                "( stack a b )",
                "( pick-up c )",
                "( stack c b )"
            ],
            "correct": false,
            "instance_id": 26,
            "example_instance_id": 25,
            "relaxed_checks": {
                "del_and_precond_relax": -1,
                "del_relax_only": -1,
                "precond_relax_only": -1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(unstack b c)\n(stack b a)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack b c)",
                "(stack b a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 27,
            "example_instance_id": 26,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n; Original and goal states:\n; a on b, b on table, c on a\n; a on b, b on c\n(unstack a b)\n(put-down a)\n(unstack c a)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c a)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 28,
            "example_instance_id": 27,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 29,
            "example_instance_id": 28,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 30,
            "example_instance_id": 29,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 31,
            "example_instance_id": 30,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a c)\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(unstack b c)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 32,
            "example_instance_id": 31,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 33,
            "example_instance_id": 32,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 34,
            "example_instance_id": 33,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": true,
            "instance_id": 35,
            "example_instance_id": 34,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 36,
            "example_instance_id": 35,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": true,
            "instance_id": 37,
            "example_instance_id": 36,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 38,
            "example_instance_id": 37,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up a)\n(stack a b)\n(unstack b c)\n(stack c a)\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack b c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 39,
            "example_instance_id": 38,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a c)\n(pick-up b)\n(stack a b)\n(pick-up c)\n(put-down c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(pick-up b)",
                "(stack a b)",
                "(pick-up c)",
                "(put-down c)"
            ],
            "correct": false,
            "instance_id": 40,
            "example_instance_id": 39,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 41,
            "example_instance_id": 40,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": true,
            "instance_id": 42,
            "example_instance_id": 41,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(clear a)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 43,
            "example_instance_id": 42,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(clear a)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 44,
            "example_instance_id": 43,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 45,
            "example_instance_id": 44,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 46,
            "example_instance_id": 45,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(pick-up b)\n(stack a b)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(pick-up b)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 47,
            "example_instance_id": 46,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a b)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 48,
            "example_instance_id": 47,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 49,
            "example_instance_id": 48,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 50,
            "example_instance_id": 49,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 51,
            "example_instance_id": 50,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 52,
            "example_instance_id": 51,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": true,
            "instance_id": 53,
            "example_instance_id": 52,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a b)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a b)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 54,
            "example_instance_id": 53,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a c)\n(unstack a c)\n(put-down a)\n(unstack b c)\n(stack b a)\n(unstack a b)\n(stack a c)\n(pick-up c)\n(stack c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a c)",
                "(unstack a c)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 55,
            "example_instance_id": 54,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a b)"
            ],
            "correct": true,
            "instance_id": 56,
            "example_instance_id": 55,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(stack b c)\n(unstack a c)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(stack b c)",
                "(unstack a c)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 57,
            "example_instance_id": 56,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 58,
            "example_instance_id": 57,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 59,
            "example_instance_id": 58,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 60,
            "example_instance_id": 59,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(stack a b)\n(unstack b c)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack b c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 61,
            "example_instance_id": 60,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up c)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 62,
            "example_instance_id": 61,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(put-down a)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 63,
            "example_instance_id": 62,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack c b)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 64,
            "example_instance_id": 63,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "The plan for the query problem is as follows:\n\n1. (unstack a c)\n2. (Put-down a)\n3. (Pick-up b)\n4. (Stack b a)\n5. (Pick-up c)\n6. (Stack c b)\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": true,
            "instance_id": 65,
            "example_instance_id": 64,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(stack b a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack b c)",
                "(stack b a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 66,
            "example_instance_id": 65,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(on b c)\n(ontable c)\n(clear a)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(unstack b c)\n(put-down b)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 67,
            "example_instance_id": 66,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 68,
            "example_instance_id": 67,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 69,
            "example_instance_id": 68,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": true,
            "instance_id": 70,
            "example_instance_id": 69,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 71,
            "example_instance_id": 70,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b c)\n(stack a c)\n(pick-up b)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(stack a c)",
                "(pick-up b)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 72,
            "example_instance_id": 71,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": true,
            "instance_id": 73,
            "example_instance_id": 72,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 74,
            "example_instance_id": 73,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up a)\n(unstack b a)\n(stack b a)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(unstack b a)",
                "(stack b a)",
                "(stack c b)"
            ],
            "correct": false,
            "instance_id": 75,
            "example_instance_id": 74,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "(unstack b a)\n(stack b c)\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(unstack a c)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 76,
            "example_instance_id": 75,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(on b a)\n(ontable c)\n(clear b)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(unstack a c)\n(put-down a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": true,
            "instance_id": 77,
            "example_instance_id": 76,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n(stack b a)\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 78,
            "example_instance_id": 77,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 79,
            "example_instance_id": 78,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": true,
            "instance_id": 80,
            "example_instance_id": 79,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 81,
            "example_instance_id": 80,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 82,
            "example_instance_id": 81,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up a)\n(put-down a)\n(pick-up b)\n(stack b a)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 83,
            "example_instance_id": 82,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on a c)\n(on b a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(pick-up c)\n(stack c b)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(pick-up c)",
                "(stack c b)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 84,
            "example_instance_id": 83,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a b)\n(put-down a)\n(unstack c a)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 85,
            "example_instance_id": 84,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on a c))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": true,
            "instance_id": 86,
            "example_instance_id": 85,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c b))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)",
                "(pick-up c)",
                "(stack c b)"
            ],
            "correct": true,
            "instance_id": 87,
            "example_instance_id": 86,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a)\n(on c b))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b a)\n(pick-up c)\n(stack c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a b)\n(unstack c b)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(pick-up a)",
                "(stack a b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a b)",
                "(unstack c b)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 88,
            "example_instance_id": 87,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c b)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on a b)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(pick-up a)\n(stack a b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": true,
            "instance_id": 89,
            "example_instance_id": 88,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": true,
            "instance_id": 90,
            "example_instance_id": 89,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "(pick-up b)\n(unstack b c)\n(pick-up c)\n(stack c a)\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up b)",
                "(unstack b c)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 91,
            "example_instance_id": 90,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(put-down b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up a)\n(stack a c)\n(pick-up b)\n(stack b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(pick-up a)",
                "(stack a c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 92,
            "example_instance_id": 91,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(ontable c)\n(clear a)\n(clear b)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n[PLAN]\n(unstack b c)\n(stack b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(pick-up c)\n(stack c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)"
            ],
            "correct": true,
            "instance_id": 93,
            "example_instance_id": 92,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(ontable c)\n(clear a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(pick-up c)\n(stack c a)\n(put-down a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(pick-up c)",
                "(stack c a)",
                "(put-down a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 94,
            "example_instance_id": 93,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(ontable c)\n(clear a)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack a c)\n(pick-up b)\n(stack b c)\n(stack a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack a c)",
                "(put-down a)",
                "(unstack c b)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b c)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack a c)",
                "(pick-up b)",
                "(stack b c)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 95,
            "example_instance_id": 94,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a c)\n(ontable b)\n(on c b)\n(clear a)\n)\n(:goal\n(and\n(on a b)\n(on b c))\n)\n)\n\n[PLAN]\n(unstack a c)\n(put-down a)\n(unstack c b)\n(put-down c)\n(pick-up b)\n(stack b c)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b a)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 96,
            "example_instance_id": 95,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(ontable c)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c))\n)\n)\n\n[PLAN]\n(unstack b a)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(stack c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up c)",
                "(stack c a)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(stack c a)"
            ],
            "correct": false,
            "instance_id": 97,
            "example_instance_id": 96,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(clear c)\n)\n(:goal\n(and\n(on c a))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up c)\n(stack c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(pick-up a)\n(stack a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(put-down b)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "extracted_llm_plan": [
                "(unstack c b)",
                "(put-down c)",
                "(unstack b a)",
                "(pick-up a)",
                "(stack a b)"
            ],
            "correct": false,
            "instance_id": 98,
            "example_instance_id": 97,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b a)\n(on c b)\n(clear c)\n)\n(:goal\n(and\n(on a b))\n)\n)\n\n[PLAN]\n(unstack c b)\n(put-down c)\n(unstack b a)\n(put-down b)\n(pick-up a)\n(stack a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(unstack a b)\n(put-down a)\n(unstack c a)\n(stack c b)\n(pick-up a)\n(stack a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack c a)",
                "(put-down c)",
                "(unstack a b)",
                "(put-down a)",
                "(pick-up c)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "extracted_llm_plan": [
                "(unstack a b)",
                "(put-down a)",
                "(unstack c a)",
                "(stack c b)",
                "(pick-up a)",
                "(stack a c)"
            ],
            "correct": false,
            "instance_id": 99,
            "example_instance_id": 98,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(on a b)\n(ontable b)\n(on c a)\n(clear c)\n)\n(:goal\n(and\n(on a c)\n(on c b))\n)\n)\n\n[PLAN]\n(unstack c a)\n(put-down c)\n(unstack a b)\n(put-down a)\n(pick-up c)\n(stack c b)\n(pick-up a)\n(stack a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(pick-up c)\n(stack c a)\n(pick-up b)\n(stack b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(pick-up b)",
                "(stack b c)"
            ],
            "extracted_llm_plan": [
                "(pick-up c)",
                "(stack c a)",
                "(pick-up b)",
                "(stack b c)"
            ],
            "correct": false,
            "instance_id": 100,
            "example_instance_id": 99,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain blocksworld-4ops)\n  (:requirements :strips)\n(:predicates (clear ?x)\n             (ontable ?x)\n             (handempty)\n             (holding ?x)\n             (on ?x ?y))\n\n(:action pick-up\n  :parameters (?ob)\n  :precondition (and (clear ?ob) (ontable ?ob) (handempty))\n  :effect (and (holding ?ob) (not (clear ?ob)) (not (ontable ?ob))\n               (not (handempty))))\n\n(:action put-down\n  :parameters  (?ob)\n  :precondition (holding ?ob)\n  :effect (and (clear ?ob) (handempty) (ontable ?ob)\n               (not (holding ?ob))))\n\n(:action stack\n  :parameters  (?ob ?underob)\n  :precondition (and (clear ?underob) (holding ?ob))\n  :effect (and (handempty) (clear ?ob) (on ?ob ?underob)\n               (not (clear ?underob)) (not (holding ?ob))))\n\n(:action unstack\n  :parameters  (?ob ?underob)\n  :precondition (and (on ?ob ?underob) (clear ?ob) (handempty))\n  :effect (and (holding ?ob) (clear ?underob)\n               (not (on ?ob ?underob)) (not (clear ?ob)) (not (handempty)))))\n\n[PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(ontable b)\n(on c a)\n(clear b)\n(clear c)\n)\n(:goal\n(and\n(on b c)\n(on c a))\n)\n)\n\n[PLAN]\n(pick-up b)\n(stack b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem BW-rand-3)\n(:domain blocksworld-4ops)\n(:objects a b c )\n(:init\n(handempty)\n(ontable a)\n(on b c)\n(on c a)\n(clear b)\n)\n(:goal\n(and\n(on b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(unstack b c)\n(put-down c)\n(pick-up b)\n(stack b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(unstack b c)",
                "(put-down b)",
                "(unstack c a)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "extracted_llm_plan": [
                "(unstack b c)",
                "(put-down c)",
                "(pick-up b)",
                "(stack b a)"
            ],
            "correct": false,
            "instance_id": 101,
            "example_instance_id": 100,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        }
    ]
}