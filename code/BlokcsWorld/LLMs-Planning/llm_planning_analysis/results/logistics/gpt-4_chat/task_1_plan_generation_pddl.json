{
    "task": "t1",
    "engine": "gpt-4_chat",
    "prompt_type": "oneshot",
    "domain": "logistics",
    "instances": [
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s1-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l1-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at a0 l0-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a1 l0-0 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s1-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l1-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Based on the provided domain, problem, and example plan, here is the PDDL syntax for the plan corresponding to the query problem:\n\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 2,
            "example_instance_id": 1,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s1-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l1-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s1-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l1-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l0-0 c1)\n(unload-truck p0 t1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l1-0 c0)\n(unload-truck p1 t0 l1-0)\n",
            "ground_truth_plan": [
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l0-0 c1)",
                "(unload-truck p0 t1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-0 c0)",
                "(unload-truck p1 t0 l1-0)"
            ],
            "correct": false,
            "instance_id": 3,
            "example_instance_id": 2,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s1-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l1-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-0)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s1-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l1-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the query problem:\n\n[PLAN]\n(load-airplane p0 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)"
            ],
            "correct": true,
            "instance_id": 4,
            "example_instance_id": 3,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s1-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l1-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s1-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l1-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at a0 l0-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n",
            "ground_truth_plan": [
                "(fly-airplane a1 l0-0 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "correct": false,
            "instance_id": 5,
            "example_instance_id": 4,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s1-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l1-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at a0 l0-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a1 l0-0 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l1-1 c1)\n(unload-truck p0 t0 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-1 c1)",
                "(unload-truck p0 t0 l1-1)"
            ],
            "correct": false,
            "instance_id": 6,
            "example_instance_id": 5,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 7,
            "example_instance_id": 6,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "correct": true,
            "instance_id": 8,
            "example_instance_id": 7,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-1)\n    (at p1 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "correct": true,
            "instance_id": 9,
            "example_instance_id": 8,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-1)\n    (at p1 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "correct": true,
            "instance_id": 10,
            "example_instance_id": 9,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(load-airplane p1 a0 l1-1)\n(fly-airplane a0 l1-1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(load-airplane p1 a0 l1-1)",
                "(fly-airplane a0 l1-1 l1-0)"
            ],
            "correct": false,
            "instance_id": 11,
            "example_instance_id": 10,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the query problem:\n\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(load-airplane p0 a0 l0-1)\n(load-airplane p2 a0 l0-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(load-airplane p0 a0 l0-1)",
                "(load-airplane p2 a0 l0-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 12,
            "example_instance_id": 11,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p0 a0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-0)\n    (at p2 l0-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a0 l0-0)\n(load-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 13,
            "example_instance_id": 12,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-0)\n    (at p2 l0-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p2 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-0)\n    (at p2 l0-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p2 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "correct": true,
            "instance_id": 14,
            "example_instance_id": 13,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-0)\n    (at p2 l0-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p2 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t0 l0-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-truck p2 t0 l0-0)",
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t0 l0-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 15,
            "example_instance_id": 14,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-truck p2 t0 l0-0)\n(load-airplane p1 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l0-0)\n    (at p3 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l1-0)\n        (at p3 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p3 a0 l0-1)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p3 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p3 a0 l0-1)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 16,
            "example_instance_id": 15,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l0-0)\n    (at p3 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l1-0)\n        (at p3 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p2 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p3 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-1)\n        (at p3 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(unload-truck p2 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n(load-airplane p1 a0 l1-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(load-airplane p3 a0 l0-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(unload-truck p2 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-airplane p1 a0 l1-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 17,
            "example_instance_id": 16,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-1)\n        (at p3 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(load-airplane p3 a0 l0-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-truck p1 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n(load-airplane p2 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at a0 l0-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-1)\n        (at p3 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(load-airplane p3 a1 l0-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-truck p1 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n(load-airplane p2 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(load-airplane p3 a1 l0-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p1 t1 l1-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-airplane p2 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(load-airplane p3 a1 l0-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 18,
            "example_instance_id": 17,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at a0 l0-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-1)\n        (at p3 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(load-airplane p3 a1 l0-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p1 t1 l1-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-truck p3 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n(load-airplane p2 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s2-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at p2 l1-0)\n    (at p3 l1-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l0-1)\n        (at p3 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan in PDDL syntax for the given query problem:\n\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p3 a1 l1-1)\n(load-airplane p2 a0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p1 t1 l1-0)\n(fly-airplane a0 l1-0 l0-1)\n(unload-airplane p2 a0 l0-1)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(unload-truck p1 t1 l0-0)\n(drive-truck t1 l0-0 l1-1 c1)\n(load-truck p3 t1 l0-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-truck p0 t0 l0-1)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p3 a1 l1-1)",
                "(load-airplane p2 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p1 t1 l1-0)",
                "(fly-airplane a0 l1-0 l0-1)",
                "(unload-airplane p2 a0 l0-1)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(unload-truck p1 t1 l0-0)",
                "(drive-truck t1 l0-0 l1-1 c1)",
                "(load-truck p3 t1 l0-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)"
            ],
            "correct": false,
            "instance_id": 19,
            "example_instance_id": 18,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s2-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l1-0 l1-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at p2 l1-0)\n    (at p3 l1-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l0-1)\n        (at p3 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-truck p0 t0 l0-1)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at p0 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p0 t1 l1-0)\n(unload-truck p0 t1 l1-2)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p0 t1 l1-0)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "correct": false,
            "instance_id": 20,
            "example_instance_id": 19,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at p0 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at p0 l1-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 21,
            "example_instance_id": 20,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at p0 l1-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "correct": false,
            "instance_id": 22,
            "example_instance_id": 21,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l1-2)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)"
            ],
            "correct": false,
            "instance_id": 23,
            "example_instance_id": 22,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l1-2)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-1 l0-0 c0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p1 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at p0 l0-1)\n    (at p1 l1-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)"
            ],
            "correct": false,
            "instance_id": 24,
            "example_instance_id": 23,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at p0 l0-1)\n    (at p1 l1-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at p0 l1-2)\n    (at p1 l0-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)"
            ],
            "correct": false,
            "instance_id": 25,
            "example_instance_id": 24,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at p0 l1-2)\n    (at p1 l0-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(fly-airplane a1 l1-0 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at p0 l1-2)\n    (at p1 l0-1)\n    (at p2 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-0)\n        (at p2 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)"
            ],
            "correct": false,
            "instance_id": 26,
            "example_instance_id": 25,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at p0 l1-2)\n    (at p1 l0-1)\n    (at p2 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-0)\n        (at p2 l1-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l0-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-2)\n(load-truck p2 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p2 t0 l0-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-2)",
                "(load-truck p2 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 27,
            "example_instance_id": 26,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l0-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l1-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p2 t0 l0-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p2 t1 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l0-2)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p2 t0 l0-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a1 l0-0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-airplane p2 a1 l1-0)\n(unload-truck p0 t1 l1-1)\n(load-truck p2 t1 l1-0)\n(load-truck p0 a0 l1-1)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p2 t0 l0-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p2 t0 l0-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-truck p0 t1 l1-1)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p0 a0 l1-1)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)"
            ],
            "correct": false,
            "instance_id": 28,
            "example_instance_id": 27,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l0-2)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l1-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p2 t0 l0-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p2 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p1 a1 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-2)\n    (at p1 l0-0)\n    (at p2 l0-2)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-1)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p2 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p2 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p2 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 29,
            "example_instance_id": 28,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-2)\n    (at p1 l0-0)\n    (at p2 l0-2)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-1)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p2 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-2)\n    (at p1 l0-0)\n    (at p2 l0-2)\n    (at p3 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l0-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p2 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p3 t0 l0-2)\n",
            "ground_truth_plan": [
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p2 t0 l0-2)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p2 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p3 t0 l0-2)"
            ],
            "correct": false,
            "instance_id": 30,
            "example_instance_id": 29,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at p0 l1-2)\n    (at p1 l0-0)\n    (at p2 l0-2)\n    (at p3 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l0-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t1 l1-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p2 t0 l0-2)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(unload-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-1)\n        (at p2 l1-2)\n        (at p3 l0-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p1 t1 l1-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(unload-truck p0 t1 l1-2)\n",
            "ground_truth_plan": [
                "(load-truck p3 t0 l0-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p1 t1 l1-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "correct": false,
            "instance_id": 31,
            "example_instance_id": 30,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-1)\n        (at p2 l1-2)\n        (at p3 l0-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t0 l0-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(load-airplane p2 a0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(unload-truck p0 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-1)\n        (at p2 l1-2)\n        (at p3 l0-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t0 l0-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(load-airplane p2 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p0 a1 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(unload-truck p0 t1 l1-2)\n",
            "ground_truth_plan": [
                "(load-truck p3 t0 l0-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t0 l0-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "correct": true,
            "instance_id": 32,
            "example_instance_id": 31,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-1)\n        (at p2 l1-2)\n        (at p3 l0-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t0 l0-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(load-airplane p2 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p0 a1 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(unload-truck p0 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-2)\n        (at p2 l1-1)\n        (at p3 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a1 l0-0)\n(load-truck p2 t0 l0-1)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(unload-truck p0 t0 l1-1)\n(drive-truck t0 l1-1 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)",
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a1 l0-0)",
                "(load-truck p2 t0 l0-1)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(unload-truck p0 t0 l1-1)",
                "(drive-truck t0 l1-1 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)"
            ],
            "correct": false,
            "instance_id": 33,
            "example_instance_id": 32,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-2)\n        (at p2 l1-1)\n        (at p3 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n(load-airplane p3 a1 l0-0)\n(load-airplane p2 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(unload-airplane p2 a1 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at p4 l1-2)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-0)\n        (at p3 l1-1)\n        (at p4 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l0-0 c0)\n(load-truck p0 t1 l0-0)\n(drive-truck t1 l0-0 l0-2 c0)\n(unload-truck p0 t1 l0-2)\n",
            "ground_truth_plan": [
                "(load-truck p2 t0 l0-1)",
                "(load-airplane p3 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l0-0 c0)",
                "(load-truck p0 t1 l0-0)",
                "(drive-truck t1 l0-0 l0-2 c0)",
                "(unload-truck p0 t1 l0-2)"
            ],
            "correct": false,
            "instance_id": 34,
            "example_instance_id": 33,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at p4 l1-2)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-0)\n        (at p3 l1-1)\n        (at p4 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t0 l0-1)\n(load-airplane p3 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p3 t1 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p1 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-airplane p4 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l1-2)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l0-0)\n        (at p3 l0-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(unload-truck p3 t0 l0-1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p1 t1 l1-0)\n(unload-truck p4 t1 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(load-airplane p2 a0 l1-1)\n(load-airplane p1 a0 l1-1)\n(fly-airplane a0 l1-1 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-airplane p4 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(unload-truck p3 t0 l0-1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p1 t1 l1-0)",
                "(unload-truck p4 t1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(load-airplane p2 a0 l1-1)",
                "(load-airplane p1 a0 l1-1)",
                "(fly-airplane a0 l1-1 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-airplane p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)"
            ],
            "correct": false,
            "instance_id": 35,
            "example_instance_id": 34,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l1-2)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l0-0)\n        (at p3 l0-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l1-2)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l0-0)\n        (at p3 l0-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan in PDDL syntax for the given [QUERY PROBLEM]:\n\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-airplane p2 a1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "correct": true,
            "instance_id": 36,
            "example_instance_id": 35,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l1-2)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l0-0)\n        (at p3 l0-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-airplane p2 a1 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-2)\n    (at p2 l0-2)\n    (at p3 l0-2)\n    (at p4 l1-2)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l0-0)\n        (at p2 l1-0)\n        (at p3 l1-0)\n        (at p4 l0-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-2)\n(load-truck p2 t0 l0-2)\n(load-truck p3 t0 l0-2)\n(drive-truck t0 l0-2 l1-0 c1)\n(unload-truck p1 t0 l1-0)\n(unload-truck p2 t0 l1-0)\n(unload-truck p3 t0 l1-0)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(fly-airplane a1 l0-0 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p3 t0 l0-2)",
                "(load-truck p2 t0 l0-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(unload-truck p3 t0 l0-0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-2)",
                "(load-truck p2 t0 l0-2)",
                "(load-truck p3 t0 l0-2)",
                "(drive-truck t0 l0-2 l1-0 c1)",
                "(unload-truck p1 t0 l1-0)",
                "(unload-truck p2 t0 l1-0)",
                "(unload-truck p3 t0 l1-0)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(fly-airplane a1 l0-0 l1-0)"
            ],
            "correct": false,
            "instance_id": 37,
            "example_instance_id": 36,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-2)\n    (at p2 l0-2)\n    (at p3 l0-2)\n    (at p4 l1-2)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l0-0)\n        (at p2 l1-0)\n        (at p3 l1-0)\n        (at p4 l0-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t0 l0-2)\n(load-truck p2 t0 l0-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-airplane p4 a0 l1-0)\n(unload-truck p3 t0 l0-0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p3 a1 l0-0)\n(load-airplane p2 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(unload-airplane p2 a1 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-2)\n    (at p2 l0-2)\n    (at p3 l0-2)\n    (at p4 l1-2)\n    (at p5 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n        (at p3 l0-2)\n        (at p4 l1-2)\n        (at p5 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t0 l0-2)\n(load-truck p2 t0 l0-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p0 a0 l1-1)\n(load-airplane p5 a0 l1-1)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(unload-truck p1 t0 l0-2)\n(load-airplane p1 a0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p5 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p5 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p2 t0 l0-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t0 l0-2)",
                "(load-truck p2 t0 l0-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p0 a0 l1-1)",
                "(load-airplane p5 a0 l1-1)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(unload-truck p1 t0 l0-2)",
                "(load-airplane p1 a0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p5 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p5 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 38,
            "example_instance_id": 37,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-2)\n    (at p2 l0-2)\n    (at p3 l0-2)\n    (at p4 l1-2)\n    (at p5 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n        (at p3 l0-2)\n        (at p4 l1-2)\n        (at p5 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t0 l0-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l1-2)\n    (at p3 l1-1)\n    (at p4 l0-1)\n    (at p5 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-2)\n        (at p3 l0-0)\n        (at p4 l1-0)\n        (at p5 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t1 l1-1)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(unload-truck p3 t1 l1-0)\n(load-airplane p4 a0 l0-1)\n(load-airplane p5 a0 l0-1)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n(unload-truck p1 t1 l1-2)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p5 t0 l0-1)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(unload-truck p0 t0 l0-0)\n(load-truck p3 t0 l0-0)\n(unload-truck p3 t0 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p4 t0 l0-0)",
                "(load-airplane p4 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t1 l1-1)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(unload-truck p3 t1 l1-0)",
                "(load-airplane p4 a0 l0-1)",
                "(load-airplane p5 a0 l0-1)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)",
                "(unload-truck p1 t1 l1-2)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p5 t0 l0-1)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(unload-truck p0 t0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-truck p3 t0 l0-0)"
            ],
            "correct": false,
            "instance_id": 39,
            "example_instance_id": 38,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l1-2)\n    (at p3 l1-1)\n    (at p4 l0-1)\n    (at p5 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-2)\n        (at p3 l0-0)\n        (at p4 l1-0)\n        (at p5 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p4 t0 l0-0)\n(load-airplane p4 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(unload-airplane p0 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l1-2)\n    (at p3 l1-1)\n    (at p4 l0-1)\n    (at p5 l0-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-2)\n        (at p3 l0-0)\n        (at p4 l1-0)\n        (at p5 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p4 t0 l0-0)\n(load-airplane p4 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n",
            "ground_truth_plan": [
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(load-airplane p4 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p4 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p4 t0 l0-0)",
                "(load-airplane p4 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)"
            ],
            "correct": false,
            "instance_id": 40,
            "example_instance_id": 39,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l1-2)\n    (at p3 l1-1)\n    (at p4 l0-1)\n    (at p5 l0-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-2)\n        (at p3 l0-0)\n        (at p4 l1-0)\n        (at p5 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(load-airplane p3 a1 l1-0)\n(load-airplane p2 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(load-airplane p4 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p4 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-1)\n    (at p2 l1-1)\n    (at p3 l1-0)\n    (at p4 l1-0)\n    (at p5 l1-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l0-1)\n        (at p5 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t1 l1-1)\n(load-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(load-airplane p4 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-truck p3 t0 l0-0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(unload-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p5 t1 l1-2)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p3 t1 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p5 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(load-truck p5 t0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p5 t0 l0-1)",
                "(unload-truck p4 t0 l0-1)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t1 l1-1)",
                "(load-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(load-airplane p4 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(unload-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p5 t1 l1-2)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)"
            ],
            "correct": false,
            "instance_id": 41,
            "example_instance_id": 40,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at p0 l1-1)\n    (at p1 l0-1)\n    (at p2 l1-1)\n    (at p3 l1-0)\n    (at p4 l1-0)\n    (at p5 l1-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l0-1)\n        (at p5 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t1 l1-0)\n(load-airplane p4 a0 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-airplane p5 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(load-truck p5 t0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p5 t0 l0-1)\n(unload-truck p4 t0 l0-1)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c2-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at p0 l0-0)\n    (at p1 l0-2)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l1-2)\n    (at p5 l1-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-0)\n        (at p2 l1-2)\n        (at p3 l1-1)\n        (at p4 l1-0)\n        (at p5 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t1 l1-2)\n(load-truck p2 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p5 t1 l1-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-truck p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p4 t1 l1-2)",
                "(load-truck p1 t0 l0-2)",
                "(load-airplane p3 a1 l0-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(unload-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p5 t1 l1-2)",
                "(unload-truck p2 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t1 l1-2)",
                "(load-truck p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p5 t1 l1-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-truck p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)"
            ],
            "correct": false,
            "instance_id": 42,
            "example_instance_id": 41,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c2-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 \n          t0 t1 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (TRUCK t0)\n    (TRUCK t1)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at p0 l0-0)\n    (at p1 l0-2)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l1-2)\n    (at p5 l1-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-0)\n        (at p2 l1-2)\n        (at p3 l1-1)\n        (at p4 l1-0)\n        (at p5 l1-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t1 l1-2)\n(load-truck p1 t0 l0-2)\n(load-airplane p3 a1 l0-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(unload-airplane p1 a1 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-truck p3 t1 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(unload-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p5 t1 l1-2)\n(unload-truck p2 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l1-0 c0)\n(unload-truck p0 t0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n",
            "ground_truth_plan": [
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-0 c0)",
                "(unload-truck p0 t0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)"
            ],
            "correct": false,
            "instance_id": 43,
            "example_instance_id": 42,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l1-0 c0)\n(unload-truck p0 t0 l1-0)\n",
            "ground_truth_plan": [
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-0 c0)",
                "(unload-truck p0 t0 l1-0)"
            ],
            "correct": false,
            "instance_id": 44,
            "example_instance_id": 43,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n",
            "ground_truth_plan": [
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)"
            ],
            "correct": true,
            "instance_id": 45,
            "example_instance_id": 44,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n",
            "ground_truth_plan": [
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)"
            ],
            "correct": false,
            "instance_id": 46,
            "example_instance_id": 45,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p1-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(fly-airplane a2 l2-0 l1-0)\n(load-airplane p0 a2 l2-0)\n(fly-airplane a2 l1-0 l2-0)\n(unload-airplane p0 a2 l1-0)\n",
            "ground_truth_plan": [
                "(load-airplane p0 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p0 a2 l1-0)"
            ],
            "extracted_llm_plan": [
                "(fly-airplane a2 l2-0 l1-0)",
                "(load-airplane p0 a2 l2-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(unload-airplane p0 a2 l1-0)"
            ],
            "correct": false,
            "instance_id": 47,
            "example_instance_id": 46,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p1-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p0 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p0 a2 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p1-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n",
            "ground_truth_plan": [
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)"
            ],
            "correct": true,
            "instance_id": 48,
            "example_instance_id": 47,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p1-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n",
            "ground_truth_plan": [
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)"
            ],
            "correct": true,
            "instance_id": 49,
            "example_instance_id": 48,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p1 a0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p0 a0 l2-0)\n(unload-airplane p1 a0 l2-0)\n",
            "ground_truth_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(unload-airplane p1 a0 l2-0)"
            ],
            "correct": false,
            "instance_id": 50,
            "example_instance_id": 49,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l1-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n",
            "ground_truth_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)"
            ],
            "correct": true,
            "instance_id": 51,
            "example_instance_id": 50,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l1-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p2-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-airplane p1 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p1 a2 l1-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)"
            ],
            "correct": true,
            "instance_id": 52,
            "example_instance_id": 51,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p2-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p1 a2 l1-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-0)\n        (at p2 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(unload-truck p1 t0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 53,
            "example_instance_id": 52,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-0)\n        (at p2 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l2-0 c0)\n(unload-truck p0 t0 l2-0)\n",
            "ground_truth_plan": [
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l2-0 c0)",
                "(unload-truck p0 t0 l2-0)"
            ],
            "correct": false,
            "instance_id": 54,
            "example_instance_id": 53,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p2 a0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(fly-airplane a0 l1-0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-airplane p1 a1 l1-0)\n(load-airplane p2 a1 l1-0)\n",
            "ground_truth_plan": [
                "(fly-airplane a1 l1-0 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-airplane p1 a1 l1-0)",
                "(load-airplane p2 a1 l1-0)"
            ],
            "correct": false,
            "instance_id": 55,
            "example_instance_id": 54,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a1 l1-0 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(load-airplane p2 a1 l2-0)\n(unload-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n",
            "ground_truth_plan": [
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)"
            ],
            "correct": false,
            "instance_id": 56,
            "example_instance_id": 55,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n",
            "ground_truth_plan": [
                "(load-airplane p2 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p2 a2 l1-0)",
                "(load-airplane p0 a2 l1-0)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(unload-airplane p0 a2 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)"
            ],
            "correct": true,
            "instance_id": 57,
            "example_instance_id": 56,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p2 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p2 a2 l1-0)\n(load-airplane p0 a2 l1-0)\n(fly-airplane a2 l1-0 l0-0)\n(unload-airplane p0 a2 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s1-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n",
            "ground_truth_plan": [
                "(load-airplane p2 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(unload-airplane p2 a2 l0-0)",
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)"
            ],
            "correct": true,
            "instance_id": 58,
            "example_instance_id": 57,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s1-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l1-0 l2-0 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p2 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(unload-airplane p2 a2 l0-0)\n(load-airplane p1 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 59,
            "example_instance_id": 58,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)"
            ],
            "correct": true,
            "instance_id": 60,
            "example_instance_id": 59,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a1 l0-0 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at a0 l0-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the given query problem in PDDL syntax:\n\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)"
            ],
            "correct": true,
            "instance_id": 61,
            "example_instance_id": 60,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at a0 l0-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p1-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p0 a2 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 62,
            "example_instance_id": 61,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p1-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p0 a2 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)"
            ],
            "correct": true,
            "instance_id": 63,
            "example_instance_id": 62,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p1 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l1-1)\n(unload-airplane p1 a0 l1-1)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l1-1)",
                "(unload-airplane p1 a0 l1-1)"
            ],
            "correct": false,
            "instance_id": 64,
            "example_instance_id": 63,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 65,
            "example_instance_id": 64,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p1 t2 l2-1)\n(unload-truck p1 t2 l2-1)\n",
            "ground_truth_plan": [
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p1 t2 l2-1)",
                "(unload-truck p1 t2 l2-1)"
            ],
            "correct": false,
            "instance_id": 66,
            "example_instance_id": 65,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p2-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(fly-airplane a1 l2-0 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n",
            "ground_truth_plan": [
                "(fly-airplane a2 l1-0 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(fly-airplane a2 l0-0 l2-0)",
                "(unload-airplane p1 a2 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)"
            ],
            "correct": true,
            "instance_id": 67,
            "example_instance_id": 66,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p2-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a2 l1-0 l0-0)\n(load-airplane p1 a2 l0-0)\n(fly-airplane a2 l0-0 l2-0)\n(unload-airplane p1 a2 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p2-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-airplane p1 a2 l1-0)\n(fly-airplane a2 l1-0 l1-1)\n(unload-airplane p1 a2 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-airplane p1 a2 l1-0)",
                "(fly-airplane a2 l1-0 l1-1)",
                "(unload-airplane p1 a2 l1-1)"
            ],
            "correct": false,
            "instance_id": 68,
            "example_instance_id": 67,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p2-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(load-airplane p2 a0 l2-1)\n(fly-airplane a0 l2-1 l1-0)\n(unload-airplane p2 a0 l1-0)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(load-airplane p2 a0 l2-1)",
                "(fly-airplane a0 l2-1 l1-0)",
                "(unload-airplane p2 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 69,
            "example_instance_id": 68,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)"
            ],
            "correct": false,
            "instance_id": 70,
            "example_instance_id": 69,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p1 a1 l1-0)\n",
            "ground_truth_plan": [
                "(load-airplane p1 a1 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p1 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p1 a1 l1-0)"
            ],
            "correct": true,
            "instance_id": 71,
            "example_instance_id": 70,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a1 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p1 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-1)\n        (at p2 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p2 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 72,
            "example_instance_id": 71,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-1)\n        (at p2 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-1)\n        (at p2 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p2 a2 l1-0)",
                "(load-airplane p1 a2 l1-0)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(unload-airplane p2 a2 l0-0)",
                "(unload-airplane p1 a2 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "correct": true,
            "instance_id": 73,
            "example_instance_id": 72,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-1)\n        (at p2 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p2 a2 l1-0)\n(load-airplane p1 a2 l1-0)\n(fly-airplane a2 l1-0 l0-0)\n(unload-airplane p2 a2 l0-0)\n(unload-airplane p1 a2 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l1-1)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-1 l0-1 c1)\n(unload-truck p0 t1 l0-1)\n(unload-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p1 a1 l2-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(drive-truck t1 l0-1 l0-0 c0)\n(unload-truck p2 t1 l0-0)\n(unload-truck p1 t1 l0-0)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-1 l0-1 c1)",
                "(unload-truck p0 t1 l0-1)",
                "(unload-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(drive-truck t1 l0-1 l0-0 c0)",
                "(unload-truck p2 t1 l0-0)",
                "(unload-truck p1 t1 l0-0)"
            ],
            "correct": false,
            "instance_id": 74,
            "example_instance_id": 73,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l1-1)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l0-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l1-1)\n    (at p3 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l2-0)\n        (at p3 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l2-1 c2)\n(unload-truck p2 t1 l2-1)\n(load-truck p3 t1 l2-1)\n(drive-truck t1 l2-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-airplane p3 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l2-1 c2)",
                "(unload-truck p2 t1 l2-1)",
                "(load-truck p3 t1 l2-1)",
                "(drive-truck t1 l2-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 75,
            "example_instance_id": 74,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l1-1)\n    (at p3 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l2-0)\n        (at p3 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p3 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l1-1)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n        (at p2 l2-1)\n        (at p3 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-1)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t0 l0-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l0-1 c1)\n(unload-truck p0 t1 l0-1)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(load-truck p3 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-1)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t0 l0-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l0-1 c1)",
                "(unload-truck p0 t1 l0-1)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)"
            ],
            "correct": false,
            "instance_id": 76,
            "example_instance_id": 75,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l1-1)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n        (at p2 l2-1)\n        (at p3 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(load-truck p3 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l1-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n        (at p2 l2-1)\n        (at p3 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(load-truck p3 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(load-truck p3 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(load-truck p3 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "correct": true,
            "instance_id": 77,
            "example_instance_id": 76,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l1-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n        (at p2 l2-1)\n        (at p3 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(load-truck p3 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(fly-airplane a1 l2-0 l1-0)\n(load-airplane p3 a1 l1-0)\n(load-airplane p1 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(unload-airplane p1 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at p3 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l2-0 c2)\n(unload-truck p2 t0 l2-0)\n(load-truck p0 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l1-0 c1)\n(unload-truck p0 t0 l1-0)\n(unload-truck p1 t0 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l2-1)\n(unload-airplane p1 a1 l2-1)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l1-0 c1)\n(unload-truck p3 t2 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(unload-airplane p0 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l2-0 c2)",
                "(unload-truck p2 t0 l2-0)",
                "(load-truck p0 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-0 c1)",
                "(unload-truck p0 t0 l1-0)",
                "(unload-truck p1 t0 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l2-1)",
                "(unload-airplane p1 a1 l2-1)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l1-0 c1)",
                "(unload-truck p3 t2 l1-0)"
            ],
            "correct": false,
            "instance_id": 78,
            "example_instance_id": 77,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at p3 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(fly-airplane a1 l1-0 l0-0)\n(load-airplane p2 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(load-airplane p3 a1 l2-0)\n(unload-airplane p2 a1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(unload-airplane p0 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at p3 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a2 l0-0)\n(load-airplane p1 a2 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l2-0)\n(load-airplane p3 a2 l2-0)\n(unload-airplane p2 a2 l2-0)\n(unload-airplane p1 a2 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(unload-airplane p0 a2 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a2 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l2-0)",
                "(load-airplane p3 a2 l2-0)",
                "(unload-airplane p2 a2 l2-0)",
                "(unload-airplane p1 a2 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(unload-airplane p0 a2 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a2 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l2-0)",
                "(load-airplane p3 a2 l2-0)",
                "(unload-airplane p2 a2 l2-0)",
                "(unload-airplane p1 a2 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(unload-airplane p0 a2 l1-0)"
            ],
            "correct": true,
            "instance_id": 79,
            "example_instance_id": 78,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l0-1)\n    (at p3 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a2 l0-0)\n(load-airplane p1 a2 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l2-0)\n(load-airplane p3 a2 l2-0)\n(unload-airplane p2 a2 l2-0)\n(unload-airplane p1 a2 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(unload-airplane p0 a2 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l2-1)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n        (at p2 l2-1)\n        (at p3 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(load-truck p1 t2 l2-1)\n(load-truck p2 t2 l2-1)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l1-1 c1)\n(unload-truck p1 t2 l1-1)\n(drive-truck t2 l1-1 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(fly-airplane a2 l0-0 l2-0)",
                "(load-airplane p1 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p1 a2 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a2 l1-0)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(unload-airplane p0 a2 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(load-truck p1 t2 l2-1)",
                "(load-truck p2 t2 l2-1)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l1-1 c1)",
                "(unload-truck p1 t2 l1-1)",
                "(drive-truck t2 l1-1 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)"
            ],
            "correct": false,
            "instance_id": 80,
            "example_instance_id": 79,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l2-1)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-1)\n        (at p2 l2-1)\n        (at p3 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(unload-truck p1 t2 l2-0)\n(fly-airplane a2 l0-0 l2-0)\n(load-airplane p1 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p1 a2 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a2 l1-0)\n(fly-airplane a2 l1-0 l0-0)\n(unload-airplane p0 a2 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l2-1)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(unload-truck p3 t1 l1-1)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p4 t0 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-1)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p4 t0 l0-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p4 t0 l0-0)"
            ],
            "correct": false,
            "instance_id": 81,
            "example_instance_id": 80,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l2-1)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-1)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(unload-truck p2 t2 l2-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p4 t0 l0-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l2-1)\n        (at p3 l1-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(load-truck p0 t1 l0-0)\n(load-truck p3 t0 l0-1)\n(fly-airplane a0 l1-0 l2-0)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(drive-truck t1 l1-1 l2-1 c1)\n(unload-truck p2 t1 l2-1)\n(load-airplane p0 a0 l0-0)\n(load-airplane p3 a0 l0-1)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p0 a0 l2-1)\n(unload-airplane p3 a0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(load-truck p0 t1 l0-0)",
                "(load-truck p3 t0 l0-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(drive-truck t1 l1-1 l2-1 c1)",
                "(unload-truck p2 t1 l2-1)",
                "(load-airplane p0 a0 l0-0)",
                "(load-airplane p3 a0 l0-1)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p0 a0 l2-1)",
                "(unload-airplane p3 a0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)"
            ],
            "correct": false,
            "instance_id": 82,
            "example_instance_id": 81,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l2-1)\n        (at p3 l1-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p3 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(unload-airplane p1 a0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l2-1)\n        (at p3 l1-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(fly-airplane a1 l1-0 l0-0)\n(load-airplane p3 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(unload-airplane p1 a1 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "correct": true,
            "instance_id": 83,
            "example_instance_id": 82,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l2-1)\n        (at p3 l1-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(load-airplane p0 a1 l0-0)\n(load-airplane p3 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(unload-airplane p1 a1 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l2-1)\n    (at p4 l2-0)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l0-1)\n        (at p2 l1-0)\n        (at p3 l1-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(load-airplane p3 a0 l2-0)\n(load-airplane p4 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l1-1 c0)\n(unload-truck p0 t0 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(load-airplane p4 a0 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p3 a0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-1 c0)",
                "(unload-truck p0 t0 l1-1)"
            ],
            "correct": false,
            "instance_id": 84,
            "example_instance_id": 83,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l2-1)\n    (at p4 l2-0)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l0-1)\n        (at p2 l1-0)\n        (at p3 l1-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(load-airplane p4 a0 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-airplane p3 a0 l2-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(unload-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l2-1)\n    (at p3 l0-1)\n    (at p4 l2-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-truck p4 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l1-1 c1)\n(unload-truck p0 t0 l1-1)\n(load-airplane p1 a0 l1-1)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l0-0 c0)\n(unload-truck p2 t2 l0-0)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-1 c1)",
                "(unload-truck p0 t0 l1-1)",
                "(load-airplane p1 a0 l1-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l0-0 c0)",
                "(unload-truck p2 t2 l0-0)"
            ],
            "correct": false,
            "instance_id": 85,
            "example_instance_id": 84,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l2-1)\n    (at p3 l0-1)\n    (at p4 l2-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l2-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l2-1)\n    (at p3 l0-1)\n    (at p4 l2-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p0 a2 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n",
            "ground_truth_plan": [
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p0 a2 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(load-airplane p2 a2 l2-0)",
                "(unload-airplane p1 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(unload-airplane p2 a2 l0-0)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p0 a2 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)"
            ],
            "correct": false,
            "instance_id": 86,
            "example_instance_id": 85,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l2-1)\n    (at p3 l0-1)\n    (at p4 l2-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p0 a2 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(load-airplane p2 a2 l2-0)\n(unload-airplane p1 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(unload-airplane p2 a2 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-0)\n    (at p1 l0-1)\n    (at p2 l1-0)\n    (at p3 l2-1)\n    (at p4 l1-1)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-0)\n        (at p2 l0-1)\n        (at p3 l1-1)\n        (at p4 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\nUnload-truck p3 t1 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l0-1 c1)\n(unload-truck p2 t1 l0-1)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p4 a0 l1-1)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-1)",
                "(load-truck p4 t1 l1-1)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(load-airplane p3 a2 l2-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(unload-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-airplane p4 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(unload-airplane p4 a2 l2-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l0-1 c1)",
                "(unload-truck p2 t1 l0-1)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p4 a0 l1-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "correct": false,
            "instance_id": 87,
            "example_instance_id": 86,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-0)\n    (at p1 l0-1)\n    (at p2 l1-0)\n    (at p3 l2-1)\n    (at p4 l1-1)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-0)\n        (at p2 l0-1)\n        (at p3 l1-1)\n        (at p4 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-1)\n(load-truck p4 t1 l1-1)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(load-airplane p3 a2 l2-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(load-truck p3 t1 l1-0)\n(unload-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(load-airplane p4 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(unload-airplane p4 a2 l2-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l2-1)\n    (at p2 l0-0)\n    (at p3 l1-0)\n    (at p4 l1-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(load-truck p1 t2 l2-1)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p3 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(unload-airplane p3 a2 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(load-truck p2 t0 l0-0)\n(fly-airplane a1 l0-0 l1-1)\n(unload-airplane p2 a1 l1-1)\n(load-truck p0 t1 l1-1)\n(unload-truck p0 t1 l1-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2(l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(load-truck p2 t0 l1-1)\n(drive-truck t0 l1-1 l1-0 c1)\n(unload-truck p2 t0 l1-0)\n(load-truck p1 t1 l2-1)\n(drive-truck t1 l2-1 l2-0 c2)\n(unload-truck p1 t1 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p4 t1 l1-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t2 l2-0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p4 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(unload-airplane p2 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(load-truck p1 t2 l2-1)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p3 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(unload-airplane p3 a2 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(load-truck p2 t0 l0-0)",
                "(fly-airplane a1 l0-0 l1-1)",
                "(unload-airplane p2 a1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2(l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(load-truck p2 t0 l1-1)",
                "(drive-truck t0 l1-1 l1-0 c1)",
                "(unload-truck p2 t0 l1-0)",
                "(load-truck p1 t1 l2-1)",
                "(drive-truck t1 l2-1 l2-0 c2)",
                "(unload-truck p1 t1 l2-0)"
            ],
            "correct": false,
            "instance_id": 88,
            "example_instance_id": 87,
            "relaxed_checks": {
                "del_and_precond_relax": -1,
                "del_relax_only": -1,
                "precond_relax_only": -1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l2-1)\n    (at p2 l0-0)\n    (at p3 l1-0)\n    (at p4 l1-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p4 t1 l1-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t2 l2-0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p2 a1 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p4 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n(unload-airplane p2 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-1)\n    (at p2 l1-1)\n    (at p3 l0-1)\n    (at p4 l0-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n        (at p2 l0-0)\n        (at p3 l1-0)\n        (at p4 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p4 t0 l0-0)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l1-0 c0)\n(unload-truck p3 t0 l1-0)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p0 a1 l1-0)\n(drive-truck t1 l1-0 l0-1 c1)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l0-1 l0-0 c0)\n(unload-truck p2 t1 l0-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p4 t2 l2-0)\n(drive-truck t2 l2-0 l0-0 c2)\n(unload-truck p1 t2 l0-0)\n(unload-truck p4 t2 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p4 t0 l0-1)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-airplane p1 a2 l2-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(load-airplane p2 a2 l1-0)",
                "(load-airplane p0 a2 l1-0)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(unload-airplane p2 a2 l0-0)",
                "(unload-airplane p1 a2 l0-0)",
                "(unload-airplane p0 a2 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(unload-truck p4 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(load-airplane p4 a2 l0-0)",
                "(load-airplane p3 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(unload-airplane p4 a2 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p4 t0 l0-0)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l1-0 c0)",
                "(unload-truck p3 t0 l1-0)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(drive-truck t1 l1-0 l0-1 c1)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l0-1 l0-0 c0)",
                "(unload-truck p2 t1 l0-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-0 l0-0 c2)",
                "(unload-truck p1 t2 l0-0)",
                "(unload-truck p4 t2 l0-0)"
            ],
            "correct": false,
            "instance_id": 89,
            "example_instance_id": 88,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-1)\n    (at p2 l1-1)\n    (at p3 l0-1)\n    (at p4 l0-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n        (at p2 l0-0)\n        (at p3 l1-0)\n        (at p4 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t0 l0-1)\n(load-truck p3 t0 l0-1)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-airplane p1 a2 l2-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(fly-airplane a2 l2-0 l1-0)\n(load-airplane p2 a2 l1-0)\n(load-airplane p0 a2 l1-0)\n(fly-airplane a2 l1-0 l0-0)\n(unload-airplane p2 a2 l0-0)\n(unload-airplane p1 a2 l0-0)\n(unload-airplane p0 a2 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(unload-truck p4 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(load-airplane p4 a2 l0-0)\n(load-airplane p3 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(unload-airplane p4 a2 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l2-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l1-1)\n        (at p4 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t2 l2-1)\n(load-truck p2 t2 l2-1)\n(load-truck p3 t2 l2-1)\n(load-airplane p1 a0 l2-0)\n(load-airplane p4 a0 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(unload-truck p2 t2 l2-0)\n(load-airplane p0 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-1)",
                "(load-truck p2 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p4 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t2 l2-1)",
                "(load-truck p2 t2 l2-1)",
                "(load-truck p3 t2 l2-1)",
                "(load-airplane p1 a0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 90,
            "example_instance_id": 89,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l2-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l1-1)\n        (at p4 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-1)\n(load-truck p2 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a1 l2-0)\n(load-airplane p3 a0 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a1 l2-0)\n(load-airplane p4 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p4 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l0-0)\n    (at p2 l0-0)\n    (at p3 l2-0)\n    (at p4 l1-0)\n    (at a0 l2-0)\n    (at a1 l0-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l2-1)\n        (at p4 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t2 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n(load-airplane p0 a0 l2-1)\n(load-truck p1 t0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n(load-airplane p1 a1 l0-1)\n(load-airplane p2 a1 l0-1)\n(fly-airplane a1 l0-1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(unload-airplane p2 a1 l2-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(fly-airplane a0 l2-1 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p2 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t2 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)",
                "(load-airplane p0 a0 l2-1)",
                "(load-truck p1 t0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)",
                "(load-airplane p1 a1 l0-1)",
                "(load-airplane p2 a1 l0-1)",
                "(fly-airplane a1 l0-1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(fly-airplane a0 l2-1 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 91,
            "example_instance_id": 90,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l0-0)\n    (at p2 l0-0)\n    (at p3 l2-0)\n    (at p4 l1-0)\n    (at a0 l2-0)\n    (at a1 l0-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l2-1)\n        (at p4 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(load-airplane p2 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p0 a1 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-1)\n    (at p2 l1-0)\n    (at p3 l1-1)\n    (at p4 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l0-1 c2)\n(unload-truck p1 t2 l0-1)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l1-0 c0)\n(unload-truck p4 t0 l1-0)\n(unload-truck p1 t0 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-airplane p2 a2 l1-0)",
                "(load-airplane p0 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(unload-airplane p2 a2 l2-0)",
                "(load-airplane p1 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(load-airplane p4 a2 l0-0)",
                "(unload-airplane p1 a2 l0-0)",
                "(unload-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p4 a2 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l0-1 c2)",
                "(unload-truck p1 t2 l0-1)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l1-0 c0)",
                "(unload-truck p4 t0 l1-0)",
                "(unload-truck p1 t0 l1-0)"
            ],
            "correct": false,
            "instance_id": 92,
            "example_instance_id": 91,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-1)\n    (at p2 l1-0)\n    (at p3 l1-1)\n    (at p4 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-airplane p2 a2 l1-0)\n(load-airplane p0 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(unload-airplane p2 a2 l2-0)\n(load-airplane p1 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(load-airplane p4 a2 l0-0)\n(unload-airplane p1 a2 l0-0)\n(unload-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p4 a2 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n        (at p2 l2-1)\n        (at p3 l0-1)\n        (at p4 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p3 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(load-airplane p0 a0 l2-1)\n(load-airplane p2 a0 l2-1)\n(fly-airplane a0 l2-1 l1-0)\n(unload-airplane p0 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-airplane p4 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l2-1 c1)\n(unload-truck p3 t1 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t2 l2-0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(load-airplane p4 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(unload-truck p1 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p0 a2 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p3 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(load-airplane p0 a0 l2-1)",
                "(load-airplane p2 a0 l2-1)",
                "(fly-airplane a0 l2-1 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-airplane p4 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l2-1 c1)",
                "(unload-truck p3 t1 l2-1)"
            ],
            "correct": false,
            "instance_id": 93,
            "example_instance_id": 92,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l0-1)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n        (at p2 l2-1)\n        (at p3 l0-1)\n        (at p4 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t2 l2-0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(unload-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(load-airplane p4 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(load-airplane p2 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(unload-truck p1 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p0 a2 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l1-1)\n    (at a0 l0-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-1)\n        (at p2 l0-1)\n        (at p3 l1-1)\n        (at p4 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t0 l0-1)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-airplane p3 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-airplane p4 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-1)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p3 a2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p4 t1 l1-1)",
                "(unload-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-airplane p4 a2 l1-0)",
                "(load-airplane p0 a2 l1-0)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(unload-airplane p2 a2 l0-0)",
                "(unload-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l2-0)",
                "(unload-airplane p4 a2 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t0 l0-1)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 94,
            "example_instance_id": 93,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l1-1)\n    (at a0 l0-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-1)\n        (at p2 l0-1)\n        (at p3 l1-1)\n        (at p4 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-1)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-airplane p3 a2 l2-0)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p4 t1 l1-1)\n(unload-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-airplane p4 a2 l1-0)\n(load-airplane p0 a2 l1-0)\n(fly-airplane a2 l1-0 l0-0)\n(unload-airplane p2 a2 l0-0)\n(unload-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l2-0)\n(unload-airplane p4 a2 l2-0)\n(load-truck p4 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l1-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l2-1)\n        (at p3 l0-1)\n        (at p4 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(load-airplane p4 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(load-truck p4 t1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(load-airplane p3 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(unload-airplane p3 a2 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 95,
            "example_instance_id": 94,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l1-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l2-1)\n        (at p3 l0-1)\n        (at p4 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(load-truck p4 t1 l1-0)\n(load-truck p1 t1 l1-0)\n(load-airplane p3 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(unload-airplane p3 a2 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l1-0)\n    (at p5 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-1)\n        (at p2 l0-1)\n        (at p3 l1-1)\n        (at p4 l1-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n(load-truck p2 t2 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(unload-truck p2 t2 l2-1)\n(load-airplane p5 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p5 a0 l2-0)\n(load-truck p5 t2 l2-0)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l2-1 c2)\n(drive-truck t2 l2-1 l1-1 c1)\n(load-truck p3 t1 l2-1)\n(unload-truck p5 t2 l1-1)\n(unload-truck p1 t2 l1-1)\n(unload-truck p3 t1 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p4 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p5 a0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-truck p3 t1 l1-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p5 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-truck p2 t2 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-truck p2 t2 l2-1)",
                "(load-airplane p5 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p5 a0 l2-0)",
                "(load-truck p5 t2 l2-0)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l2-1 c2)",
                "(drive-truck t2 l2-1 l1-1 c1)",
                "(load-truck p3 t1 l2-1)",
                "(unload-truck p5 t2 l1-1)",
                "(unload-truck p1 t2 l1-1)",
                "(unload-truck p3 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 96,
            "example_instance_id": 95,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l1-0)\n    (at p5 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-1)\n        (at p2 l0-1)\n        (at p3 l1-1)\n        (at p4 l1-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p3 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p5 a0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-truck p3 t1 l1-1)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p5 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l2-1)\n    (at p4 l1-1)\n    (at p5 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l2-0)\n        (at p4 l2-1)\n        (at p5 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(load-truck p4 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-airplane p1 a0 l1-0)\n(drive-truck t1 l1-0 l2-0 c2)\n(unload-truck p2 t1 l2-0)\n(unload-truck p4 t1 l2-0)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p5 a0 l0-1)\n(unload-airplane p1 a0 l0-0)\n(load-truck p5 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-1)",
                "(load-truck p5 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)",
                "(load-airplane p5 a0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p4 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p5 a0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p5 t2 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p5 t2 l2-1)",
                "(unload-truck p4 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(load-truck p4 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-airplane p1 a0 l1-0)",
                "(drive-truck t1 l1-0 l2-0 c2)",
                "(unload-truck p2 t1 l2-0)",
                "(unload-truck p4 t1 l2-0)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p5 a0 l0-1)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p5 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)"
            ],
            "correct": false,
            "instance_id": 97,
            "example_instance_id": 96,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l2-1)\n    (at p4 l1-1)\n    (at p5 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l2-0)\n        (at p4 l2-1)\n        (at p5 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-1)\n(load-truck p5 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n(load-airplane p5 a0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p4 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(load-airplane p4 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p5 a0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p5 t2 l2-0)\n(load-truck p4 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p5 t2 l2-1)\n(unload-truck p4 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l2-0)\n    (at p2 l1-1)\n    (at p3 l1-1)\n    (at p4 l2-1)\n    (at p5 l2-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n        (at p2 l0-1)\n        (at p3 l2-1)\n        (at p4 l1-1)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t2 l2-1)\n(load-airplane p5 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(load-truck p5 t1 l1-0)\n(load-truck p3 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(unload-truck p4 t1 l1-1)\n(unload-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(drive-truck t1 l1-1 l2-0 c1)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l0-1)\n(unload-airplane p1 a0 l0-1)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-truck p2 t0 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p4 t2 l2-1)",
                "(load-truck p3 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(load-airplane p4 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-airplane p1 a0 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t2 l2-1)",
                "(load-airplane p5 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(load-truck p3 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(drive-truck t1 l1-1 l2-0 c1)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-1)",
                "(unload-airplane p1 a0 l0-1)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-truck p2 t0 l1-1)"
            ],
            "correct": false,
            "instance_id": 98,
            "example_instance_id": 97,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l2-0)\n    (at p2 l1-1)\n    (at p3 l1-1)\n    (at p4 l2-1)\n    (at p5 l2-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n        (at p2 l0-1)\n        (at p3 l2-1)\n        (at p4 l1-1)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t2 l2-1)\n(load-truck p3 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p5 a0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-airplane p1 a0 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(load-airplane p4 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(load-truck p5 t1 l1-0)\n(unload-airplane p4 a0 l1-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(unload-truck p4 t1 l1-1)\n(unload-airplane p1 a0 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l2-1)\n    (at p2 l1-0)\n    (at p3 l2-1)\n    (at p4 l2-1)\n    (at p5 l1-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l1-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l1-0)\n        (at p5 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-0)\n(load-truck p5 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p5 t0 l0-1)\n(load-truck p2 t1 l1-0)\n(load-truck p4 t2 l2-1)\n(load-truck p3 t2 l2-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t1 l1-1)\n(unload-truck p4 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p2 a0 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p5 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-1)\n(unload-airplane p2 a0 l2-1)\n(unload-airplane p1 a0 l2-1)\n",
            "ground_truth_plan": [
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p4 t2 l2-1)",
                "(load-truck p3 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p5 a0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(load-truck p5 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p5 t0 l0-1)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p4 t2 l2-1)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t1 l1-1)",
                "(unload-truck p4 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p5 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-1)",
                "(unload-airplane p2 a0 l2-1)",
                "(unload-airplane p1 a0 l2-1)"
            ],
            "correct": false,
            "instance_id": 99,
            "example_instance_id": 98,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l2-1)\n    (at p2 l1-0)\n    (at p3 l2-1)\n    (at p4 l2-1)\n    (at p5 l1-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l1-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l1-0)\n        (at p5 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p4 t2 l2-1)\n(load-truck p3 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(unload-truck p1 t2 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p5 a0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-0)\n    (at p2 l0-0)\n    (at p3 l1-1)\n    (at p4 l2-0)\n    (at p5 l2-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-1)\n        (at p2 l1-1)\n        (at p3 l0-0)\n        (at p4 l1-0)\n        (at p5 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l1-1 c0)\n(load-truck p1 t1 l1-0)\n(unload-truck p0 t1 l1-1)\n(unload-truck p2 t0 l1-1)\n(drive-truck t0 l1-1 l0-1 c1)\n(load-truck p3 t0 l1-1)\n(drive-truck t0 l1-1 l0-0 c1)\n(unload-truck p3 t0 l0-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p4 a0 l2-0)\n(unload-airplane p4 a0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p5 a0 l2-1)\n(fly-airplane a0 l2-0 l2-1)\n(unload-airplane p5 a0 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p0 t2 l2-1)",
                "(load-truck p3 t1 l1-1)",
                "(load-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p1 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-1 c0)",
                "(load-truck p1 t1 l1-0)",
                "(unload-truck p0 t1 l1-1)",
                "(unload-truck p2 t0 l1-1)",
                "(drive-truck t0 l1-1 l0-1 c1)",
                "(load-truck p3 t0 l1-1)",
                "(drive-truck t0 l1-1 l0-0 c1)",
                "(unload-truck p3 t0 l0-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p5 a0 l2-1)",
                "(fly-airplane a0 l2-0 l2-1)",
                "(unload-airplane p5 a0 l2-1)"
            ],
            "correct": false,
            "instance_id": 100,
            "example_instance_id": 99,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-0)\n    (at p2 l0-0)\n    (at p3 l1-1)\n    (at p4 l2-0)\n    (at p5 l2-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-1)\n        (at p2 l1-1)\n        (at p3 l0-0)\n        (at p4 l1-0)\n        (at p5 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t2 l2-1)\n(load-truck p3 t1 l1-1)\n(load-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p4 a0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p1 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(load-truck p2 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l2-1)\n    (at p5 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-1)\n        (at p2 l0-1)\n        (at p3 l0-1)\n        (at p4 l0-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t2 l2-0)\n(load-truck p2 t2 l2-0)\n(load-truck p3 t2 l2-0)\n(load-truck p1 t1 l1-0)\n(load-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p4 a0 l2-1)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(unload-truck p2 t2 l2-1)\n(unload-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l0-1 c0)\n(load-truck p2 t2 l2-1)\n(load-truck p3 t2 l2-1)\n(unload-truck p2 t2 l0-1)\n(unload-truck p3 t2 l0-1)\n",
            "ground_truth_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p4 t2 l2-1)",
                "(unload-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t2 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(load-truck p1 t1 l1-0)",
                "(load-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p4 a0 l2-1)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(unload-truck p2 t2 l2-1)",
                "(unload-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l0-1 c0)",
                "(load-truck p2 t2 l2-1)",
                "(load-truck p3 t2 l2-1)",
                "(unload-truck p2 t2 l0-1)",
                "(unload-truck p3 t2 l0-1)"
            ],
            "correct": false,
            "instance_id": 101,
            "example_instance_id": 100,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l2-1)\n    (at p5 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-1)\n        (at p2 l0-1)\n        (at p3 l0-1)\n        (at p4 l0-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p3 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(load-airplane p0 a0 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p4 t2 l2-1)\n(unload-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(load-airplane p4 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l2-1)\n    (at p5 l1-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-1)\n        (at p2 l0-1)\n        (at p3 l0-1)\n        (at p4 l0-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p3 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(load-airplane p0 a0 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p4 t2 l2-1)\n(unload-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(load-airplane p4 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p4 t2 l2-1)",
                "(unload-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p4 t2 l2-1)",
                "(unload-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "correct": true,
            "instance_id": 102,
            "example_instance_id": 101,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-0)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l2-1)\n    (at p5 l1-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-1)\n        (at p2 l0-1)\n        (at p3 l0-1)\n        (at p4 l0-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p3 a1 l2-0)\n(load-airplane p2 a1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-truck p1 t2 l2-0)\n(load-airplane p0 a1 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p4 t2 l2-1)\n(unload-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(load-airplane p4 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(unload-airplane p3 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l2-1)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at p5 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-0)\n        (at p2 l1-1)\n        (at p3 l2-1)\n        (at p4 l0-1)\n        (at p5 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l2-1 c2)\n(unload-truck p3 t0 l2-1)\n\n(load-truck p5 t0 l0-0)\n(drive-truck t0 l0-0 l2-1 c2)\n(unload-truck p5 t0 l2-1)\n\n(load-airplane p0 a1 l1-0)\n(load-airplane p4 a1 l1-0)\n(fly-airplane a1 l1-0 l0-1)\n(unload-airplane p0 a1 l0-1)\n(unload-airplane p4 a1 l0-1)\n\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l1-1 c1)\n(unload-truck p2 t2 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-1)",
                "(load-airplane p5 a1 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p5 a1 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-airplane p4 a0 l1-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p5 t2 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p5 t2 l2-1)",
                "(unload-truck p3 t2 l2-1)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p4 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l2-1 c2)",
                "(unload-truck p3 t0 l2-1)",
                "(load-truck p5 t0 l0-0)",
                "(drive-truck t0 l0-0 l2-1 c2)",
                "(unload-truck p5 t0 l2-1)",
                "(load-airplane p0 a1 l1-0)",
                "(load-airplane p4 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-1)",
                "(unload-airplane p0 a1 l0-1)",
                "(unload-airplane p4 a1 l0-1)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l1-1 c1)",
                "(unload-truck p2 t2 l1-1)"
            ],
            "correct": false,
            "instance_id": 103,
            "example_instance_id": 102,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l0-0)\n    (at p2 l2-1)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at p5 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-0)\n        (at p2 l1-1)\n        (at p3 l2-1)\n        (at p4 l0-1)\n        (at p5 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-1)\n(load-airplane p5 a1 l0-0)\n(load-airplane p3 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p5 a1 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-airplane p4 a0 l1-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p5 t2 l2-0)\n(load-truck p3 t2 l2-0)\n(unload-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p5 t2 l2-1)\n(unload-truck p3 t2 l2-1)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(unload-airplane p1 a1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p4 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l2-1)\n    (at p4 l1-0)\n    (at p5 l2-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l1-0)\n        (at p4 l1-1)\n        (at p5 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(load-truck p1 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(load-truck p3 t2 l2-1)\n(load-truck p5 t2 l2-1)\n\n(drive-truck t0 l0-1 l1-1 c1)\n(unload-truck p0 t0 l1-1)\n\n(drive-truck t2 l2-1 l1-0 c2)\n(unload-truck p3 t2 l1-0)\n(unload-truck p5 t2 l1-0)\n\n(load-airplane p1 a0 l2-0)\n\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n\n(drive-truck t1 l1-1 l2-0 c1)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l2-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n\n(load-airplane p2 a1 l2-0)\n\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-1)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p5 a1 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p4 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(load-truck p1 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p3 t2 l2-1)",
                "(load-truck p5 t2 l2-1)",
                "(drive-truck t0 l0-1 l1-1 c1)",
                "(unload-truck p0 t0 l1-1)",
                "(drive-truck t2 l2-1 l1-0 c2)",
                "(unload-truck p3 t2 l1-0)",
                "(unload-truck p5 t2 l1-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(drive-truck t1 l1-1 l2-0 c1)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l2-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)"
            ],
            "correct": false,
            "instance_id": 104,
            "example_instance_id": 103,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l2-1)\n    (at p4 l1-0)\n    (at p5 l2-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l1-0)\n        (at p4 l1-1)\n        (at p5 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-1)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(load-truck p2 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p5 a1 l2-0)\n(load-airplane p3 a1 l2-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p4 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(unload-airplane p3 a1 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l0-1)\n    (at p2 l2-1)\n    (at p3 l1-0)\n    (at p4 l1-0)\n    (at p5 l0-0)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l2-0)\n        (at p4 l2-0)\n        (at p5 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p5 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p5 t2 l2-1)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p3 t1 l1-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-airplane p3 a0 l1-1)\n(load-airplane p4 a0 l1-1)\n(fly-airplane a0 l1-1 l2-0)\n(unload-airplane p3 a0 l2-0)\n(unload-airplane p4 a0 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-1)",
                "(load-truck p1 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p5 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p5 a0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p5 t2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p5 t2 l2-1)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p5 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p5 t2 l2-1)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p3 t1 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-airplane p3 a0 l1-1)",
                "(load-airplane p4 a0 l1-1)",
                "(fly-airplane a0 l1-1 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(unload-airplane p4 a0 l2-0)"
            ],
            "correct": false,
            "instance_id": 105,
            "example_instance_id": 104,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l0-1)\n    (at p2 l2-1)\n    (at p3 l1-0)\n    (at p4 l1-0)\n    (at p5 l0-0)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l2-0)\n        (at p4 l2-0)\n        (at p5 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-1)\n(load-truck p1 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p5 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p4 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p5 a0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p5 t2 l2-0)\n(unload-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p5 t2 l2-1)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at p1 l0-0)\n    (at p2 l1-1)\n    (at p3 l2-0)\n    (at p4 l0-0)\n    (at p5 l1-0)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l0-0)\n        (at p3 l2-0)\n        (at p4 l1-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p4 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l0-1 c1)\n(unload-truck p2 t1 l0-1)\n(load-airplane p2 a0 l0-1)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l0-1 c2)\n(unload-truck p1 t2 l0-1)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l0-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p2 t1 l1-1)",
                "(load-truck p0 t0 l0-1)",
                "(load-airplane p4 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p5 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(load-airplane p2 a0 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p4 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l0-1 c1)",
                "(unload-truck p2 t1 l0-1)",
                "(load-airplane p2 a0 l0-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l0-1 c2)",
                "(unload-truck p1 t2 l0-1)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l0-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)"
            ],
            "correct": false,
            "instance_id": 106,
            "example_instance_id": 105,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at p1 l0-0)\n    (at p2 l1-1)\n    (at p3 l2-0)\n    (at p4 l0-0)\n    (at p5 l1-0)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l0-0)\n        (at p3 l2-0)\n        (at p4 l1-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t1 l1-1)\n(load-truck p0 t0 l0-1)\n(load-airplane p4 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p5 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(load-airplane p2 a0 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l0-0)\n    (at p3 l2-0)\n    (at p4 l0-0)\n    (at p5 l0-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l0-1)\n        (at p3 l2-0)\n        (at p4 l2-0)\n        (at p5 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Based on the given query problem, here's the PDDL syntax for the plan:\n\n(load-truck p1 t1 l1-1)\n(load-truck p2 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(load-truck p4 t0 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-truck p2 t0 l0-1)\n(load-airplane p0 a1 l0-0)\n(unload-truck p4 t0 l0-0)\n(load-airplane p4 a1 l0-0)\n(unload-airplane p0 a1 l2-0)\n(unload-airplane p4 a1 l2-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-truck p5 t1 l1-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-truck p5 t1 l0-0)\n(drive-truck t1 l0-0 l1-0 c1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-truck p2 t0 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p5 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)",
                "(load-airplane p5 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t1 l1-1)",
                "(load-truck p2 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-truck p2 t0 l0-1)",
                "(load-airplane p0 a1 l0-0)",
                "(unload-truck p4 t0 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-truck p5 t1 l0-0)",
                "(drive-truck t1 l0-0 l1-0 c1)"
            ],
            "correct": false,
            "instance_id": 107,
            "example_instance_id": 106,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l0-0)\n    (at p3 l2-0)\n    (at p4 l0-0)\n    (at p5 l0-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l0-1)\n        (at p3 l2-0)\n        (at p4 l2-0)\n        (at p5 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-truck p2 t0 l0-0)\n(load-airplane p4 a1 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p5 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n(load-airplane p5 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l1-1)\n    (at p5 l2-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l2-0)\n        (at p2 l2-1)\n        (at p3 l2-1)\n        (at p4 l0-0)\n        (at p5 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p5 t2 l2-1)\n(unload-truck p3 t2 l2-1)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l0-0 l2-0)\n(drive-truck t1 l1-1 l0-0 c1)\n(load-truck p4 t1 l0-0)\n(load-airplane p0 a1 l1-0)\n(drive-truck t1 l0-0 l0-1 c0)\n(unload-truck p4 t1 l0-1)\n(fly-airplane a1 l2-0 l2-1)\n(unload-airplane p1 a1 l2-0)\n(unload-airplane p0 a1 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(load-truck p4 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(load-airplane p4 a1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p5 t2 l2-1)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p5 t2 l2-1)",
                "(unload-truck p3 t2 l2-1)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(drive-truck t1 l1-1 l0-0 c1)",
                "(load-truck p4 t1 l0-0)",
                "(load-airplane p0 a1 l1-0)",
                "(drive-truck t1 l0-0 l0-1 c0)",
                "(unload-truck p4 t1 l0-1)",
                "(fly-airplane a1 l2-0 l2-1)",
                "(unload-airplane p1 a1 l2-0)",
                "(unload-airplane p0 a1 l2-1)"
            ],
            "correct": false,
            "instance_id": 108,
            "example_instance_id": 107,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-0)\n    (at p2 l2-0)\n    (at p3 l2-0)\n    (at p4 l1-1)\n    (at p5 l2-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l2-0)\n        (at p2 l2-1)\n        (at p3 l2-1)\n        (at p4 l0-0)\n        (at p5 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-0)\n(load-truck p2 t2 l2-0)\n(load-truck p4 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(fly-airplane a1 l2-0 l1-0)\n(load-airplane p4 a1 l1-0)\n(load-airplane p1 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p5 t2 l2-1)\n(unload-truck p3 t2 l2-1)\n(unload-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-0)\n    (at p1 l0-0)\n    (at p2 l1-0)\n    (at p3 l1-1)\n    (at p4 l2-0)\n    (at p5 l2-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l2-1)\n        (at p4 l0-1)\n        (at p5 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(load-truck p5 t2 l2-1)\n(load-truck p0 t2 l2-0)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(unload-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(load-airplane p0 a1 l1-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-truck p5 t2 l2-1)\n(unload-airplane p0 a1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-1)",
                "(load-airplane p4 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p5 a1 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p3 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-airplane p1 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(load-truck p5 t2 l2-1)",
                "(load-truck p0 t2 l2-0)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(unload-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-truck p5 t2 l2-1)",
                "(unload-airplane p0 a1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)"
            ],
            "correct": false,
            "instance_id": 109,
            "example_instance_id": 108,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-0)\n    (at p1 l0-0)\n    (at p2 l1-0)\n    (at p3 l1-1)\n    (at p4 l2-0)\n    (at p5 l2-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l2-1)\n        (at p4 l0-1)\n        (at p5 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-1)\n(load-airplane p4 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(load-airplane p5 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p5 a1 l0-0)\n(unload-airplane p4 a1 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p3 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(load-airplane p3 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(unload-airplane p1 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l1-1)\n    (at p3 l2-0)\n    (at p4 l1-1)\n    (at p5 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-0)\n        (at p2 l2-1)\n        (at p3 l2-0)\n        (at p4 l2-1)\n        (at p5 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t2 l2-1)\n(load-truck p2 t1 l1-1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l2-1 c2)\n(unload-truck p4 t1 l2-1)\n(load-truck p5 t2 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(load-truck p5 t0 l0-1)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(unload-truck p5 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p0 t2 l2-1)",
                "(load-truck p4 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p4 a1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p4 t2 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(unload-truck p2 t2 l2-1)",
                "(load-airplane p0 a1 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p5 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p5 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p5 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t2 l2-1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l2-1 c2)",
                "(unload-truck p4 t1 l2-1)",
                "(load-truck p5 t2 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(load-truck p5 t0 l0-1)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(unload-truck p5 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 110,
            "example_instance_id": 109,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l1-1)\n    (at p3 l2-0)\n    (at p4 l1-1)\n    (at p5 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l1-0)\n        (at p2 l2-1)\n        (at p3 l2-0)\n        (at p4 l2-1)\n        (at p5 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t2 l2-1)\n(load-truck p4 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(load-airplane p4 a1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n(unload-airplane p2 a1 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p4 t2 l2-0)\n(load-truck p2 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(unload-truck p2 t2 l2-1)\n(load-airplane p0 a1 l2-0)\n(load-airplane p5 a1 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p5 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p5 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p5 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l2-1)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l2-1)\n        (at p3 l1-0)\n        (at p4 l1-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t2 l2-1)\n(load-truck p5 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p5 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p5 a1 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p4 t1 l2-0)\n(drive-truck t1 l2-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(load-airplane p4 a1 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t2 l2-1)",
                "(load-truck p5 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p5 a1 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p4 t1 l2-0)",
                "(drive-truck t1 l2-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 111,
            "example_instance_id": 110,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l2-1)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l2-1)\n        (at p3 l1-0)\n        (at p4 l1-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(load-airplane p4 a1 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p3 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p4 a1 l1-0)\n(load-truck p4 t1 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-1)\n    (at p2 l2-1)\n    (at p3 l1-1)\n    (at p4 l1-1)\n    (at p5 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l0-1)\n        (at p5 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p5 t0 l0-0)\n(load-airplane p0 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p3 t1 l1-1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p4 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-truck p2 t2 l2-1)\n(load-airplane p4 a1 l0-0)\n(fly-airplane a1 l0-0 l0-1)\n(unload-airplane p4 a1 l0-1)\n(drive-truck t0 l0-0 l1-0 c0)\n(unload-truck p5 t0 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p4 t1 l1-1)",
                "(load-truck p3 t1 l1-1)",
                "(load-airplane p5 a1 l0-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(unload-truck p3 t1 l1-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(load-airplane p4 a1 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p5 t0 l0-0)",
                "(load-airplane p0 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p3 t1 l1-1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p4 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-truck p2 t2 l2-1)",
                "(load-airplane p4 a1 l0-0)",
                "(fly-airplane a1 l0-0 l0-1)",
                "(unload-airplane p4 a1 l0-1)",
                "(drive-truck t0 l0-0 l1-0 c0)",
                "(unload-truck p5 t0 l1-0)"
            ],
            "correct": false,
            "instance_id": 112,
            "example_instance_id": 111,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-1)\n    (at p2 l2-1)\n    (at p3 l1-1)\n    (at p4 l1-1)\n    (at p5 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-1)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l0-1)\n        (at p5 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t1 l1-1)\n(load-truck p3 t1 l1-1)\n(load-airplane p5 a1 l0-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(unload-truck p1 t2 l2-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(unload-truck p3 t1 l1-0)\n(fly-airplane a1 l0-0 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(load-airplane p4 a1 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l1-1)\n    (at p5 l1-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l2-1)\n        (at p3 l2-1)\n        (at p4 l0-1)\n        (at p5 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(load-truck p4 t1 l1-1)\n(load-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(fly-airplane a1 l0-0 l1-0)\n(load-airplane p3 a1 l0-0)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p5 a1 l1-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-airplane p2 a0 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-1)\n(load-truck p4 t0 l0-1)\n(unload-airplane p1 a1 l0-1)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(unload-truck p2 t2 l2-1)\n",
            "ground_truth_plan": [
                "(load-airplane p3 a1 l0-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(unload-truck p4 t1 l1-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(load-airplane p4 a1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p3 t2 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-truck p2 t2 l2-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p4 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(load-truck p4 t1 l1-1)",
                "(load-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(load-airplane p3 a1 l0-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p5 a1 l1-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-airplane p2 a0 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-1)",
                "(load-truck p4 t0 l0-1)",
                "(unload-airplane p1 a1 l0-1)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-truck p2 t2 l2-1)"
            ],
            "correct": false,
            "instance_id": 113,
            "example_instance_id": 112,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l1-1)\n    (at p5 l1-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-1)\n        (at p2 l2-1)\n        (at p3 l2-1)\n        (at p4 l0-1)\n        (at p5 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p3 a1 l0-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(unload-truck p4 t1 l1-0)\n(fly-airplane a1 l0-0 l1-0)\n(load-airplane p4 a1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p3 a1 l2-0)\n(unload-airplane p2 a1 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p3 t2 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(unload-truck p2 t2 l2-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p4 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at p1 l0-0)\n    (at p2 l0-0)\n    (at p3 l0-0)\n    (at p4 l1-1)\n    (at p5 l0-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-0)\n        (at p2 l2-1)\n        (at p3 l0-1)\n        (at p4 l2-1)\n        (at p5 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p5 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(load-airplane p1 a1 l0-0)\n(load-airplane p2 a1 l0-0)\n(load-airplane p3 a1 l0-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(unload-airplane p3 a1 l2-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p3 t2 l2-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l2-1 c2)\n(load-truck p4 t1 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(unload-truck p4 t2 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(unload-truck p4 t1 l1-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(load-airplane p4 a1 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(unload-truck p2 t2 l2-1)",
                "(unload-airplane p0 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p5 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(load-airplane p1 a1 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p3 t2 l2-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l2-1 c2)",
                "(load-truck p4 t1 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p4 t2 l2-0)"
            ],
            "correct": false,
            "instance_id": 114,
            "example_instance_id": 113,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-1)\n    (at p1 l0-0)\n    (at p2 l0-0)\n    (at p3 l0-0)\n    (at p4 l1-1)\n    (at p5 l0-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-0)\n        (at p2 l2-1)\n        (at p3 l0-1)\n        (at p4 l2-1)\n        (at p5 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p2 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(unload-truck p4 t1 l1-0)\n(fly-airplane a1 l0-0 l1-0)\n(load-airplane p4 a1 l1-0)\n(unload-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n(load-truck p4 t2 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(unload-truck p2 t2 l2-1)\n(unload-airplane p0 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-0)\n    (at p1 l2-1)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l1-0)\n        (at p3 l2-0)\n        (at p4 l1-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the provided query problem in PDDL syntax:\n\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(load-airplane p4 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(load-airplane p5 a1 l2-0)\n(fly-airplane a1 l1-0 l0-0)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p1 a1 l2-0)\n(unload-airplane p5 a1 l2-0)\n(unload-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p4 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(load-airplane p4 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p1 a1 l2-0)",
                "(unload-airplane p5 a1 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 115,
            "example_instance_id": 114,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-0)\n    (at p1 l2-1)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l1-0)\n        (at p3 l2-0)\n        (at p4 l1-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(fly-airplane a1 l1-0 l0-0)\n(load-airplane p3 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(load-airplane p4 a1 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-airplane p5 a1 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(load-truck p5 t1 l1-0)\n(unload-airplane p4 a1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l2-1)\n    (at p2 l2-0)\n    (at p3 l1-1)\n    (at p4 l2-1)\n    (at p5 l2-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l2-1)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l1-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the given query problem in PDDL syntax: \n\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p4 t2 l2-1)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(unload-truck p4 t2 l2-1)\n(fly-airplane a0 l2-0 l1-0)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(load-airplane p5 a0 l1-1)\n(load-airplane p2 a0 l2-0)\n(load-airplane p4 a0 l2-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p5 t0 l0-0)\n(load-truck p3 t0 l1-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p5 t0 l0-1)\n(unload-truck p3 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(fly-airplane a0 l0-0 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(unload-truck p4 t2 l2-1)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(load-airplane p5 a0 l1-1)",
                "(load-airplane p2 a0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p5 t0 l0-0)",
                "(load-truck p3 t0 l1-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p5 t0 l0-1)",
                "(unload-truck p3 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(fly-airplane a0 l0-0 l2-0)"
            ],
            "correct": false,
            "instance_id": 116,
            "example_instance_id": 115,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l2-1)\n    (at p2 l2-0)\n    (at p3 l1-1)\n    (at p4 l2-1)\n    (at p5 l2-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l2-1)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l1-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(load-airplane p5 a1 l2-0)\n(load-airplane p4 a1 l2-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(load-truck p5 t1 l1-0)\n(unload-airplane p4 a1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(load-airplane p3 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l2-0)\n    (at a0 l0-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l2-0)\n        (at p4 l1-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l1-0 c1)\n(unload-truck p1 t0 l1-0)\n(load-truck p3 t0 l0-0)\n(load-airplane p0 a0 l0-1)\n(load-airplane p4 a0 l2-0)\n(load-airplane p5 a0 l2-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(drive-truck t0 l1-0 l1-1 c1)\n(unload-truck p3 t0 l1-1)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(drive-truck t0 l1-0 l2-0 c2)\n(load-truck p0 t0 l1-0)\n(drive-truck t0 l2-0 l2-0 c2)\n(unload-truck p0 t0 l2-0)\n(unload-truck p3 t0 l2-0)\n",
            "ground_truth_plan": [
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p0 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-0 c1)",
                "(unload-truck p1 t0 l1-0)",
                "(load-truck p3 t0 l0-0)",
                "(load-airplane p0 a0 l0-1)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(drive-truck t0 l1-0 l1-1 c1)",
                "(unload-truck p3 t0 l1-1)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(drive-truck t0 l1-0 l2-0 c2)",
                "(load-truck p0 t0 l1-0)",
                "(drive-truck t0 l2-0 l2-0 c2)",
                "(unload-truck p0 t0 l2-0)",
                "(unload-truck p3 t0 l2-0)"
            ],
            "correct": false,
            "instance_id": 117,
            "example_instance_id": 116,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l2-0)\n    (at a0 l0-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l2-0)\n        (at p4 l1-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p3 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(load-airplane p4 a1 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-airplane p2 a1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p4 a1 l1-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p0 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l2-0)\n    (at a0 l0-0)\n    (at a1 l0-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l2-0)\n        (at p4 l1-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p3 a2 l0-0)\n(load-airplane p1 a2 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l2-0)\n(load-airplane p4 a2 l2-0)\n(unload-airplane p3 a2 l2-0)\n(load-airplane p2 a2 l2-0)\n(unload-airplane p1 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p4 a2 l1-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-airplane p2 a2 l1-0)\n(unload-airplane p0 a2 l1-0)\n",
            "ground_truth_plan": [
                "(load-airplane p3 a2 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l2-0)",
                "(load-airplane p4 a2 l2-0)",
                "(unload-airplane p3 a2 l2-0)",
                "(load-airplane p2 a2 l2-0)",
                "(unload-airplane p1 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p4 a2 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-airplane p2 a2 l1-0)",
                "(unload-airplane p0 a2 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p3 a2 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l2-0)",
                "(load-airplane p4 a2 l2-0)",
                "(unload-airplane p3 a2 l2-0)",
                "(load-airplane p2 a2 l2-0)",
                "(unload-airplane p1 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p4 a2 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-airplane p2 a2 l1-0)",
                "(unload-airplane p0 a2 l1-0)"
            ],
            "correct": true,
            "instance_id": 118,
            "example_instance_id": 117,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l2-0)\n    (at a0 l0-0)\n    (at a1 l0-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l2-0)\n        (at p4 l1-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p3 a2 l0-0)\n(load-airplane p1 a2 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l2-0)\n(load-airplane p4 a2 l2-0)\n(unload-airplane p3 a2 l2-0)\n(load-airplane p2 a2 l2-0)\n(unload-airplane p1 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p4 a2 l1-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-airplane p2 a2 l1-0)\n(unload-airplane p0 a2 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s2-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l1-1)\n    (at p4 l1-1)\n    (at p5 l1-1)\n    (at a0 l0-0)\n    (at a1 l0-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-0)\n        (at p2 l1-1)\n        (at p3 l0-0)\n        (at p4 l1-1)\n        (at p5 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-0 l0-0 c1)\n(unload-truck p1 t1 l0-0)\n(unload-truck p3 t1 l0-0)\n(drive-truck t1 l0-0 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(load-airplane p5 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(load-truck p3 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(load-airplane p3 a2 l1-0)",
                "(load-airplane p1 a2 l1-0)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(unload-airplane p3 a2 l0-0)",
                "(unload-airplane p1 a2 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-0 l0-0 c1)",
                "(unload-truck p1 t1 l0-0)",
                "(unload-truck p3 t1 l0-0)",
                "(drive-truck t1 l0-0 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(load-airplane p5 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)"
            ],
            "correct": false,
            "instance_id": 119,
            "example_instance_id": 118,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s2-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l1-0 l1-1 l2-0 l2-1 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l1-1)\n    (at p4 l1-1)\n    (at p5 l1-1)\n    (at a0 l0-0)\n    (at a1 l0-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-0)\n        (at p2 l1-1)\n        (at p3 l0-0)\n        (at p4 l1-1)\n        (at p5 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(load-truck p3 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(unload-truck p3 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(fly-airplane a2 l2-0 l1-0)\n(load-airplane p3 a2 l1-0)\n(load-airplane p1 a2 l1-0)\n(fly-airplane a2 l1-0 l0-0)\n(unload-airplane p3 a2 l0-0)\n(unload-airplane p1 a2 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 120,
            "example_instance_id": 119,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)"
            ],
            "correct": false,
            "instance_id": 121,
            "example_instance_id": 120,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p1-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)"
            ],
            "correct": true,
            "instance_id": 122,
            "example_instance_id": 121,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-airplane p0 a0 l1-1)\n(fly-airplane a0 l1-1 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-airplane p0 a0 l1-1)",
                "(fly-airplane a0 l1-1 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "correct": false,
            "instance_id": 123,
            "example_instance_id": 122,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p1-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p1-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(load-airplane p0 a1 l0-1)\n(fly-airplane a1 l0-1 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n",
            "ground_truth_plan": [
                "(fly-airplane a2 l2-0 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p0 a2 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(load-airplane p0 a1 l0-1)",
                "(fly-airplane a1 l0-1 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "correct": false,
            "instance_id": 124,
            "example_instance_id": 123,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p1-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n    )\n)\n)\n\n[PLAN]\n(fly-airplane a2 l2-0 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p0 a2 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-2)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p0 a0 l0-2)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p0 a0 l0-2)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)"
            ],
            "correct": false,
            "instance_id": 125,
            "example_instance_id": 124,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l1-2)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p1 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-0)\n    (at p1 l2-2)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(load-truck p0 t0 l2-1)\n(drive-truck t0 l2-1 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(load-truck p1 t1 l0-0)\n(drive-truck t1 l0-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l0-0 c1)\n(unload-truck p1 t1 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(load-truck p0 t0 l2-1)",
                "(drive-truck t0 l2-1 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(load-truck p1 t1 l0-0)",
                "(drive-truck t1 l0-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l0-0 c1)",
                "(unload-truck p1 t1 l0-0)"
            ],
            "correct": false,
            "instance_id": 126,
            "example_instance_id": 125,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p2-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-0)\n    (at p1 l2-2)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p1 a0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-0)\n    (at p1 l2-2)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p1 a0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)"
            ],
            "correct": true,
            "instance_id": 127,
            "example_instance_id": 126,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-0)\n    (at p1 l2-2)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p1 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p0 a0 l1-2)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p0 a0 l0-0)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p0 a0 l1-2)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "correct": false,
            "instance_id": 128,
            "example_instance_id": 127,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p2-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p2-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-2)\n    (at p1 l1-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p0 t0 l0-2)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(drive-truck t1 l1-0 l2-0 c2)\n(load-truck p0 t1 l2-0)\n(drive-truck t1 l2-0 l2-1 c2)\n(unload-truck p0 t1 l2-1)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)",
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(drive-truck t1 l1-0 l2-0 c2)",
                "(load-truck p0 t1 l2-0)",
                "(drive-truck t1 l2-0 l2-1 c2)",
                "(unload-truck p0 t1 l2-1)"
            ],
            "correct": false,
            "instance_id": 129,
            "example_instance_id": 128,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p2-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-2)\n    (at p1 l1-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n(load-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-2)\n    (at p1 l1-1)\n    (at p2 l2-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-2)\n        (at p2 l2-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(load-airplane p0 a0 l0-1)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p1 t1 l1-2)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n(fly-airplane a0 l1-0 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p1 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(load-airplane p0 a0 l0-1)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p1 t1 l1-2)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 130,
            "example_instance_id": 129,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-2)\n    (at p1 l1-1)\n    (at p2 l2-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-2)\n        (at p2 l2-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p1 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at p2 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-2)\n        (at p2 l2-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(drive-truck t2 l2-2 l2-0 c2)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(unload-truck p2 t2 l2-2)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p2 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(unload-truck p1 t2 l2-2)",
                "(unload-airplane p0 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(unload-truck p2 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 131,
            "example_instance_id": 130,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p3-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at p2 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-2)\n        (at p2 l2-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p2 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(unload-truck p1 t2 l2-2)\n(unload-airplane p0 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at p2 l0-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-2)\n        (at p2 l2-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p2 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t1 l1-0 l1-1 c1)\n.load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p2 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(unload-truck p1 t2 l2-2)\n(unload-airplane p0 a1 l2-0)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p2 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(unload-truck p1 t2 l2-2)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p2 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(unload-truck p1 t2 l2-2)",
                "(unload-airplane p0 a1 l2-0)"
            ],
            "correct": false,
            "instance_id": 132,
            "example_instance_id": 131,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-1)\n    (at p1 l1-1)\n    (at p2 l0-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-2)\n        (at p2 l2-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p2 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p2 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(unload-airplane p0 a1 l2-0)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(unload-truck p1 t2 l2-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t0 l0-0 l0-1 c0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p0 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(unload-truck p1 t0 l0-2)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p0 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(unload-truck p1 t0 l0-2)"
            ],
            "correct": false,
            "instance_id": 133,
            "example_instance_id": 132,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p3-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(fly-airplane a1 l0-0 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(fly-airplane a2 l1-0 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p0 a2 l1-0)\n(load-truck p0 t0 l1-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(load-airplane p0 a2 l1-0)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(unload-airplane p0 a2 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p0 a2 l1-0)",
                "(load-truck p0 t0 l1-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "correct": false,
            "instance_id": 134,
            "example_instance_id": 133,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l1-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(load-airplane p0 a2 l1-0)\n(fly-airplane a2 l1-0 l0-0)\n(unload-airplane p0 a2 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l1-0)\n        (at p2 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-airplane p1 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p1 a2 l1-0)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p0 t2 l2-2)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-0)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p0 t2 l2-2)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p1 a2 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-airplane p1 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p1 a2 l1-0)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p0 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 135,
            "example_instance_id": 134,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p3-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l1-0)\n        (at p2 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-0)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p0 t2 l2-2)\n(unload-truck p1 t0 l0-0)\n(load-airplane p1 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p1 a2 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l2-0)\n    (at p3 l2-2)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n        (at p2 l1-1)\n        (at p3 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-2)\n(load-truck p1 t0 l0-2)\n(load-truck p3 t2 l2-2)\n(load-truck p2 t2 l2-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(drive-truck t2 l2-2 l1-1 c1)\n(unload-truck p2 t2 l1-1)\n(unload-truck p3 t2 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p2 a0 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(load-truck p3 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-2)",
                "(load-truck p1 t0 l0-2)",
                "(load-truck p3 t2 l2-2)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(drive-truck t2 l2-2 l1-1 c1)",
                "(unload-truck p2 t2 l1-1)",
                "(unload-truck p3 t2 l1-1)"
            ],
            "correct": false,
            "instance_id": 136,
            "example_instance_id": 135,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l2-0)\n    (at p3 l2-2)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-1)\n        (at p2 l1-1)\n        (at p3 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p2 a0 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(load-truck p3 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l1-2)\n    (at p2 l2-2)\n    (at p3 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-2)\n        (at p2 l0-1)\n        (at p3 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-2)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p1 a0 l1-2)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-2)\n(drive-truck t2 l2-0 l2-2 c2)\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l1-0 c1)\n(unload-truck p1 t2 l1-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(drive-truck t2 l2-0 l2-2 c1)\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p1 t1 l1-2)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(load-truck p2 t2 l2-2)",
                "(unload-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p3 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p3 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-2)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p1 a0 l1-2)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-2)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l1-0 c1)",
                "(unload-truck p1 t2 l1-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c1)",
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)"
            ],
            "correct": false,
            "instance_id": 137,
            "example_instance_id": 136,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l1-2)\n    (at p2 l2-2)\n    (at p3 l0-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-2)\n        (at p2 l0-1)\n        (at p3 l2-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p1 t1 l1-2)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(load-truck p2 t2 l2-2)\n(unload-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p3 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p3 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-2)\n    (at p1 l2-1)\n    (at p2 l1-0)\n    (at p3 l1-2)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l2-2)\n        (at p3 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(load-truck p0 t2 l2-2)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-airplane p3 a0 l1-0)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-airplane p3 a0 l1-0)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)"
            ],
            "correct": false,
            "instance_id": 138,
            "example_instance_id": 137,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p4-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-2)\n    (at p1 l2-1)\n    (at p2 l1-0)\n    (at p3 l1-2)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l2-2)\n        (at p3 l0-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-2)\n    (at p1 l2-1)\n    (at p2 l1-0)\n    (at p3 l1-2)\n    (at a0 l2-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l2-2)\n        (at p3 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-airplane p2 a1 l1-0)",
                "(unload-truck p3 t1 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 139,
            "example_instance_id": 138,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l2-2)\n    (at p1 l2-1)\n    (at p2 l1-0)\n    (at p3 l1-2)\n    (at a0 l2-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l2-2)\n        (at p3 l0-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-airplane p2 a1 l1-0)\n(unload-truck p3 t1 l1-0)\n(load-airplane p3 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l2-1)\n    (at p2 l0-0)\n    (at p3 l2-0)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l1-1)\n        (at p2 l1-2)\n        (at p3 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p3 t2 l2-2)\n(load-truck p0 t0 l2-2)\n(drive-truck t0 l2-2 l1-1 c1)\n(unload-truck p1 t2 l1-1)\n(unload-truck p0 t0 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p1 t1 l1-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p1 t1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(load-airplane p2 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p0 t2 l2-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p3 t2 l2-2)",
                "(load-truck p0 t0 l2-2)",
                "(drive-truck t0 l2-2 l1-1 c1)",
                "(unload-truck p1 t2 l1-1)",
                "(unload-truck p0 t0 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p1 t1 l1-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p1 t1 l1-0)"
            ],
            "correct": false,
            "instance_id": 140,
            "example_instance_id": 139,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l2-1)\n    (at p2 l0-0)\n    (at p3 l2-0)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l1-1)\n        (at p2 l1-2)\n        (at p3 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-airplane p3 a1 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(load-airplane p2 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p0 t2 l2-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l0-1)\n    (at p2 l2-2)\n    (at p3 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l0-2)\n        (at p3 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p3 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l0-0 c0)\n(unload-truck p1 t2 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)",
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l0-0 c0)",
                "(unload-truck p1 t2 l0-0)"
            ],
            "correct": false,
            "instance_id": 141,
            "example_instance_id": 140,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p4-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l0-1)\n    (at p2 l2-2)\n    (at p3 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l0-2)\n        (at p3 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(load-airplane p3 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l0-1)\n    (at p2 l2-2)\n    (at p3 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l0-2)\n        (at p3 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(load-airplane p3 a2 l0-0)\n(load-airplane p1 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a2 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p2 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(unload-airplane p2 a2 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(load-airplane p3 a2 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(unload-airplane p1 a2 l2-0)",
                "(unload-airplane p0 a2 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(load-airplane p3 a2 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a2 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "correct": false,
            "instance_id": 142,
            "example_instance_id": 141,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l0-1)\n    (at p2 l2-2)\n    (at p3 l0-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l0-2)\n        (at p3 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p2 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(unload-airplane p2 a2 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(load-airplane p3 a2 l0-0)\n(load-airplane p1 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(unload-airplane p1 a2 l2-0)\n(unload-airplane p0 a2 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at p2 l1-1)\n    (at p3 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-2)\n        (at p2 l0-1)\n        (at p3 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p0 a2 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(unload-airplane p0 a2 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p0 t2 l2-2)\n(unload-airplane p1 a2 l2-0)\n(load-truck p1 t2 l2-0)\n({fly-airplane a2 l2-0 l0-0)\n(unload-airplane p1 a2 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n",
            "ground_truth_plan": [
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-airplane p1 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(load-airplane p3 a2 l2-0)",
                "(unload-airplane p1 a2 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p1 t2 l2-2)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a2 l1-0)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(unload-airplane p2 a2 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p0 a2 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(unload-airplane p0 a2 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p0 t2 l2-2)",
                "(unload-airplane p1 a2 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(unload-airplane p1 a2 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 143,
            "example_instance_id": 142,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at p2 l1-1)\n    (at p3 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-2)\n        (at p2 l0-1)\n        (at p3 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-airplane p1 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(load-airplane p3 a2 l2-0)\n(unload-airplane p1 a2 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p1 t2 l2-2)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a2 l1-0)\n(fly-airplane a2 l1-0 l0-0)\n(unload-airplane p2 a2 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-2)\n    (at p2 l1-2)\n    (at p3 l1-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-2)\n        (at p2 l2-2)\n        (at p3 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p3 t1 l1-1)\n(unload-truck p2 t1 l1-1)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p1 t2 l2-2)\n(unload-truck p2 t2 l2-2)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p3 t1 l1-1)",
                "(unload-truck p2 t1 l1-1)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p1 t2 l2-2)",
                "(unload-truck p2 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 144,
            "example_instance_id": 143,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p4-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-2)\n    (at p2 l1-2)\n    (at p3 l1-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-2)\n        (at p2 l2-2)\n        (at p3 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-2)\n    (at p2 l1-2)\n    (at p3 l1-1)\n    (at p4 l1-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l2-2)\n        (at p2 l1-1)\n        (at p3 l0-1)\n        (at p4 l2-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-0)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l0-1 c0)\n(unload-truck p3 t1 l0-1)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p0 t2 l2-2)\n(load-truck p4 t2 l2-2)\n(load-truck p1 t2 l2-2)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p4 t1 l1-1)",
                "(load-truck p3 t1 l1-1)",
                "(unload-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(unload-truck p3 t1 l1-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p4 t2 l2-2)",
                "(unload-truck p0 t2 l2-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-0)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l0-1 c0)",
                "(unload-truck p3 t1 l0-1)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p0 t2 l2-2)",
                "(load-truck p4 t2 l2-2)",
                "(load-truck p1 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 145,
            "example_instance_id": 144,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l1-0)\n    (at p1 l2-2)\n    (at p2 l1-2)\n    (at p3 l1-1)\n    (at p4 l1-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l2-2)\n        (at p2 l1-1)\n        (at p3 l0-1)\n        (at p4 l2-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-2 l0-0 c0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p4 t1 l1-1)\n(load-truck p3 t1 l1-1)\n(unload-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(unload-truck p3 t1 l1-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p4 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(load-truck p4 t2 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p4 t2 l2-2)\n(unload-truck p0 t2 l2-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at p1 l1-1)\n    (at p2 l0-1)\n    (at p3 l2-2)\n    (at p4 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-1)\n        (at p2 l2-2)\n        (at p3 l1-0)\n        (at p4 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p4 t0 l0-0)\n(unload-truck p2 t0 l0-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p1 t1 l1-1)\n(fly-airplane a0 l1-0 l2-0)\n(unload-truck p1 t1 l2-1)\n(load-airplane p3 a0 l2-2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(load-truck p2 t0 l0-0)\n(unload-truck p4 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(load-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p1 a0 l1-0)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p3 t2 l2-2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p4 a0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-truck p2 t0 l0-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p1 t1 l1-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-truck p1 t1 l2-1)",
                "(load-airplane p3 a0 l2-2)",
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-truck p4 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 146,
            "example_instance_id": 145,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at p1 l1-1)\n    (at p2 l0-1)\n    (at p3 l2-2)\n    (at p4 l0-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-1)\n        (at p2 l2-2)\n        (at p3 l1-0)\n        (at p4 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p1 a0 l1-0)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p3 t2 l2-2)\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p3 a0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p4 a0 l0-0)\n(load-airplane p2 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l0-2)\n    (at p2 l2-2)\n    (at p3 l0-1)\n    (at p4 l2-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l2-1)\n        (at p4 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p0 a0 l2-1)\n(load-airplane p2 a0 l2-2)\n(unload-airplane p1 a0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p0 a0 l2-1)",
                "(load-airplane p2 a0 l2-2)",
                "(unload-airplane p1 a0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)"
            ],
            "correct": false,
            "instance_id": 147,
            "example_instance_id": 146,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l0-2)\n    (at p2 l2-2)\n    (at p3 l0-1)\n    (at p4 l2-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l2-1)\n        (at p4 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l2-0)\n    (at p2 l2-0)\n    (at p3 l1-2)\n    (at p4 l0-0)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l2-1)\n        (at p4 l2-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(fly-airplane a0 l2-0 l0-0)\n(load-truck p0 t0 l0-0)\n(load-truck p4 t0 l0-0)\n(unload-truck p4 t0 l0-0)\n(load-airplane p4 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-truck p2 t2 l2-0)\n(unload-airplane p1 a0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l2-1 c2)\n(unload-truck p3 t1 l2-1)\n(drive-truck t2 l2-0 l2-2 c2)\n(load-truck p4 t2 l2-0)\n(unload-truck p4 t2 l2-2)\n",
            "ground_truth_plan": [
                "(load-airplane p1 a0 l2-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p4 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p4 t2 l2-2)"
            ],
            "extracted_llm_plan": [
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-truck p4 t0 l0-0)",
                "(load-airplane p4 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l2-1 c2)",
                "(unload-truck p3 t1 l2-1)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(load-truck p4 t2 l2-0)",
                "(unload-truck p4 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 148,
            "example_instance_id": 147,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l2-0)\n    (at p2 l2-0)\n    (at p3 l1-2)\n    (at p4 l0-0)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l2-1)\n        (at p4 l2-2)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a0 l2-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p4 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(load-truck p4 t2 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p4 t2 l2-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l2-0)\n    (at p2 l2-0)\n    (at p3 l1-2)\n    (at p4 l0-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l2-1)\n        (at p4 l2-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p1 a0 l2-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p4 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(load-truck p4 t2 l2-0)\n(load-airplane p2 a1 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p4 t2 l2-2)\n",
            "ground_truth_plan": [
                "(load-airplane p1 a1 l2-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p4 t2 l2-2)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p1 a0 l2-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p4 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p4 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 149,
            "example_instance_id": 148,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l2-0)\n    (at p2 l2-0)\n    (at p3 l1-2)\n    (at p4 l0-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l2-1)\n        (at p4 l2-2)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a1 l2-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p4 a1 l0-0)\n(unload-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(load-airplane p3 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n(load-truck p4 t2 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p4 t2 l2-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-2)\n    (at p2 l2-2)\n    (at p3 l0-1)\n    (at p4 l2-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-0)\n        (at p2 l1-1)\n        (at p3 l2-1)\n        (at p4 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l2-0 c1)\n(unload-truck p1 t1 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(load-airplane p2 a1 l1-0)\n(unload-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l1-1)\n(unload-airplane p2 a1 l1-1)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p4 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-airplane p1 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l2-0 c1)",
                "(unload-truck p1 t1 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l1-1)",
                "(unload-airplane p2 a1 l1-1)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)"
            ],
            "correct": false,
            "instance_id": 150,
            "example_instance_id": 149,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-2)\n    (at p2 l2-2)\n    (at p3 l0-1)\n    (at p4 l2-1)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-0)\n        (at p2 l1-1)\n        (at p3 l2-1)\n        (at p4 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(unload-truck p2 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-airplane p4 a1 l2-0)\n(load-airplane p2 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p3 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(unload-airplane p1 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-2)\n    (at p2 l1-0)\n    (at p3 l2-2)\n    (at p4 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-2)\n        (at p2 l0-2)\n        (at p3 l2-0)\n        (at p4 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-truck p3 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n(load-airplane p3 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(unload-airplane p3 a1 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(load-airplane p1 a1 l1-1)\n(fly-airplane a1 l1-1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p1 t2 l2-2)\n",
            "ground_truth_plan": [
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p2 a1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(load-truck p3 t2 l2-2)",
                "(unload-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-truck p3 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)",
                "(load-airplane p3 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-airplane p1 a1 l1-1)",
                "(fly-airplane a1 l1-1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p1 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 151,
            "example_instance_id": 150,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-2)\n    (at p2 l1-0)\n    (at p3 l2-2)\n    (at p4 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-2)\n        (at p2 l0-2)\n        (at p3 l2-0)\n        (at p4 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p2 a1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-truck p1 t2 l2-0)\n(load-airplane p4 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t2 l2-0 l2-2 c2)\n(load-truck p3 t2 l2-2)\n(unload-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at p2 l1-2)\n    (at p3 l2-0)\n    (at p4 l1-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l1-1)\n        (at p3 l1-0)\n        (at p4 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-1)\n(unload-airplane p0 a0 l0-1)\n(unload-airplane p1 a0 l0-1)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(fly-airplane a0 l0-1 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(load-airplane p3 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-airplane p2 a0 l1-1)\n(fly-airplane a0 l1-1 l2-0)\n(unload-airplane p0 a0 l2-0)\n(unload-airplane p2 a0 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p4 t1 l1-1)",
                "(load-airplane p3 a1 l2-0)",
                "(load-airplane p1 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(load-airplane p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-1)",
                "(unload-airplane p0 a0 l0-1)",
                "(unload-airplane p1 a0 l0-1)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(fly-airplane a0 l0-1 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(load-airplane p3 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-airplane p2 a0 l1-1)",
                "(fly-airplane a0 l1-1 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(unload-airplane p2 a0 l2-0)"
            ],
            "correct": false,
            "instance_id": 152,
            "example_instance_id": 151,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l1-0)\n    (at p2 l1-2)\n    (at p3 l2-0)\n    (at p4 l1-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l1-1)\n        (at p3 l1-0)\n        (at p4 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t1 l1-1)\n(load-airplane p3 a1 l2-0)\n(load-airplane p1 a0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(load-airplane p4 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-0)\n    (at p1 l2-2)\n    (at p2 l1-0)\n    (at p3 l1-1)\n    (at p4 l1-2)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(load-airplane p0 a1 l2-0)\n(load-airplane p1 a1 l2-2)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(unload-airplane p1 a1 l1-0)\n(unload-airplane p3 a1 l1-1)\n(load-airplane p4 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(load-truck p3 t2 l1-1)\n(drive-truck t2 l1-1 l1-2 c1)\n(unload-truck p3 t2 l1-2)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p4 t1 l1-2)",
                "(unload-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(unload-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(load-airplane p4 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(load-airplane p0 a1 l2-0)",
                "(load-airplane p1 a1 l2-2)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(unload-airplane p1 a1 l1-0)",
                "(unload-airplane p3 a1 l1-1)",
                "(load-airplane p4 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(load-truck p3 t2 l1-1)",
                "(drive-truck t2 l1-1 l1-2 c1)",
                "(unload-truck p3 t2 l1-2)"
            ],
            "correct": false,
            "instance_id": 153,
            "example_instance_id": 152,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-0)\n    (at p1 l2-2)\n    (at p2 l1-0)\n    (at p3 l1-1)\n    (at p4 l1-2)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-0)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l0-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p4 t1 l1-2)\n(unload-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p1 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(unload-airplane p0 a1 l1-0)\n(load-truck p0 t1 l1-0)\n(unload-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(load-airplane p4 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l2-2)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at p4 l0-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-2)\n        (at p2 l0-0)\n        (at p3 l1-1)\n        (at p4 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a1 l1-0)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-airplane p3 a0 l0-0)\n(load-airplane p4 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l2-1 c2)\n(unload-truck p4 t0 l2-1)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l0-2 c0)\n(unload-truck p1 t2 l0-2)\n",
            "ground_truth_plan": [
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-truck p2 t1 l1-1)",
                "(load-airplane p4 a0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p3 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(load-airplane p4 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l2-1 c2)",
                "(unload-truck p4 t0 l2-1)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l0-2 c0)",
                "(unload-truck p1 t2 l0-2)"
            ],
            "correct": false,
            "instance_id": 154,
            "example_instance_id": 153,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l2-2)\n    (at p2 l1-1)\n    (at p3 l0-0)\n    (at p4 l0-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l0-2)\n        (at p2 l0-0)\n        (at p3 l1-1)\n        (at p4 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-truck p2 t1 l1-1)\n(load-airplane p4 a0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(load-truck p4 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p3 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(load-airplane p2 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l1-2)\n    (at p1 l1-1)\n    (at p2 l2-2)\n    (at p3 l2-2)\n    (at p4 l1-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l2-2)\n        (at p2 l0-2)\n        (at p3 l1-2)\n        (at p4 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p4 a1 l1-0)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(unload-truck p1 t1 l1-2)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n(load-truck p4 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(unload-airplane p1 a1 l2-0)\n(load-truck p2 t2 l2-2)\n(load-truck p3 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(load-airplane p2 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(unload-airplane p0 a1 l0-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(load-airplane p3 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p3 t2 l2-2)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p4 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(load-truck p3 t2 l2-2)",
                "(load-truck p2 t2 l2-2)",
                "(unload-truck p1 t2 l2-2)",
                "(unload-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p4 a1 l1-0)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p0 t1 l1-2)",
                "(unload-truck p1 t1 l1-2)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p2 t2 l2-2)",
                "(load-truck p3 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(load-airplane p3 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p3 t2 l2-2)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 155,
            "example_instance_id": 154,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l1-2)\n    (at p1 l1-1)\n    (at p2 l2-2)\n    (at p3 l2-2)\n    (at p4 l1-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l2-2)\n        (at p2 l0-2)\n        (at p3 l1-2)\n        (at p4 l1-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p4 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-airplane p1 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-truck p1 t2 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(load-truck p3 t2 l2-2)\n(load-truck p2 t2 l2-2)\n(unload-truck p1 t2 l2-2)\n(unload-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-airplane p3 a1 l2-0)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l1-2)\n    (at p2 l1-2)\n    (at p3 l0-2)\n    (at p4 l2-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-0)\n        (at p3 l1-1)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p4 a0 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p3 t0 l0-2)\n(unload-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t0 l1-1)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p2 t1 l1-0)\n(unload-truck p0 t0 l0-2)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p4 t1 l1-0)\n(unload-truck p3 t1 l1-1)\n(unload-truck p4 t1 l1-0)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(load-airplane p4 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p3 t0 l0-2)",
                "(unload-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p2 t1 l1-2)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p3 t0 l0-2)",
                "(unload-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t0 l1-1)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p2 t1 l1-0)",
                "(unload-truck p0 t0 l0-2)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p4 t1 l1-0)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p4 t1 l1-0)"
            ],
            "correct": false,
            "instance_id": 156,
            "example_instance_id": 155,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l1-2)\n    (at p2 l1-2)\n    (at p3 l0-2)\n    (at p4 l2-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-1)\n        (at p2 l1-0)\n        (at p3 l1-1)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(load-airplane p4 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p3 t0 l0-2)\n(unload-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p3 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p4 a1 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p2 t1 l1-2)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l2-0)\n    (at p2 l0-0)\n    (at p3 l0-0)\n    (at p4 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-1)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p2 t0 l0-0)\n(load-truck p3 t0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(unload-truck p4 t0 l0-1)\n(load-airplane p4 a1 l0-1)\n(fly-airplane a1 l0-0 l2-0)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p0 t1 l1-2)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(unload-airplane p4 a1 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-truck p3 t0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p2 t0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(unload-truck p4 t0 l0-1)",
                "(load-airplane p4 a1 l0-1)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p0 t1 l1-2)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(unload-airplane p4 a1 l2-1)"
            ],
            "correct": false,
            "instance_id": 157,
            "example_instance_id": 156,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l2-0)\n    (at p2 l0-0)\n    (at p3 l0-0)\n    (at p4 l0-0)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l0-1)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(load-truck p3 t0 l0-0)\n(load-truck p2 t0 l0-0)\n(load-airplane p4 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n(load-truck p4 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-2)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l0-2)\n    (at p4 l2-2)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-1)\n        (at p2 l1-2)\n        (at p3 l0-0)\n        (at p4 l0-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-2)\n(load-truck p3 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p1 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p1 t1 l1-2)\n(unload-truck p2 t1 l1-2)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(load-airplane p4 a1 l2-2)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p4 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(load-truck p3 t0 l0-2)",
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(unload-truck p0 t1 l1-2)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(unload-truck p4 t2 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-2)",
                "(load-truck p3 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p1 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p1 t1 l1-2)",
                "(unload-truck p2 t1 l1-2)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(load-airplane p4 a1 l2-2)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)"
            ],
            "correct": false,
            "instance_id": 158,
            "example_instance_id": 157,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-2)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l0-2)\n    (at p4 l2-2)\n    (at a0 l0-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-1)\n        (at p2 l1-2)\n        (at p3 l0-0)\n        (at p4 l0-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p4 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(load-truck p3 t0 l0-2)\n(load-truck p0 t0 l0-2)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p1 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(unload-truck p0 t1 l1-2)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(unload-truck p4 t2 l2-0)\n(load-airplane p4 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-0)\n    (at p2 l2-2)\n    (at p3 l0-1)\n    (at p4 l1-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-1)\n        (at p2 l1-0)\n        (at p3 l1-1)\n        (at p4 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t1 l1-0)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(fly-airplane a1 l2-0 l1-0)\n(unload-truck p0 t2 l1-0)\n(load-airplane p0 a1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p3 t0 l0-1)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l1-1 c1)\n(unload-truck p3 t0 l1-1)\n(unload-truck p2 t0 l1-1)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l2-1 c2)\n(unload-truck p1 t1 l2-1)\n(unload-truck p4 t1 l2-1)\n",
            "ground_truth_plan": [
                "(load-airplane p1 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-airplane p2 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t1 l1-0)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-truck p0 t2 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p3 t0 l0-1)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-1 c1)",
                "(unload-truck p3 t0 l1-1)",
                "(unload-truck p2 t0 l1-1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l2-1 c2)",
                "(unload-truck p1 t1 l2-1)",
                "(unload-truck p4 t1 l2-1)"
            ],
            "correct": false,
            "instance_id": 159,
            "example_instance_id": 158,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-0)\n    (at p2 l2-2)\n    (at p3 l0-1)\n    (at p4 l1-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-1)\n        (at p2 l1-0)\n        (at p3 l1-1)\n        (at p4 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-airplane p1 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-airplane p4 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-airplane p2 a0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-airplane p2 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l0-2)\n    (at p1 l0-0)\n    (at p2 l0-2)\n    (at p3 l2-2)\n    (at p4 l2-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-2)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p1 t2 l2-2)\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-airplane p4 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(load-airplane p3 a0 l1-1)\n(fly-airplane a0 l1-1 l2-0)\n(unload-airplane p4 a0 l2-0)\n(load-truck p4 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n(load-airplane p3 a1 l1-2)\n(fly-airplane a1 l1-2 l1-0)\n(unload-airplane p3 a1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p2 t0 l0-2)",
                "(load-truck p0 t0 l0-2)",
                "(load-airplane p1 a1 l0-0)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(unload-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p1 t2 l2-2)",
                "(load-airplane p4 a1 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-airplane p3 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p1 t2 l2-2)",
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-airplane p3 a0 l1-1)",
                "(fly-airplane a0 l1-1 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)",
                "(load-airplane p3 a1 l1-2)",
                "(fly-airplane a1 l1-2 l1-0)",
                "(unload-airplane p3 a1 l1-0)"
            ],
            "correct": false,
            "instance_id": 160,
            "example_instance_id": 159,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l0-2)\n    (at p1 l0-0)\n    (at p2 l0-2)\n    (at p3 l2-2)\n    (at p4 l2-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-2)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p2 t0 l0-2)\n(load-truck p0 t0 l0-2)\n(load-airplane p1 a1 l0-0)\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p4 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p2 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(unload-truck p3 t2 l2-0)\n(load-truck p1 t2 l2-0)\n(unload-truck p4 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p1 t2 l2-2)\n(load-airplane p4 a1 l2-0)\n(load-airplane p3 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p4 a1 l1-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-airplane p3 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l2-1)\n    (at p3 l2-0)\n    (at p4 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-0)\n        (at p2 l1-1)\n        (at p3 l1-1)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p3 t2 l2-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p3 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p3 t1 l1-0)\n(unload-truck p3 t1 l1-1)\n(unload-truck p2 t1 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p2 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p3 t2 l2-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p3 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p3 t1 l1-0)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p2 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 161,
            "example_instance_id": 160,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l2-1)\n    (at p3 l2-0)\n    (at p4 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-0)\n        (at p2 l1-1)\n        (at p3 l1-1)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p3 t1 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p2 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l2-1)\n    (at p3 l2-0)\n    (at p4 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-0)\n        (at p2 l1-1)\n        (at p3 l1-1)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l1-0)\n(load-truck p3 t1 l1-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p4 t1 l1-1)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p3 a0 l1-1)\n(unload-airplane p2 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l2-0)",
                "(load-airplane p4 a2 l2-0)",
                "(load-airplane p3 a2 l2-0)",
                "(unload-airplane p0 a2 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p4 a2 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(unload-airplane p2 a2 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p2 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p4 t1 l1-1)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p3 a0 l1-1)",
                "(unload-airplane p2 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 162,
            "example_instance_id": 161,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l0-1)\n    (at p2 l2-1)\n    (at p3 l2-0)\n    (at p4 l2-0)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l0-0)\n        (at p2 l1-1)\n        (at p3 l1-1)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l2-0)\n(load-airplane p4 a2 l2-0)\n(load-airplane p3 a2 l2-0)\n(unload-airplane p0 a2 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p4 a2 l1-0)\n(unload-airplane p3 a2 l1-0)\n(load-truck p3 t1 l1-0)\n(unload-airplane p2 a2 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p2 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l2-2)\n    (at p3 l1-1)\n    (at p4 l0-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l1-0)\n        (at p2 l1-2)\n        (at p3 l0-1)\n        (at p4 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n(load-airplane p0 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p0 t2 l2-2)\n(unload-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p2 a0 l1-2)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p3 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-airplane p0 a1 l1-0)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p3 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p0 t2 l2-2)",
                "(load-airplane p2 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p2 a2 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)",
                "(load-airplane p0 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p0 t2 l2-2)",
                "(unload-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p2 a0 l1-2)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p3 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 163,
            "example_instance_id": 162,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l1-1)\n    (at p2 l2-2)\n    (at p3 l1-1)\n    (at p4 l0-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l1-0)\n        (at p2 l1-2)\n        (at p3 l0-1)\n        (at p4 l0-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p2 t2 l2-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-airplane p0 a1 l1-0)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p3 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(load-airplane p3 a1 l1-0)\n(drive-truck t2 l2-2 l2-0 c2)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(unload-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p0 t2 l2-2)\n(load-airplane p2 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p2 a2 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l1-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l1-2)\n        (at p3 l1-0)\n        (at p4 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(load-truck p2 t2 l2-1)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p1 a1 l2-0)\n(unload-truck p0 t2 l2-0)\n(unload-truck p2 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(load-airplane p3 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(load-truck p3 t0 l0-0)\n(unload-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(unload-airplane p3 a1 l1-0)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(load-airplane p4 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-airplane p1 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(unload-airplane p1 a2 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p3 t2 l2-1)",
                "(load-truck p2 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p4 t1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(load-truck p2 t2 l2-1)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p1 a1 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(load-airplane p3 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(load-airplane p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)"
            ],
            "correct": false,
            "instance_id": 164,
            "example_instance_id": 163,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l1-0)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-1)\n        (at p2 l1-2)\n        (at p3 l1-0)\n        (at p4 l1-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-2 l0-0 c0)\n(load-airplane p1 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(unload-airplane p1 a2 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p3 t2 l2-1)\n(load-truck p2 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(unload-truck p2 t2 l2-0)\n(load-airplane p3 a1 l2-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p3 a1 l1-0)\n(unload-airplane p2 a1 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p4 t1 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l2-1)\n    (at p2 l0-0)\n    (at p3 l1-2)\n    (at p4 l0-2)\n    (at a0 l0-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l1-1)\n        (at p4 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(load-truck p4 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(unload-truck p2 t0 l0-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(load-truck p0 t1 l2-1)\n(drive-truck t1 l2-1 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n(load-airplane p4 a0 l0-0)\n(fly-airplane a0 l0-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p1 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p4 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p4 t0 l0-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(unload-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-truck p4 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-truck p2 t0 l0-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(load-truck p0 t1 l2-1)",
                "(drive-truck t1 l2-1 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)",
                "(load-airplane p4 a0 l0-0)",
                "(fly-airplane a0 l0-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)"
            ],
            "correct": false,
            "instance_id": 165,
            "example_instance_id": 164,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l2-1)\n    (at p2 l0-0)\n    (at p3 l1-2)\n    (at p4 l0-2)\n    (at a0 l0-0)\n    (at a1 l2-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l1-1)\n        (at p4 l0-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p1 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p4 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p4 t0 l0-0)\n(unload-truck p0 t2 l2-0)\n(load-airplane p1 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(unload-airplane p0 a1 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(unload-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l1-1)\n    (at p1 l2-2)\n    (at p2 l0-2)\n    (at p3 l2-2)\n    (at p4 l0-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l2-1)\n        (at p2 l1-1)\n        (at p3 l0-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t2 l2-2)\n(load-truck p3 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-airplane p1 a1 l2-1)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p2 t0 l0-2)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-2 l1-1 c1)\n(unload-truck p2 t0 l1-1)\n(drive-truck t0 l1-1 l1-0 c1)\n(unload-truck p4 t0 l1-0)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-2)",
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(load-airplane p4 a2 l0-0)",
                "(load-airplane p3 a1 l2-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p2 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p2 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p4 a2 l1-0)",
                "(unload-airplane p2 a2 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t2 l2-2)",
                "(load-truck p3 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-airplane p1 a1 l2-1)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p2 t0 l0-2)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-2 l1-1 c1)",
                "(unload-truck p2 t0 l1-1)",
                "(drive-truck t0 l1-1 l1-0 c1)",
                "(unload-truck p4 t0 l1-0)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "correct": false,
            "instance_id": 166,
            "example_instance_id": 165,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l1-1)\n    (at p1 l2-2)\n    (at p2 l0-2)\n    (at p3 l2-2)\n    (at p4 l0-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l2-1)\n        (at p2 l1-1)\n        (at p3 l0-0)\n        (at p4 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-2)\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(load-airplane p4 a2 l0-0)\n(load-airplane p3 a1 l2-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p2 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p2 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p4 a2 l1-0)\n(unload-airplane p2 a2 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l0-0)\n    (at p3 l2-2)\n    (at p4 l1-2)\n    (at a0 l1-0)\n    (at a1 l0-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-1)\n        (at p2 l1-2)\n        (at p3 l2-1)\n        (at p4 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-2)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-airplane p4 a2 l1-0)\n(load-airplane p0 a2 l1-0)\n(fly-airplane a2 l1-0 l0-0)\n(unload-airplane p4 a2 l0-0)\n(unload-airplane p0 a2 l0-0)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p1 a1 l0-0)\n(print 'load-truck p2 t1 l1-2)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(load-airplane p2 a0 l1-0)\n(load-truck p3 t2 l2-2)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-airplane p2 a2 l2-0)\n(load-airplane p0 a2 l2-0)\n(load-airplane p1 a2 l2-0)\n(fly-airplane a2 l2-0 l1-1)\n(unload-airplane p0 a2 l1-1)\n(unload-airplane p1 a2 l1-1)\n(unload-airplane p2 a2 l1-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l1-2 c1)\n(unload-truck p4 t0 l1-2)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(load-truck p3 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-truck p1 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-2)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p4 a2 l1-0)",
                "(load-airplane p0 a2 l1-0)",
                "(fly-airplane a2 l1-0 l0-0)",
                "(unload-airplane p4 a2 l0-0)",
                "(unload-airplane p0 a2 l0-0)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(load-airplane p2 a0 l1-0)",
                "(load-truck p3 t2 l2-2)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-airplane p2 a2 l2-0)",
                "(load-airplane p0 a2 l2-0)",
                "(load-airplane p1 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-1)",
                "(unload-airplane p0 a2 l1-1)",
                "(unload-airplane p1 a2 l1-1)",
                "(unload-airplane p2 a2 l1-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l1-2 c1)",
                "(unload-truck p4 t0 l1-2)"
            ],
            "correct": false,
            "instance_id": 167,
            "example_instance_id": 166,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p5-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l0-0)\n    (at p3 l2-2)\n    (at p4 l1-2)\n    (at a0 l1-0)\n    (at a1 l0-0)\n    (at a2 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-1)\n        (at p2 l1-2)\n        (at p3 l2-1)\n        (at p4 l1-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p2 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-truck p1 t2 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(load-truck p3 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(unload-truck p1 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l0-0)\n    (at p3 l2-2)\n    (at p4 l1-2)\n    (at p5 l2-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l1-2)\n        (at p2 l2-1)\n        (at p3 l1-2)\n        (at p4 l1-0)\n        (at p5 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p2 a0 l0-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p3 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p5 t1 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(unload-truck p5 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p4 t1 l1-2)\n(unload-truck p4 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(unload-airplane p2 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p4 t1 l1-2)",
                "(load-truck p0 t1 l1-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p5 t2 l2-1)",
                "(unload-truck p2 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p3 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)",
                "(unload-truck p1 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p3 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(unload-truck p5 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p4 t1 l1-2)",
                "(unload-truck p4 t1 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)"
            ],
            "correct": false,
            "instance_id": 168,
            "example_instance_id": 167,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-2)\n    (at p2 l0-0)\n    (at p3 l2-2)\n    (at p4 l1-2)\n    (at p5 l2-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l1-2)\n        (at p2 l2-1)\n        (at p3 l1-2)\n        (at p4 l1-0)\n        (at p5 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t1 l1-2)\n(load-truck p0 t1 l1-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-truck p1 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p5 t2 l2-1)\n(unload-truck p2 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p3 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(load-airplane p5 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n(unload-truck p1 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l0-0)\n    (at p3 l2-1)\n    (at p4 l0-2)\n    (at p5 l2-2)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l0-1)\n        (at p5 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-0)\n(load-airplane p2 a0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(unload-truck p4 t0 l0-2)\n(fly-airplane a0 l2-0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p5 t1 l1-2)\n(drive-truck t1 l1-2 l2-0 c2)\n(unload-truck p1 t1 l2-0)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p5 t2 l2-2)\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(unload-truck p1 t2 l2-1)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-airplane p5 a0 l0-0)\n(fly-airplane a0 l0-0 l1-1)\n(unload-airplane p5 a0 l1-1)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(load-truck p0 t0 l0-0)",
                "(load-airplane p5 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p4 t0 l0-2)",
                "(unload-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p3 t0 l0-1)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p5 t1 l1-2)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(unload-truck p4 t0 l0-2)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p5 t1 l1-2)",
                "(drive-truck t1 l1-2 l2-0 c2)",
                "(unload-truck p1 t1 l2-0)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p5 t2 l2-2)",
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-truck p1 t2 l2-1)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-airplane p5 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-1)",
                "(unload-airplane p5 a0 l1-1)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)"
            ],
            "correct": false,
            "instance_id": 169,
            "example_instance_id": 168,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l0-0)\n    (at p1 l1-1)\n    (at p2 l0-0)\n    (at p3 l2-1)\n    (at p4 l0-2)\n    (at p5 l2-2)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l0-1)\n        (at p5 l1-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(load-truck p0 t0 l0-0)\n(load-airplane p5 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p4 t0 l0-2)\n(unload-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(unload-truck p3 t0 l0-1)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p5 t1 l1-2)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l1-2)\n    (at p2 l2-0)\n    (at p3 l1-2)\n    (at p4 l2-1)\n    (at p5 l2-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l1-1)\n        (at p3 l0-0)\n        (at p4 l1-1)\n        (at p5 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p5 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p5 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p2 t2 l2-1)\n(load-airplane p4 a0 l2-1)\n(load-airplane p5 a0 l2-1)\n(load-airplane p2 a0 l2-1)\n(fly-airplane a0 l2-1 l1-0)\n(unload-airplane p4 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-truck p2 t1 l1-1)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(load-truck p5 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(unload-truck p5 t0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(load-truck p3 t1 l1-2)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-truck p2 t1 l1-1)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p5 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p5 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p5 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p5 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p2 t2 l2-1)",
                "(load-airplane p4 a0 l2-1)",
                "(load-airplane p5 a0 l2-1)",
                "(load-airplane p2 a0 l2-1)",
                "(fly-airplane a0 l2-1 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-truck p2 t1 l1-1)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(load-truck p5 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(unload-truck p5 t0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)"
            ],
            "correct": false,
            "instance_id": 170,
            "example_instance_id": 169,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l1-0)\n    (at p1 l1-2)\n    (at p2 l2-0)\n    (at p3 l1-2)\n    (at p4 l2-1)\n    (at p5 l2-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-0)\n        (at p2 l1-1)\n        (at p3 l0-0)\n        (at p4 l1-1)\n        (at p5 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(load-truck p3 t1 l1-2)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p5 a0 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(load-truck p4 t1 l1-0)\n(load-airplane p3 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-truck p2 t1 l1-1)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p5 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p5 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at p2 l1-0)\n    (at p3 l1-2)\n    (at p4 l1-0)\n    (at p5 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-0)\n        (at p2 l0-2)\n        (at p3 l2-1)\n        (at p4 l0-0)\n        (at p5 l0-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-truck p5 t1 l1-0)\n(load-airplane p4 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p5 t1 l0-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l0-2 c1)\n(unload-truck p2 t1 l0-2)\n(drive-truck t1 l0-2 l0-0 c1)\n(load-truck p1 t1 l0-0)\n(drive-truck t1 l0-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l2-1 c1)\n(unload-truck p3 t1 l2-1)\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(load-airplane p4 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p5 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(unload-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p3 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p5 t1 l0-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l0-2 c1)",
                "(unload-truck p2 t1 l0-2)",
                "(drive-truck t1 l0-2 l0-0 c1)",
                "(load-truck p1 t1 l0-0)",
                "(drive-truck t1 l0-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l2-1 c1)",
                "(unload-truck p3 t1 l2-1)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)"
            ],
            "correct": false,
            "instance_id": 171,
            "example_instance_id": 170,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-2)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at p2 l1-0)\n    (at p3 l1-2)\n    (at p4 l1-0)\n    (at p5 l1-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l0-0)\n        (at p2 l0-2)\n        (at p3 l2-1)\n        (at p4 l0-0)\n        (at p5 l0-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(load-airplane p4 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(unload-truck p3 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(load-airplane p5 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(unload-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p3 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-0)\n    (at p2 l0-1)\n    (at p3 l1-0)\n    (at p4 l1-0)\n    (at p5 l2-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l2-2)\n        (at p4 l0-2)\n        (at p5 l0-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p3 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(load-airplane p4 a0 l1-0)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p0 t2 l2-1)\n(load-truck p5 t2 l2-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p3 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n(unload-truck p4 t0 l0-2)\n(unload-truck p3 t0 l0-2)\n(unload-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p0 t2 l2-2)\n(load-truck p5 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(load-truck p0 t2 l2-0)\n(fly-airplane a0 l0-0 l2-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p5 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p4 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p3 t2 l2-2)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(load-truck p5 t0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(unload-truck p4 t0 l0-2)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p0 t2 l2-1)",
                "(load-truck p5 t2 l2-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)",
                "(unload-truck p4 t0 l0-2)",
                "(unload-truck p3 t0 l0-2)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p0 t2 l2-2)",
                "(load-truck p5 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(load-truck p0 t2 l2-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)"
            ],
            "correct": false,
            "instance_id": 172,
            "example_instance_id": 171,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-0)\n    (at p2 l0-1)\n    (at p3 l1-0)\n    (at p4 l1-0)\n    (at p5 l2-1)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l2-2)\n        (at p4 l0-2)\n        (at p5 l0-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p4 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p5 a0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p3 t2 l2-2)\n(unload-airplane p1 a0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(load-truck p5 t0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(unload-truck p4 t0 l0-2)\n(unload-airplane p0 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-0)\n    (at p2 l0-1)\n    (at p3 l1-0)\n    (at p4 l1-0)\n    (at p5 l2-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l2-2)\n        (at p4 l0-2)\n        (at p5 l0-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p5 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p4 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p5 a0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p3 t2 l2-2)\n(unload-airplane p1 a0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(load-truck p5 t0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(unload-truck p4 t0 l0-2)\n(unload-airplane p0 a0 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p4 a1 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p3 t2 l2-2)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p5 a1 l0-0)",
                "(load-truck p5 t0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(unload-truck p4 t0 l0-2)",
                "(unload-airplane p0 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p5 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p4 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p3 t2 l2-2)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(load-truck p5 t0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(unload-truck p4 t0 l0-2)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "correct": true,
            "instance_id": 173,
            "example_instance_id": 172,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-0)\n    (at p2 l0-1)\n    (at p3 l1-0)\n    (at p4 l1-0)\n    (at p5 l2-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l2-2)\n        (at p4 l0-2)\n        (at p5 l0-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p4 a1 l1-0)\n(load-airplane p3 a1 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p5 a1 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p3 t2 l2-2)\n(unload-airplane p1 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p5 a1 l0-0)\n(load-truck p5 t0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(unload-truck p4 t0 l0-2)\n(unload-airplane p0 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l2-1)\n    (at p2 l0-0)\n    (at p3 l1-2)\n    (at p4 l0-2)\n    (at p5 l2-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l0-1)\n        (at p5 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-airplane p0 a0 l1-0)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-airplane p3 a0 l1-0)\n(load-truck p5 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l1-0 c1)\n(unload-truck p2 t0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(unload-airplane p3 a0 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-1)",
                "(load-airplane p2 a1 l0-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p5 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(unload-truck p5 t2 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p5 t1 l1-2)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p4 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-airplane p0 a0 l1-0)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-airplane p3 a0 l1-0)",
                "(load-truck p5 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-0 c1)",
                "(unload-truck p2 t0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(unload-airplane p3 a0 l2-0)"
            ],
            "correct": false,
            "instance_id": 174,
            "example_instance_id": 173,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l2-1)\n    (at p2 l0-0)\n    (at p3 l1-2)\n    (at p4 l0-2)\n    (at p5 l2-1)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l0-1)\n        (at p5 l1-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t1 l1-1)\n(load-airplane p2 a1 l0-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p0 t1 l1-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p5 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n(unload-truck p5 t2 l2-0)\n(load-airplane p5 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p5 t1 l1-2)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p4 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-1)\n    (at p2 l1-1)\n    (at p3 l2-0)\n    (at p4 l1-2)\n    (at p5 l0-2)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-1)\n        (at p3 l0-0)\n        (at p4 l1-1)\n        (at p5 l2-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p5 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(unload-truck p2 t1 l1-1)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p5 t2 l2-2)\n(fly-airplane a1 l0-0 l0-1)\n(load-airplane p2 a1 l0-1)\n(fly-airplane a1 l0-1 l1-1)\n(unload-airplane p2 a1 l1-1)\n(load-airplane p1 a1 l1-1)\n(fly-airplane a1 l1-1 l0-0)\n(unload-airplane p1 a1 l0-0)\n",
            "ground_truth_plan": [
                "(load-truck p5 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p1 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t0 l0-0)",
                "(load-airplane p5 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p5 a1 l2-0)",
                "(load-truck p5 t2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p5 t2 l2-2)",
                "(load-airplane p3 a1 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(unload-airplane p0 a1 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p5 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(unload-truck p2 t1 l1-1)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p5 t2 l2-2)",
                "(fly-airplane a1 l0-0 l0-1)",
                "(load-airplane p2 a1 l0-1)",
                "(fly-airplane a1 l0-1 l1-1)",
                "(unload-airplane p2 a1 l1-1)",
                "(load-airplane p1 a1 l1-1)",
                "(fly-airplane a1 l1-1 l0-0)",
                "(unload-airplane p1 a1 l0-0)"
            ],
            "correct": false,
            "instance_id": 175,
            "example_instance_id": 174,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-1)\n    (at p2 l1-1)\n    (at p3 l2-0)\n    (at p4 l1-2)\n    (at p5 l0-2)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l1-1)\n        (at p2 l0-1)\n        (at p3 l0-0)\n        (at p4 l1-1)\n        (at p5 l2-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p1 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t0 l0-0)\n(load-airplane p5 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p5 a1 l2-0)\n(load-truck p5 t2 l2-0)\n(unload-truck p1 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p5 t2 l2-2)\n(load-airplane p3 a1 l2-0)\n(load-airplane p1 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(unload-airplane p0 a1 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l0-0)\n    (at p3 l0-1)\n    (at p4 l2-0)\n    (at p5 l0-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-1)\n        (at p2 l1-0)\n        (at p3 l1-1)\n        (at p4 l1-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p5 t0 l0-0)\n(drive-truck t0 l0-0 l1-1 c1)\n(load-truck p2 t0 l0-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t0 l1-1)\n(unload-truck p3 t1 l1-1)\n(load-airplane p0 a0 l2-1)\n(load-airplane p1 a1 l2-0)\n(load-airplane p4 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(load-truck p4 t1 l1-0)\n(unload-airplane p1 a1 l1-0)\n(unload-airplane p4 a1 l1-0)\n(load-truck p1 t1 l1-0)\n(fly-airplane a0 l2-1 l0-1)\n(unload-airplane p0 a0 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p5 a1 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p5 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-1 c1)",
                "(load-truck p2 t0 l0-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t0 l1-1)",
                "(unload-truck p3 t1 l1-1)",
                "(load-airplane p0 a0 l2-1)",
                "(load-airplane p1 a1 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(fly-airplane a0 l2-1 l0-1)",
                "(unload-airplane p0 a0 l0-1)"
            ],
            "correct": false,
            "instance_id": 176,
            "example_instance_id": 175,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l0-0)\n    (at p3 l0-1)\n    (at p4 l2-0)\n    (at p5 l0-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-1)\n        (at p2 l1-0)\n        (at p3 l1-1)\n        (at p4 l1-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p4 a1 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p5 a1 l0-0)\n(load-airplane p2 a1 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p3 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(load-truck p5 t1 l1-0)\n(unload-airplane p4 a1 l1-0)\n(unload-airplane p3 a1 l1-0)\n(load-truck p3 t1 l1-0)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-2)\n    (at p1 l2-0)\n    (at p2 l0-0)\n    (at p3 l0-1)\n    (at p4 l0-2)\n    (at p5 l0-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-2)\n        (at p2 l1-2)\n        (at p3 l2-2)\n        (at p4 l0-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p0 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(load-truck p5 t0 l0-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p5 t0 l0-1)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p0 t1 l1-1)\n(unload-truck p3 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(load-airplane p1 a1 l2-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-airplane p4 a1 l0-2)\n(unload-truck p2 t1 l1-2)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p4 a1 l1-0)\n(load-truck p5 t1 l1-1)\n(unload-airplane p1 a1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p1 t1 l1-2)\n(fly-airplane a1 l1-0 l2-0)\n(unload-truck p5 t1 l1-1)\n(load-airplane p2 a0 l1-0)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(unload-truck p1 t1 l1-2)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p5 a0 l1-0)\n(load-truck p1 t1 l1-2)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a1 l0-0)\n(unload-airplane p4 a1 l0-0)\n(unload-airplane p5 a0 l2-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p5 t1 l1-1)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l2-2 c2)\n(unload-truck p2 t1 l2-2)\n(unload-truck p5 t1 l2-2)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p2 a0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p5 t0 l0-1)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p4 t0 l0-2)",
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)",
                "(unload-truck p4 t0 l0-0)",
                "(unload-truck p3 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p5 a0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p3 t2 l2-2)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(unload-truck p1 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p0 t0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(load-truck p5 t0 l0-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p5 t0 l0-1)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p0 t1 l1-1)",
                "(unload-truck p3 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(load-airplane p1 a1 l2-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-airplane p4 a1 l0-2)",
                "(unload-truck p2 t1 l1-2)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(load-truck p5 t1 l1-1)",
                "(unload-airplane p1 a1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p1 t1 l1-2)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-truck p5 t1 l1-1)",
                "(load-airplane p2 a0 l1-0)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(unload-truck p1 t1 l1-2)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p5 a0 l1-0)",
                "(load-truck p1 t1 l1-2)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(unload-airplane p5 a0 l2-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p5 t1 l1-1)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l2-2 c2)",
                "(unload-truck p2 t1 l2-2)",
                "(unload-truck p5 t1 l2-2)"
            ],
            "correct": false,
            "instance_id": 177,
            "example_instance_id": 176,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l0-2)\n    (at p1 l2-0)\n    (at p2 l0-0)\n    (at p3 l0-1)\n    (at p4 l0-2)\n    (at p5 l0-1)\n    (at a0 l0-0)\n    (at a1 l1-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l1-2)\n        (at p2 l1-2)\n        (at p3 l2-2)\n        (at p4 l0-0)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p2 a0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p5 t0 l0-1)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p4 t0 l0-2)\n(load-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n(unload-truck p4 t0 l0-0)\n(unload-truck p3 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(load-airplane p5 a0 l0-0)\n(load-airplane p3 a0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p3 t2 l2-2)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(load-truck p5 t1 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p2 t1 l1-0)\n(unload-airplane p1 a0 l1-0)\n(load-truck p1 t1 l1-0)\n(unload-airplane p0 a0 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(unload-truck p1 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-2)\n    (at p1 l1-2)\n    (at p2 l2-0)\n    (at p3 l0-2)\n    (at p4 l0-0)\n    (at p5 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l0-1)\n        (at p3 l1-0)\n        (at p4 l0-2)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t2 l2-2 l2-0 c2)\n(load-truck p0 t2 l2-0)\n(load-truck p5 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-airplane p2 a2 l2-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p1 t1 l1-2)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(load-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(unload-truck p1 t1 l1-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p0 a2 l1-0)\n(load-airplane p3 a2 l0-2)\n(fly-airplane a2 l0-2 l1-0)\n(unload-airplane p3 a2 l1-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-airplane p4 a1 l0-0)\n(fly-airplane a1 l0-0 l0-2)\n(unload-airplane p4 a1 l0-2)\n(load-airplane p2 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p2 a2 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)",
                "(load-truck p3 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(unload-truck p3 t0 l0-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(unload-airplane p3 a1 l1-0)",
                "(unload-airplane p0 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(load-truck p0 t2 l2-0)",
                "(load-truck p5 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-airplane p2 a2 l2-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p1 t1 l1-2)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(load-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(unload-truck p1 t1 l1-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p0 a2 l1-0)",
                "(load-airplane p3 a2 l0-2)",
                "(fly-airplane a2 l0-2 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-airplane p4 a1 l0-0)",
                "(fly-airplane a1 l0-0 l0-2)",
                "(unload-airplane p4 a1 l0-2)",
                "(load-airplane p2 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p2 a2 l1-0)"
            ],
            "correct": false,
            "instance_id": 178,
            "example_instance_id": 177,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-2)\n    (at p1 l1-2)\n    (at p2 l2-0)\n    (at p3 l0-2)\n    (at p4 l0-0)\n    (at p5 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l2-0)\n        (at p2 l0-1)\n        (at p3 l1-0)\n        (at p4 l0-2)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n(load-truck p3 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t1 l1-0)\n(load-airplane p1 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p5 a1 l2-0)\n(load-airplane p2 a1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(unload-truck p3 t0 l0-0)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p3 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(unload-airplane p3 a1 l1-0)\n(unload-airplane p0 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l1-0)\n    (at p3 l2-0)\n    (at p4 l0-0)\n    (at p5 l2-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l1-2)\n        (at p5 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-0)\n(load-truck p1 t0 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p5 t2 l2-1)\n(load-truck p3 t2 l2-0)\n(load-airplane p3 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(unload-airplane p3 a2 l0-0)\n(unload-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l2-1 c2)\n(load-truck p0 t0 l2-1)\n(drive-truck t0 l2-1 l2-0 c2)\n(unload-truck p0 t0 l2-0)\n(drive-truck t2 l2-0 l1-1 c1)\n(load-truck p5 t2 l1-1)\n(load-airplane p5 a1 l1-1)\n(fly-airplane a1 l1-1 l1-2)\n(unload-airplane p5 a1 l1-2)\n(load-truck p4 t0 l0-2)\n(drive-truck t0 l0-2 l1-2 c1)\n(unload-truck p4 t0 l1-2)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-1)",
                "(load-airplane p4 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(load-airplane p5 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p5 t1 l1-0)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p4 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p5 t2 l2-1)",
                "(load-truck p3 t2 l2-0)",
                "(load-airplane p3 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(unload-airplane p3 a2 l0-0)",
                "(unload-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l2-1 c2)",
                "(load-truck p0 t0 l2-1)",
                "(drive-truck t0 l2-1 l2-0 c2)",
                "(unload-truck p0 t0 l2-0)",
                "(drive-truck t2 l2-0 l1-1 c1)",
                "(load-truck p5 t2 l1-1)",
                "(load-airplane p5 a1 l1-1)",
                "(fly-airplane a1 l1-1 l1-2)",
                "(unload-airplane p5 a1 l1-2)",
                "(load-truck p4 t0 l0-2)",
                "(drive-truck t0 l0-2 l1-2 c1)",
                "(unload-truck p4 t0 l1-2)"
            ],
            "correct": false,
            "instance_id": 179,
            "example_instance_id": 178,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l0-0)\n    (at p2 l1-0)\n    (at p3 l2-0)\n    (at p4 l0-0)\n    (at p5 l2-1)\n    (at a0 l2-0)\n    (at a1 l0-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-0)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l1-2)\n        (at p5 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-1)\n(load-airplane p4 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(load-airplane p3 a1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(unload-airplane p0 a1 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(load-airplane p5 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(unload-airplane p4 a1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(load-truck p3 t0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p5 t1 l1-0)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p4 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l0-2)\n    (at p1 l2-2)\n    (at p2 l1-1)\n    (at p3 l2-1)\n    (at p4 l2-2)\n    (at p5 l1-1)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-2)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l2-0)\n        (at p5 l0-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t2 l2-1)\n(load-airplane p4 a0 l2-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l2-2)\n(unload-airplane p1 a0 l2-2)\n(unload-airplane p4 a0 l2-2)\n(load-truck p1 t2 l2-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-airplane p2 a1 l1-0)\n(load-airplane p5 a1 l1-0)\n(fly-airplane a1 l1-0 l0-1)\n(unload-airplane p2 a1 l0-1)\n(unload-airplane p5 a1 l0-1)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p0 t0 l0-2)\n(unload-truck p3 t2 l2-1)\n(load-truck p4 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(fly-airplane a0 l2-2 l0-1)\n(unload-airplane p1 a0 l0-1)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l0-1 c1)\n(unload-truck p5 t1 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p4 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p5 a1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p5 a1 l0-0)",
                "(load-truck p5 t0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p5 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t2 l2-1)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l2-2)",
                "(unload-airplane p1 a0 l2-2)",
                "(unload-airplane p4 a0 l2-2)",
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-airplane p2 a1 l1-0)",
                "(load-airplane p5 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-1)",
                "(unload-airplane p2 a1 l0-1)",
                "(unload-airplane p5 a1 l0-1)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p0 t0 l0-2)",
                "(unload-truck p3 t2 l2-1)",
                "(load-truck p4 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(fly-airplane a0 l2-2 l0-1)",
                "(unload-airplane p1 a0 l0-1)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l0-1 c1)",
                "(unload-truck p5 t1 l0-1)"
            ],
            "correct": false,
            "instance_id": 180,
            "example_instance_id": 179,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-1)\n    (at p0 l0-2)\n    (at p1 l2-2)\n    (at p2 l1-1)\n    (at p3 l2-1)\n    (at p4 l2-2)\n    (at p5 l1-1)\n    (at a0 l2-0)\n    (at a1 l1-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-2)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l2-0)\n        (at p5 l0-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p4 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p5 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(load-airplane p5 a1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p5 a1 l0-0)\n(load-truck p5 t0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(unload-truck p3 t2 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p5 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l2-2)\n    (at p2 l2-1)\n    (at p3 l1-2)\n    (at p4 l2-2)\n    (at p5 l1-1)\n    (at a0 l0-0)\n    (at a1 l0-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-2)\n        (at p2 l0-0)\n        (at p3 l2-2)\n        (at p4 l0-0)\n        (at p5 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l1-2)\n(drive-truck t0 l1-2 l1-1 c1)\n(unload-truck p0 t0 l1-1)\n(drive-truck t0 l1-1 l1-0 c1)\n(load-truck p5 t0 l1-1)\n(drive-truck t0 l1-0 l1-2 c1)\n(unload-truck p5 t0 l1-2)\n(load-truck p3 t2 l2-2)\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(load-truck p4 t2 l2-2)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-airplane p3 a1 l2-1)\n(load-airplane p2 a2 l2-1)\n(fly-airplane a1 l2-1 l1-0)\n(unload-airplane p3 a1 l1-0)\n(fly-airplane a2 l2-1 l1-0)\n(unload-airplane p2 a2 l1-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p4 a0 l1-0)\n(load-airplane p0 a1 l1-1)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(fly-airplane a1 l1-0 l0-2)\n(unload-airplane p0 a1 l0-2)\n(fly-airplane a1 l0-2 l0-1)\n(unload-airplane p1 a1 l0-1)\n",
            "ground_truth_plan": [
                "(load-truck p4 t2 l2-2)",
                "(load-truck p1 t2 l2-2)",
                "(load-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p5 t1 l1-2)",
                "(load-truck p3 t1 l1-2)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(load-airplane p3 a2 l1-0)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(unload-truck p2 t2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p0 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(load-airplane p4 a2 l2-0)",
                "(unload-airplane p3 a2 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p3 t2 l2-2)",
                "(load-airplane p2 a2 l2-0)",
                "(load-airplane p1 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(unload-airplane p4 a2 l0-0)",
                "(unload-airplane p2 a2 l0-0)",
                "(unload-airplane p1 a2 l0-0)",
                "(unload-airplane p0 a2 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p1 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l1-2)",
                "(drive-truck t0 l1-2 l1-1 c1)",
                "(unload-truck p0 t0 l1-1)",
                "(drive-truck t0 l1-1 l1-0 c1)",
                "(load-truck p5 t0 l1-1)",
                "(drive-truck t0 l1-0 l1-2 c1)",
                "(unload-truck p5 t0 l1-2)",
                "(load-truck p3 t2 l2-2)",
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(load-truck p4 t2 l2-2)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-airplane p3 a1 l2-1)",
                "(load-airplane p2 a2 l2-1)",
                "(fly-airplane a1 l2-1 l1-0)",
                "(unload-airplane p3 a1 l1-0)",
                "(fly-airplane a2 l2-1 l1-0)",
                "(unload-airplane p2 a2 l1-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(load-airplane p0 a1 l1-1)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(fly-airplane a1 l1-0 l0-2)",
                "(unload-airplane p0 a1 l0-2)",
                "(fly-airplane a1 l0-2 l0-1)",
                "(unload-airplane p1 a1 l0-1)"
            ],
            "correct": false,
            "instance_id": 181,
            "example_instance_id": 180,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l2-2)\n    (at p2 l2-1)\n    (at p3 l1-2)\n    (at p4 l2-2)\n    (at p5 l1-1)\n    (at a0 l0-0)\n    (at a1 l0-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-2)\n        (at p2 l0-0)\n        (at p3 l2-2)\n        (at p4 l0-0)\n        (at p5 l1-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t2 l2-2)\n(load-truck p1 t2 l2-2)\n(load-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p5 t1 l1-2)\n(load-truck p3 t1 l1-2)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(fly-airplane a2 l0-0 l1-0)\n(load-airplane p3 a2 l1-0)\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(unload-truck p2 t2 l2-0)\n(unload-truck p1 t2 l2-0)\n(unload-truck p0 t1 l1-0)\n(load-airplane p0 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(load-airplane p4 a2 l2-0)\n(unload-airplane p3 a2 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p3 t2 l2-2)\n(load-airplane p2 a2 l2-0)\n(load-airplane p1 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(unload-airplane p4 a2 l0-0)\n(unload-airplane p2 a2 l0-0)\n(unload-airplane p1 a2 l0-0)\n(unload-airplane p0 a2 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p1 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-2)\n    (at p2 l2-0)\n    (at p3 l2-1)\n    (at p4 l1-2)\n    (at p5 l2-0)\n    (at a0 l2-0)\n    (at a1 l0-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-2)\n        (at p2 l1-1)\n        (at p3 l0-1)\n        (at p4 l0-0)\n        (at p5 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p5 t2 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p5 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p5 a0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-airplane p1 a1 l0-0)\n(load-airplane p4 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(unload-airplane p4 a1 l2-0)\n(load-airplane p2 a2 l1-1)\n(fly-airplane a2 l1-1 l2-2)\n(unload-airplane p2 a2 l2-2)\n",
            "ground_truth_plan": [
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(load-airplane p2 a0 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p3 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(unload-airplane p0 a0 l0-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p5 t2 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p5 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p5 a0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(load-airplane p2 a2 l1-1)",
                "(fly-airplane a2 l1-1 l2-2)",
                "(unload-airplane p2 a2 l2-2)"
            ],
            "correct": false,
            "instance_id": 182,
            "example_instance_id": 181,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-2)\n    (at p2 l2-0)\n    (at p3 l2-1)\n    (at p4 l1-2)\n    (at p5 l2-0)\n    (at a0 l2-0)\n    (at a1 l0-0)\n    (at a2 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-0)\n        (at p1 l2-2)\n        (at p2 l1-1)\n        (at p3 l0-1)\n        (at p4 l0-0)\n        (at p5 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(load-airplane p2 a0 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p3 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(unload-truck p0 t2 l2-0)\n(load-airplane p3 a0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p4 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(unload-airplane p0 a0 l0-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l2-1)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l2-2)\n    (at p5 l0-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-1)\n        (at p2 l2-2)\n        (at p3 l1-2)\n        (at p4 l0-2)\n        (at p5 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l1-2 c1)\n(unload-truck p3 t0 l1-2)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l0-2 c0)\n(unload-truck p1 t1 l0-2)\n(load-truck p5 t0 l0-1)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-1 l2-0 c2)\n(unload-truck p5 t0 l2-0)\n(unload-truck p0 t0 l2-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l2-2)\n(unload-airplane p2 a1 l2-2)\n(load-airplane p4 a2 l2-0)\n(drive-truck t1 l0-2 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(fly-airplane a2 l2-0 l1-0)\n(load-truck p5 t2 l2-0)\n(drive-truck t2 l2-0 l1-1 c1)\n(load-airplane p5 a0 l1-0)\n(unload-airplane p4 a2 l1-0))\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p4 t2 l2-2)",
                "(unload-truck p2 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p4 t2 l2-0)",
                "(load-airplane p4 a2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(load-airplane p1 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(unload-airplane p4 a2 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p5 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)",
                "(load-airplane p5 a2 l0-0)",
                "(load-airplane p3 a2 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(unload-airplane p1 a2 l1-0)",
                "(fly-airplane a2 l1-0 l2-0)",
                "(unload-airplane p5 a2 l2-0)",
                "(unload-airplane p0 a2 l2-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p3 t1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l1-2 c1)",
                "(unload-truck p3 t0 l1-2)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l0-2 c0)",
                "(unload-truck p1 t1 l0-2)",
                "(load-truck p5 t0 l0-1)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-1 l2-0 c2)",
                "(unload-truck p5 t0 l2-0)",
                "(unload-truck p0 t0 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l2-2)",
                "(unload-airplane p2 a1 l2-2)",
                "(load-airplane p4 a2 l2-0)",
                "(drive-truck t1 l0-2 l1-1 c1)",
                "(unload-truck p1 t1 l1-1)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(load-truck p5 t2 l2-0)",
                "(drive-truck t2 l2-0 l1-1 c1)",
                "(load-airplane p5 a0 l1-0)",
                "(unload-airplane p4 a2 l1-0)"
            ],
            "correct": false,
            "instance_id": 183,
            "example_instance_id": 182,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l0-0)\n    (at p1 l2-1)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l2-2)\n    (at p5 l0-1)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l1-1)\n        (at p2 l2-2)\n        (at p3 l1-2)\n        (at p4 l0-2)\n        (at p5 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p4 t2 l2-2)\n(unload-truck p2 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p4 t2 l2-0)\n(load-airplane p4 a2 l2-0)\n(unload-truck p1 t2 l2-0)\n(load-airplane p1 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(unload-airplane p4 a2 l0-0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p5 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n(load-airplane p5 a2 l0-0)\n(load-airplane p3 a2 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(unload-airplane p1 a2 l1-0)\n(fly-airplane a2 l1-0 l2-0)\n(unload-airplane p5 a2 l2-0)\n(unload-airplane p0 a2 l2-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p3 t1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l0-0)\n    (at p2 l1-1)\n    (at p3 l0-2)\n    (at p4 l1-2)\n    (at p5 l1-2)\n    (at a0 l0-0)\n    (at a1 l0-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-0)\n        (at p2 l1-1)\n        (at p3 l2-1)\n        (at p4 l1-2)\n        (at p5 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n(load-airplane p1 a0 l0-2)\n(load-truck p3 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-airplane p3 a0 l0-0)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p0 a2 l2-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p4 t1 l1-2)\n(drive-truck t1 l1-2 l1-0)\n(load-truck p5 t1 l1-2)\n(drive-truck t1 l1-2 l1-0)\n(unload-truck p2 t1 l1-1)\n(unload-truck p4 t1 l1-2)\n(unload-truck p5 t1 l1-2)\n(fly-airplane a2 l2-0 l0-0)\n(load-airplane p0 a2 l0-0)\n(load-airplane p1 a2 l0-0)\n(fly-airplane a2 l0-0 l2-0)\n(unload-airplane p0 a2 l2-1)\n",
            "ground_truth_plan": [
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p3 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p3 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a2 l2-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(unload-airplane p0 a2 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p1 a2 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)",
                "(load-airplane p1 a0 l0-2)",
                "(load-truck p3 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-airplane p3 a0 l0-0)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p0 a2 l2-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p4 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0)",
                "(load-truck p5 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0)",
                "(unload-truck p2 t1 l1-1)",
                "(unload-truck p4 t1 l1-2)",
                "(unload-truck p5 t1 l1-2)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(fly-airplane a2 l0-0 l2-0)",
                "(unload-airplane p0 a2 l2-1)"
            ],
            "correct": false,
            "instance_id": 184,
            "example_instance_id": 183,
            "relaxed_checks": {
                "del_and_precond_relax": -1,
                "del_relax_only": -1,
                "precond_relax_only": -1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l0-0)\n    (at p2 l1-1)\n    (at p3 l0-2)\n    (at p4 l1-2)\n    (at p5 l1-2)\n    (at a0 l0-0)\n    (at a1 l0-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-0)\n        (at p2 l1-1)\n        (at p3 l2-1)\n        (at p4 l1-2)\n        (at p5 l1-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p3 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p3 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p3 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a2 l2-0)\n(fly-airplane a2 l2-0 l0-0)\n(load-airplane p1 a2 l0-0)\n(unload-airplane p0 a2 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p1 a2 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l0-2)\n    (at p1 l0-1)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l0-1)\n    (at p5 l2-2)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-1)\n        (at p2 l2-0)\n        (at p3 l1-1)\n        (at p4 l0-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-truck p4 t0 l0-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(unload-airplane p1 a0 l1-0)\n(load-truck p5 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(load-airplane p0 a1 l0-2)\n(load-airplane p3 a1 l0-1)\n(fly-airplane a1 l0-2 l2-0)\n(unload-airplane p0 a1 l2-0)\n(unload-airplane p3 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(load-airplane p2 a2 l2-0)\n(load-airplane p5 a2 l2-0)\n(fly-airplane a2 l2-0 l1-0)\n(unload-airplane p2 a1 l1-0)\n(unload-airplane p5 a1 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(fly-airplane a2 l2-0 l0-0)",
                "(load-airplane p3 a2 l0-0)",
                "(load-airplane p1 a2 l0-0)",
                "(load-airplane p0 a2 l0-0)",
                "(fly-airplane a2 l0-0 l1-0)",
                "(unload-airplane p3 a2 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(unload-airplane p1 a2 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)",
                "(unload-truck p1 t1 l1-1)",
                "(unload-airplane p0 a2 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-truck p4 t0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(unload-airplane p1 a0 l1-0)",
                "(load-truck p5 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(load-airplane p0 a1 l0-2)",
                "(load-airplane p3 a1 l0-1)",
                "(fly-airplane a1 l0-2 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(load-airplane p2 a2 l2-0)",
                "(load-airplane p5 a2 l2-0)",
                "(fly-airplane a2 l2-0 l1-0)",
                "(unload-airplane p2 a1 l1-0)",
                "(unload-airplane p5 a1 l1-0)"
            ],
            "correct": false,
            "instance_id": 185,
            "example_instance_id": 184,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p6-a3)\n(:domain logistics-strips)\n(:objects a0 a1 a2 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (AIRPLANE a2)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l0-2)\n    (at p1 l0-1)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l0-1)\n    (at p5 l2-2)\n    (at a0 l1-0)\n    (at a1 l2-0)\n    (at a2 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-0)\n        (at p1 l1-1)\n        (at p2 l2-0)\n        (at p3 l1-1)\n        (at p4 l0-1)\n        (at p5 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(fly-airplane a2 l2-0 l0-0)\n(load-airplane p3 a2 l0-0)\n(load-airplane p1 a2 l0-0)\n(load-airplane p0 a2 l0-0)\n(fly-airplane a2 l0-0 l1-0)\n(unload-airplane p3 a2 l1-0)\n(load-truck p3 t1 l1-0)\n(unload-airplane p1 a2 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n(unload-truck p1 t1 l1-1)\n(unload-airplane p0 a2 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l0-2)\n    (at p1 l0-1)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l0-1)\n    (at p5 l2-2)\n    (at p6 l1-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l1-1)\n        (at p3 l0-1)\n        (at p4 l2-0)\n        (at p5 l1-2)\n        (at p6 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p5 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(load-airplane p0 a0 l0-2)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p1 t0 l0-1)\n(unload-truck p4 t0 l0-1)\n(fly-airplane a0 l0-0 l1-1)\n(unload-airplane p0 a0 l1-1)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l1-1 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-airplane p1 a0 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p5 a0 l2-0)\n(load-airplane p6 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(unload-airplane p4 a0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(unload-airplane p6 a0 l1-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(load-truck p1 t2 l1-0)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-truck p6 t2 l1-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p6 t2 l2-0)\n(load-truck p4 t1 l1-0)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p4 t1 l1-2)\n(unload-truck p5 t1 l1-2)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(load-truck p4 t0 l0-1)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p4 t0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(load-airplane p4 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p6 a0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p6 a0 l2-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p5 t1 l1-0)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(unload-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p5 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p5 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(load-airplane p0 a0 l0-2)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p1 t0 l0-1)",
                "(unload-truck p4 t0 l0-1)",
                "(fly-airplane a0 l0-0 l1-1)",
                "(unload-airplane p0 a0 l1-1)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p2 t1 l1-1)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l1-1 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(load-airplane p6 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(unload-airplane p4 a0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(unload-airplane p6 a0 l1-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(load-truck p1 t2 l1-0)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-truck p6 t2 l1-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p6 t2 l2-0)",
                "(load-truck p4 t1 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p4 t1 l1-2)",
                "(unload-truck p5 t1 l1-2)"
            ],
            "correct": false,
            "instance_id": 186,
            "example_instance_id": 185,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l0-2)\n    (at p1 l0-1)\n    (at p2 l2-0)\n    (at p3 l0-0)\n    (at p4 l0-1)\n    (at p5 l2-2)\n    (at p6 l1-0)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l1-1)\n        (at p1 l2-0)\n        (at p2 l1-1)\n        (at p3 l0-1)\n        (at p4 l2-0)\n        (at p5 l1-2)\n        (at p6 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(load-truck p4 t0 l0-1)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p4 t0 l0-0)\n(load-truck p3 t0 l0-0)\n(unload-truck p1 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(load-airplane p4 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p5 a0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p6 a0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p6 a0 l2-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p5 t1 l1-0)\n(load-truck p2 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p2 t1 l1-1)\n(unload-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p5 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l0-2)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l1-2)\n    (at p6 l1-1)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l2-1)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l2-1)\n        (at p5 l1-0)\n        (at p6 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n(load-truck p2 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p1 t1 l1-2)\n(load-truck p6 t1 l1-1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p6 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-truck p5 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(load-airplane p4 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p1 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p1 a0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-airplane p5 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(load-airplane p6 a0 l1-0)\n(fly-airplane a0 l1-0 l2-1)\n(unload-airplane p4 a0 l2-1)\n(unload-airplane p1 a0 l2-1)\n(unload-airplane p5 a0 l2-1)\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p2 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(load-truck p4 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(unload-truck p1 t2 l2-0)\n(unload-truck p4 t2 l2-0)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(load-truck p4 t2 l2-0)",
                "(load-truck p6 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p6 t1 l1-2)",
                "(load-truck p5 t1 l1-2)",
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(load-truck p2 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p0 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(unload-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(unload-truck p1 t2 l2-1)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)",
                "(load-truck p2 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p1 t1 l1-2)",
                "(load-truck p6 t1 l1-1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p6 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-truck p5 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(load-airplane p4 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p1 a0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-airplane p5 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(load-airplane p6 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-1)",
                "(unload-airplane p4 a0 l2-1)",
                "(unload-airplane p1 a0 l2-1)",
                "(unload-airplane p5 a0 l2-1)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p2 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(load-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(unload-truck p4 t2 l2-0)"
            ],
            "correct": false,
            "instance_id": 187,
            "example_instance_id": 186,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-1)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l0-1)\n    (at p1 l1-0)\n    (at p2 l0-2)\n    (at p3 l0-0)\n    (at p4 l2-0)\n    (at p5 l1-2)\n    (at p6 l1-1)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l2-1)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l2-1)\n        (at p5 l1-0)\n        (at p6 l1-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-2 l2-0 c2)\n(load-truck p4 t2 l2-0)\n(load-truck p6 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p6 t1 l1-2)\n(load-truck p5 t1 l1-2)\n(load-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p3 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(load-truck p2 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p0 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p1 a0 l1-0)\n(unload-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(unload-truck p1 t2 l2-1)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-1)\n    (at p1 l0-1)\n    (at p2 l1-0)\n    (at p3 l1-0)\n    (at p4 l0-1)\n    (at p5 l2-0)\n    (at p6 l2-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l2-0)\n        (at p5 l0-1)\n        (at p6 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(load-truck p4 t0 l0-1)\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p5 a0 l2-0)\n(load-airplane p6 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(unload-truck p4 t0 l0-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p2 t1 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n(unload-truck p2 t1 l1-2)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p6 a0 l1-0)\n(load-airplane p1 a0 l1-0)\n(load-airplane p4 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(load-truck p1 t0 l0-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p6 a0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p6 a0 l1-0)",
                "(load-truck p6 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p6 t1 l1-2)",
                "(unload-truck p3 t1 l1-2)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-truck p5 t0 l0-0)",
                "(unload-truck p4 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p5 t0 l0-1)",
                "(load-airplane p4 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(unload-airplane p1 a0 l2-0)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(load-airplane p6 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(unload-truck p4 t0 l0-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p2 t1 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)",
                "(unload-truck p2 t1 l1-2)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p6 a0 l1-0)",
                "(load-airplane p1 a0 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)"
            ],
            "correct": false,
            "instance_id": 188,
            "example_instance_id": 187,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-1)\n    (at p1 l0-1)\n    (at p2 l1-0)\n    (at p3 l1-0)\n    (at p4 l0-1)\n    (at p5 l2-0)\n    (at p6 l2-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-0)\n        (at p1 l2-0)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l2-0)\n        (at p5 l0-1)\n        (at p6 l1-2)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p3 t1 l1-0)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(load-truck p1 t0 l0-1)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p6 a0 l2-0)\n(load-airplane p5 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p6 a0 l1-0)\n(load-truck p6 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p6 t1 l1-2)\n(unload-truck p3 t1 l1-2)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-truck p5 t0 l0-0)\n(unload-truck p4 t0 l0-0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p5 t0 l0-1)\n(load-airplane p4 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(unload-airplane p1 a0 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l0-2)\n    (at p2 l1-2)\n    (at p3 l1-2)\n    (at p4 l2-0)\n    (at p5 l2-0)\n    (at p6 l2-1)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-2)\n        (at p2 l0-2)\n        (at p3 l0-0)\n        (at p4 l2-2)\n        (at p5 l0-2)\n        (at p6 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t2 l2-0)\n(load-truck p5 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p4 t2 l2-2)\n(unload-truck p5 t2 l2-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p2 t1 l1-2)\n(load-truck p3 t1 l1-2)\n(drive-truck t1 l1-2 l0-2 c0)\n(unload-truck p0 t1 l0-2)\n(unload-truck p2 t1 l0-2)\n(unload-truck p3 t1 l0-2)\n(load-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p3 a0 l0-0)\n(drive-truck t1 l0-2 l1-2 c1)\n(load-truck p5 t1 l1-2)\n(drive-truck t1 l1-2 l2-0 c2)\n(unload-truck p5 t1 l2-0)\n(load-truck p6 t1 l2-0)\n(fly-airplane a0 l0-0 l2-0)\n(load-airplane p5 a0 l2-0)\n(load-airplane p6 a0 l2-0)\n(fly-airplane a0 l2-0 l1-2)\n(unload-airplane p5 a0 l1-2)\n(unload-airplane p6 a0 l1-2)\n",
            "ground_truth_plan": [
                "(load-truck p4 t2 l2-0)",
                "(load-truck p3 t1 l1-2)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p3 t1 l1-0)",
                "(unload-truck p2 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-truck p1 t0 l0-2)",
                "(load-airplane p5 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p5 t0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(unload-truck p2 t0 l0-2)",
                "(unload-truck p0 t0 l0-2)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p6 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p6 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p4 t2 l2-2)",
                "(unload-truck p1 t2 l2-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t2 l2-0)",
                "(load-truck p5 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p4 t2 l2-2)",
                "(unload-truck p5 t2 l2-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p2 t1 l1-2)",
                "(load-truck p3 t1 l1-2)",
                "(drive-truck t1 l1-2 l0-2 c0)",
                "(unload-truck p0 t1 l0-2)",
                "(unload-truck p2 t1 l0-2)",
                "(unload-truck p3 t1 l0-2)",
                "(load-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(drive-truck t1 l0-2 l1-2 c1)",
                "(load-truck p5 t1 l1-2)",
                "(drive-truck t1 l1-2 l2-0 c2)",
                "(unload-truck p5 t1 l2-0)",
                "(load-truck p6 t1 l2-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(load-airplane p6 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-2)",
                "(unload-airplane p5 a0 l1-2)",
                "(unload-airplane p6 a0 l1-2)"
            ],
            "correct": false,
            "instance_id": 189,
            "example_instance_id": 188,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l0-2)\n    (at p2 l1-2)\n    (at p3 l1-2)\n    (at p4 l2-0)\n    (at p5 l2-0)\n    (at p6 l2-1)\n    (at a0 l2-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-2)\n        (at p2 l0-2)\n        (at p3 l0-0)\n        (at p4 l2-2)\n        (at p5 l0-2)\n        (at p6 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p4 t2 l2-0)\n(load-truck p3 t1 l1-2)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p2 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-truck p1 t0 l0-2)\n(load-airplane p5 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p5 t0 l0-0)\n(load-truck p2 t0 l0-0)\n(unload-truck p1 t0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(unload-truck p2 t0 l0-2)\n(unload-truck p0 t0 l0-2)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p6 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p6 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p4 t2 l2-2)\n(unload-truck p1 t2 l2-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l0-1)\n    (at p4 l1-0)\n    (at p5 l0-0)\n    (at p6 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-2)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l2-1)\n        (at p5 l1-1)\n        (at p6 l1-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p5 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(load-truck p3 t0 l0-1)\n(load-truck p6 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(unload-truck p6 t0 l0-2)\n(load-truck p1 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p1 t1 l1-2)\n(unload-truck p2 t1 l1-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p6 t1 l1-2)\n(unload-truck p4 t1 l1-2)\n(drive-truck t0 l0-1 l0-2 c0)\n",
            "ground_truth_plan": [
                "(load-truck p6 t0 l0-1)",
                "(load-truck p3 t0 l0-1)",
                "(load-airplane p5 a0 l0-0)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p6 t0 l0-0)",
                "(load-airplane p6 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p6 a0 l1-0)",
                "(load-truck p6 t1 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(load-airplane p4 a0 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p6 t1 l1-2)",
                "(unload-truck p1 t1 l1-2)",
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p5 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(load-truck p3 t0 l0-1)",
                "(load-truck p6 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p3 t0 l0-2)",
                "(unload-truck p6 t0 l0-2)",
                "(load-truck p1 t1 l1-1)",
                "(load-truck p2 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p1 t1 l1-2)",
                "(unload-truck p2 t1 l1-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p6 t1 l1-2)",
                "(unload-truck p4 t1 l1-2)",
                "(drive-truck t0 l0-1 l0-2 c0)"
            ],
            "correct": false,
            "instance_id": 190,
            "example_instance_id": 189,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-1)\n    (at t1 l1-0)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l1-1)\n    (at p2 l1-1)\n    (at p3 l0-1)\n    (at p4 l1-0)\n    (at p5 l0-0)\n    (at p6 l0-1)\n    (at a0 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l1-2)\n        (at p2 l0-1)\n        (at p3 l0-2)\n        (at p4 l2-1)\n        (at p5 l1-1)\n        (at p6 l1-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p6 t0 l0-1)\n(load-truck p3 t0 l0-1)\n(load-airplane p5 a0 l0-0)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p6 t0 l0-0)\n(load-airplane p6 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p6 a0 l1-0)\n(load-truck p6 t1 l1-0)\n(unload-airplane p5 a0 l1-0)\n(load-truck p5 t1 l1-0)\n(load-airplane p4 a0 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p5 t1 l1-1)\n(load-truck p2 t1 l1-1)\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p6 t1 l1-2)\n(unload-truck p1 t1 l1-2)\n(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(load-truck p4 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(unload-airplane p0 a0 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p3 t0 l0-2)\n(unload-truck p0 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-2)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at p3 l0-2)\n    (at p4 l2-0)\n    (at p5 l0-2)\n    (at p6 l1-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-2)\n        (at p2 l2-2)\n        (at p3 l0-2)\n        (at p4 l2-1)\n        (at p5 l1-1)\n        (at p6 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-airplane p4 a0 l2-0)\n(load-truck p1 t0 l0-0)\n(load-truck p0 t2 l2-2)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p4 a0 l2-0)\n(load-truck p4 t2 l2-0)\n(drive-truck t2 l2-2 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(unload-truck p4 t2 l2-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-airplane p6 a0 l1-2)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p6 a0 l1-0)\n(load-truck p6 t1 l1-0)\n(load-airplane p5 a0 l0-2)\n(fly-airplane a0 l1-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(load-truck p5 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p6 t1 l1-1)\n(load-truck p2 t1 l2-0)\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(load-truck p1 t1 l1-1)\n(fly-airplane a0 l0-0 l1-0)\n(load-airplane p1 a0 l1-1)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p1 t2 l2-2)\n(unload-truck p2 t2 l2-2)\n",
            "ground_truth_plan": [
                "(load-truck p0 t2 l2-2)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p5 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p5 a0 l0-0)",
                "(load-airplane p1 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p5 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(load-truck p4 t2 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(load-truck p1 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p4 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(unload-truck p1 t2 l2-2)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p6 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p6 t1 l1-1)",
                "(unload-truck p5 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-airplane p4 a0 l2-0)",
                "(load-truck p1 t0 l0-0)",
                "(load-truck p0 t2 l2-2)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p4 a0 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(unload-truck p4 t2 l2-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-airplane p6 a0 l1-2)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p6 a0 l1-0)",
                "(load-truck p6 t1 l1-0)",
                "(load-airplane p5 a0 l0-2)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(load-truck p5 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p6 t1 l1-1)",
                "(load-truck p2 t1 l2-0)",
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(load-truck p1 t1 l1-1)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(load-airplane p1 a0 l1-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p1 a0 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p1 t2 l2-2)",
                "(unload-truck p2 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 191,
            "example_instance_id": 190,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-2)\n    (at p0 l2-2)\n    (at p1 l0-0)\n    (at p2 l2-0)\n    (at p3 l0-2)\n    (at p4 l2-0)\n    (at p5 l0-2)\n    (at p6 l1-2)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-2)\n        (at p2 l2-2)\n        (at p3 l0-2)\n        (at p4 l2-1)\n        (at p5 l1-1)\n        (at p6 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t2 l2-2)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p5 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p5 a0 l0-0)\n(load-airplane p1 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p5 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p1 a0 l2-0)\n(drive-truck t2 l2-2 l2-0 c2)\n(load-truck p4 t2 l2-0)\n(load-truck p2 t2 l2-0)\n(load-truck p1 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p4 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(unload-truck p1 t2 l2-2)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p6 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p6 t1 l1-1)\n(unload-truck p5 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l2-1)\n    (at p2 l2-0)\n    (at p3 l2-1)\n    (at p4 l2-2)\n    (at p5 l2-2)\n    (at p6 l2-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-2)\n        (at p2 l0-1)\n        (at p3 l0-1)\n        (at p4 l0-2)\n        (at p5 l1-0)\n        (at p6 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p6 t2 l2-0)\n(load-truck p5 t2 l2-2)\n(load-truck p4 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(unload-truck p2 t2 l2-0)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p3 t2 l2-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(load-truck p4 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(unload-truck p1 t0 l0-1)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p6 t1 l1-1)\n(unload-truck p5 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n(fly-airplane a0 l1-0 l0-0)\n(load-airplane p2 a0 l0-0)\n(load-airplane p3 a0 l0-0)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(unload-airplane p3 a0 l1-0)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-2)",
                "(load-truck p4 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p3 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p4 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p6 a0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)",
                "(unload-truck p1 t0 l0-2)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p6 a0 l1-0)",
                "(load-truck p6 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p6 t1 l1-1)",
                "(unload-airplane p5 a0 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p6 t2 l2-0)",
                "(load-truck p5 t2 l2-2)",
                "(load-truck p4 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(unload-truck p2 t2 l2-0)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p3 t2 l2-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p4 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p1 t0 l0-1)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p6 t1 l1-1)",
                "(unload-truck p5 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(load-airplane p2 a0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(fly-airplane a0 l0-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(unload-airplane p3 a0 l1-0)"
            ],
            "correct": false,
            "instance_id": 192,
            "example_instance_id": 191,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a1)\n(:domain logistics-strips)\n(:objects a0 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l2-1)\n    (at p2 l2-0)\n    (at p3 l2-1)\n    (at p4 l2-2)\n    (at p5 l2-2)\n    (at p6 l2-0)\n    (at a0 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-2)\n        (at p2 l0-1)\n        (at p3 l0-1)\n        (at p4 l0-2)\n        (at p5 l1-0)\n        (at p6 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-2)\n(load-truck p4 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p3 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p4 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(unload-truck p1 t2 l2-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p6 a0 l2-0)\n(load-airplane p5 a0 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-truck p3 t0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n(unload-truck p1 t0 l0-2)\n(fly-airplane a0 l0-0 l1-0)\n(unload-airplane p6 a0 l1-0)\n(load-truck p6 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p6 t1 l1-1)\n(unload-airplane p5 a0 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l2-1)\n    (at p2 l2-0)\n    (at p3 l2-1)\n    (at p4 l2-2)\n    (at p5 l2-2)\n    (at p6 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-2)\n        (at p2 l0-1)\n        (at p3 l0-1)\n        (at p4 l0-2)\n        (at p5 l1-0)\n        (at p6 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p5 t2 l2-2)\n(load-truck p4 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p3 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p4 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(unload-truck p1 t2 l2-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p6 a0 l2-0)\n(load-airplane p5 a0 l2-0)\n(load-airplane p4 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(load-airplane p2 a0 l2-0)\n(load-airplane p1 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p4 a0 l0-0)\n(load-truck p4 t0 l0-0)\n(unload-airplane p3 a0 l0-0)\n(load-truck p3 t0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(load-truck p2 t0 l0-0)\n(unload-airplane p1 a0 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n(unload-truck p1 t0 l0-2)\n(fly-airplane a1 l1-0 l0-0)\n(load-airplane p5 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p5 a1 l1-0)\n(load-truck p6 t1 l2-0)\n(drive-truck t1 l2-0 l1-1 c1)\n(unload-truck p6 t1 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p5 t2 l2-2)",
                "(load-truck p4 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p3 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p4 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(load-airplane p3 a1 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(load-airplane p6 a1 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-airplane p3 a1 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)",
                "(unload-truck p1 t0 l0-2)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p6 a1 l1-0)",
                "(load-truck p6 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p6 t1 l1-1)",
                "(unload-airplane p5 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p5 t2 l2-2)",
                "(load-truck p4 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p3 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)",
                "(unload-truck p4 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(unload-truck p1 t2 l2-0)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p6 a0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(load-airplane p4 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(load-airplane p1 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p4 a0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(unload-airplane p1 a0 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)",
                "(unload-truck p1 t0 l0-2)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(load-airplane p5 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p5 a1 l1-0)",
                "(load-truck p6 t1 l2-0)",
                "(drive-truck t1 l2-0 l1-1 c1)",
                "(unload-truck p6 t1 l1-1)"
            ],
            "correct": false,
            "instance_id": 193,
            "example_instance_id": 192,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l2-1)\n    (at p2 l2-0)\n    (at p3 l2-1)\n    (at p4 l2-2)\n    (at p5 l2-2)\n    (at p6 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l0-2)\n        (at p2 l0-1)\n        (at p3 l0-1)\n        (at p4 l0-2)\n        (at p5 l1-0)\n        (at p6 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p5 t2 l2-2)\n(load-truck p4 t2 l2-2)\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p3 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n(unload-truck p4 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(unload-truck p1 t2 l2-0)\n(drive-truck t1 l1-2 l1-0 c1)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p5 a1 l2-0)\n(load-airplane p4 a1 l2-0)\n(load-airplane p3 a1 l2-0)\n(load-airplane p2 a1 l2-0)\n(load-airplane p6 a1 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(load-truck p4 t0 l0-0)\n(unload-airplane p3 a1 l0-0)\n(load-truck p3 t0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n(unload-truck p1 t0 l0-2)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p6 a1 l1-0)\n(load-truck p6 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p6 t1 l1-1)\n(unload-airplane p5 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-1)\n    (at p2 l0-2)\n    (at p3 l0-2)\n    (at p4 l0-1)\n    (at p5 l0-2)\n    (at p6 l2-0)\n    (at a0 l2-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-2)\n        (at p2 l2-0)\n        (at p3 l0-1)\n        (at p4 l2-1)\n        (at p5 l2-1)\n        (at p6 l2-2)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p4 t0 l0-1)\n(load-truck p5 t0 l0-2)\n(load-truck p3 t0 l0-2)\n(load-truck p1 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(load-airplane p1 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n(unload-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(unload-truck p3 t0 l0-1)\n(load-airplane p2 a0 l0-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-airplane p5 a0 l0-0)\n(load-airplane p3 a0 l0-0)\n(load-airplane p4 a0 l0-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p2 a0 l1-0)\n(load-airplane p2 a1 l1-0)\n(load-airplane p4 a1 l1-0)\n(load-airplane p3 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p2 a1 l2-0)\n(unload_airplane p3 a1 l2-0)\n(unload_airplane p4 a1 l2-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p5 t2 l2-1)\n(load-truck p4 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p6 t2 l2-0)\n(unload-truck p6 t2 l2-2)\n(unload-truck p5 t2 l2-2)\n(unload-truck p4 t2 l2-2)\n",
            "ground_truth_plan": [
                "(load-truck p6 t2 l2-0)",
                "(load-truck p1 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p1 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p5 t0 l0-2)",
                "(load-truck p3 t0 l0-2)",
                "(load-truck p2 t0 l0-2)",
                "(unload-truck p1 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(unload-truck p3 t0 l0-1)",
                "(unload-truck p0 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p5 t0 l0-0)",
                "(unload-truck p4 t0 l0-0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-airplane p5 a1 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(load-airplane p2 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p5 a1 l2-0)",
                "(load-truck p5 t2 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(load-truck p4 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p5 t2 l2-1)",
                "(unload-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(unload-truck p6 t2 l2-2)",
                "(unload-airplane p2 a1 l2-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p4 t0 l0-1)",
                "(load-truck p5 t0 l0-2)",
                "(load-truck p3 t0 l0-2)",
                "(load-truck p1 t1 l1-1)",
                "(load-truck p0 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(load-airplane p1 a1 l1-0)",
                "(load-airplane p0 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p1 a1 l0-0)",
                "(load-truck p1 t0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)",
                "(unload-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p3 t0 l0-1)",
                "(load-airplane p2 a0 l0-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-airplane p5 a0 l0-0)",
                "(load-airplane p3 a0 l0-0)",
                "(load-airplane p4 a0 l0-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p2 a0 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(load-airplane p4 a1 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p5 t2 l2-1)",
                "(load-truck p4 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p6 t2 l2-0)",
                "(unload-truck p6 t2 l2-2)",
                "(unload-truck p5 t2 l2-2)",
                "(unload-truck p4 t2 l2-2)"
            ],
            "correct": false,
            "instance_id": 194,
            "example_instance_id": 193,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-0)\n    (at p0 l1-1)\n    (at p1 l1-1)\n    (at p2 l0-2)\n    (at p3 l0-2)\n    (at p4 l0-1)\n    (at p5 l0-2)\n    (at p6 l2-0)\n    (at a0 l2-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-1)\n        (at p1 l0-2)\n        (at p2 l2-0)\n        (at p3 l0-1)\n        (at p4 l2-1)\n        (at p5 l2-1)\n        (at p6 l2-2)\n    )\n)\n)\n\n[PLAN]\n(load-truck p6 t2 l2-0)\n(load-truck p1 t1 l1-1)\n(load-truck p0 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-airplane p1 a1 l1-0)\n(load-airplane p0 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p1 a1 l0-0)\n(load-truck p1 t0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p5 t0 l0-2)\n(load-truck p3 t0 l0-2)\n(load-truck p2 t0 l0-2)\n(unload-truck p1 t0 l0-2)\n(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(unload-truck p3 t0 l0-1)\n(unload-truck p0 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p5 t0 l0-0)\n(unload-truck p4 t0 l0-0)\n(unload-truck p2 t0 l0-0)\n(load-airplane p5 a1 l0-0)\n(load-airplane p4 a1 l0-0)\n(load-airplane p2 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p5 a1 l2-0)\n(load-truck p5 t2 l2-0)\n(unload-airplane p4 a1 l2-0)\n(load-truck p4 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p5 t2 l2-1)\n(unload-truck p4 t2 l2-1)\n(drive-truck t2 l2-1 l2-2 c2)\n(unload-truck p6 t2 l2-2)\n(unload-airplane p2 a1 l2-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l2-2)\n    (at p2 l2-0)\n    (at p3 l1-0)\n    (at p4 l0-0)\n    (at p5 l1-2)\n    (at p6 l1-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-1)\n        (at p2 l0-0)\n        (at p3 l2-1)\n        (at p4 l0-2)\n        (at p5 l2-0)\n        (at p6 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p6 t1 l1-1)\n(load-truck p0 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p4 t0 l0-0)\n(unload-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n(load-airplane p0 a1 l0-0)\n(load-airplane p4 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n(unload-airplane p4 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(load-truck p3 t0 l1-0)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p6 t1 l1-0)\n(load-airplane p6 a0 l1-0)\n(load-airplane p3 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p6 a0 l2-0)\n(unload-airplane p3 a0 l2-0)\n(load-truck p3 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(unload-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-truck p6 t2 l2-0)\n(unload-truck p6 t2 l2-0)\n(load-truck p5 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p5 t1 l1-0)\n(load-airplane p5 a0 l1-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(fly-airplane a0 l2-0 l2-1)\n(unload-airplane p5 a0 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p6 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p5 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p6 t1 l1-0)",
                "(unload-truck p5 t1 l1-0)",
                "(load-airplane p6 a1 l1-0)",
                "(load-airplane p5 a1 l1-0)",
                "(load-airplane p3 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p6 a1 l2-0)",
                "(unload-airplane p5 a1 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-airplane p2 a1 l2-0)",
                "(drive-truck t2 l2-1 l2-2 c2)",
                "(load-truck p1 t2 l2-2)",
                "(drive-truck t2 l2-2 l2-0 c2)",
                "(load-truck p6 t2 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p6 t2 l2-1)",
                "(unload-truck p3 t2 l2-1)",
                "(unload-truck p1 t2 l2-1)",
                "(unload-truck p0 t2 l2-1)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p4 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p6 t1 l1-1)",
                "(load-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p4 t0 l0-0)",
                "(unload-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p4 t0 l0-2)",
                "(load-airplane p0 a1 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p0 a1 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(load-truck p3 t0 l1-0)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p6 t1 l1-0)",
                "(load-airplane p6 a0 l1-0)",
                "(load-airplane p3 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p6 a0 l2-0)",
                "(unload-airplane p3 a0 l2-0)",
                "(load-truck p3 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(unload-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-truck p6 t2 l2-0)",
                "(unload-truck p6 t2 l2-0)",
                "(load-truck p5 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p5 t1 l1-0)",
                "(load-airplane p5 a0 l1-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(fly-airplane a0 l2-0 l2-1)",
                "(unload-airplane p5 a0 l2-1)"
            ],
            "correct": false,
            "instance_id": 195,
            "example_instance_id": 194,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l0-0)\n    (at p1 l2-2)\n    (at p2 l2-0)\n    (at p3 l1-0)\n    (at p4 l0-0)\n    (at p5 l1-2)\n    (at p6 l1-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l2-1)\n        (at p2 l0-0)\n        (at p3 l2-1)\n        (at p4 l0-2)\n        (at p5 l2-0)\n        (at p6 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p6 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p5 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p6 t1 l1-0)\n(unload-truck p5 t1 l1-0)\n(load-airplane p6 a1 l1-0)\n(load-airplane p5 a1 l1-0)\n(load-airplane p3 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p6 a1 l2-0)\n(unload-airplane p5 a1 l2-0)\n(unload-airplane p3 a1 l2-0)\n(load-airplane p2 a1 l2-0)\n(drive-truck t2 l2-1 l2-2 c2)\n(load-truck p1 t2 l2-2)\n(drive-truck t2 l2-2 l2-0 c2)\n(load-truck p6 t2 l2-0)\n(load-truck p3 t2 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p0 a1 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p6 t2 l2-1)\n(unload-truck p3 t2 l2-1)\n(unload-truck p1 t2 l2-1)\n(unload-truck p0 t2 l2-1)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p4 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p4 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at p1 l2-0)\n    (at p2 l2-1)\n    (at p3 l1-2)\n    (at p4 l0-0)\n    (at p5 l0-1)\n    (at p6 l0-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l1-2)\n        (at p2 l0-1)\n        (at p3 l1-1)\n        (at p4 l0-1)\n        (at p5 l0-2)\n        (at p6 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p6 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(unload-truck p6 t0 l0-2)\n(load-airplane p6 a1 l0-0)\n(load-airplane p4 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p6 a1 l2-0)\n(unload-airplane p4 a1 l2-00)\n(load-airplane p2 a0 l2-1)\n(load-airplane p0 a0 l2-2)\n(fly-airplane a0 l2-0 l0-1)\n(unload-airplane p2 a0 l0-1)\n(unload-airplane p0 a0 l0-1)\n(load-truck p2 t1 l0-1)\n(drive-truck t1 l0-1 l0-0 c0)\n(load-truck p1 t1 l0-0)\n(drive-truck t1 l0-0 l1-2 c1)\n(unload-truck p2 t1 l1-2)\n(unload-truck p1 t1 l1-2)\n(load-truck p3 t0 l1-2)\n(drive-truck t0 l1-2 l1-1 c1)\n(unload-truck p3 t0 l1-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-truck p4 t0 l0-0)",
                "(load-airplane p2 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(load-airplane p6 a1 l0-0)",
                "(unload-airplane p2 a1 l0-0)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p5 t0 l0-1)",
                "(unload-truck p4 t0 l0-1)",
                "(unload-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p6 a1 l2-0)",
                "(load-airplane p1 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p1 a1 l1-0)",
                "(load-truck p1 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(load-truck p3 t1 l1-2)",
                "(unload-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(unload-truck p3 t1 l1-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p6 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(unload-truck p6 t0 l0-2)",
                "(load-airplane p6 a1 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p6 a1 l2-0)",
                "(unload-airplane p4 a1 l2-00)",
                "(load-airplane p2 a0 l2-1)",
                "(load-airplane p0 a0 l2-2)",
                "(fly-airplane a0 l2-0 l0-1)",
                "(unload-airplane p2 a0 l0-1)",
                "(unload-airplane p0 a0 l0-1)",
                "(load-truck p2 t1 l0-1)",
                "(drive-truck t1 l0-1 l0-0 c0)",
                "(load-truck p1 t1 l0-0)",
                "(drive-truck t1 l0-0 l1-2 c1)",
                "(unload-truck p2 t1 l1-2)",
                "(unload-truck p1 t1 l1-2)",
                "(load-truck p3 t0 l1-2)",
                "(drive-truck t0 l1-2 l1-1 c1)",
                "(unload-truck p3 t0 l1-1)"
            ],
            "correct": false,
            "instance_id": 196,
            "example_instance_id": 195,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-2)\n    (at p1 l2-0)\n    (at p2 l2-1)\n    (at p3 l1-2)\n    (at p4 l0-0)\n    (at p5 l0-1)\n    (at p6 l0-0)\n    (at a0 l2-0)\n    (at a1 l2-0)\n)\n(:goal\n    (and\n        (at p0 l2-2)\n        (at p1 l1-2)\n        (at p2 l0-1)\n        (at p3 l1-1)\n        (at p4 l0-1)\n        (at p5 l0-2)\n        (at p6 l2-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-truck p4 t0 l0-0)\n(load-airplane p2 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(load-airplane p6 a1 l0-0)\n(unload-airplane p2 a1 l0-0)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p5 t0 l0-1)\n(unload-truck p4 t0 l0-1)\n(unload-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p6 a1 l2-0)\n(load-airplane p1 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p1 a1 l1-0)\n(load-truck p1 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(load-truck p3 t1 l1-2)\n(unload-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(unload-truck p3 t1 l1-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l0-0)\n    (at p2 l1-2)\n    (at p3 l0-0)\n    (at p4 l0-0)\n    (at p5 l1-0)\n    (at p6 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-0)\n        (at p2 l2-2)\n        (at p3 l2-0)\n        (at p4 l2-0)\n        (at p5 l1-2)\n        (at p6 l1-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p1 t0 l0-2)\n(unload-truck p4 t0 l0-2)\n(load-airplane p1 a1 l2-0)\n(load-airplane p4 a1 l2-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-0)\n(unload-airplane p4 a1 l2-0)\n(load-truck p3 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p1 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(unload-truck p3 t0 l0-0)\n(load-airplane p3 a1 l0-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p3 a1 l2-0)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p5 t1 l1-2)\n(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p0 a0 l2-0)\n(fly-airplane a0 l2-0 l2-2)\n(unload-airplane p0 a0 l2-2)\n(unload-airplane p2 a0 l2-2)\n",
            "ground_truth_plan": [
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p5 t1 l1-2)",
                "(load-truck p2 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p2 t1 l1-0)",
                "(load-airplane p2 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p1 a1 l0-0)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(load-airplane p6 a1 l2-0)",
                "(unload-airplane p2 a1 l2-0)",
                "(load-truck p2 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-2 c2)",
                "(unload-truck p2 t2 l2-2)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p0 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p6 a1 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p0 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p0 t0 l0-2)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p1 t0 l0-2)",
                "(unload-truck p4 t0 l0-2)",
                "(load-airplane p1 a1 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(load-truck p3 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(unload-truck p3 t0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p3 a1 l2-0)",
                "(load-truck p5 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p5 t1 l1-2)",
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p0 a0 l2-0)",
                "(fly-airplane a0 l2-0 l2-2)",
                "(unload-airplane p0 a0 l2-2)",
                "(unload-airplane p2 a0 l2-2)"
            ],
            "correct": false,
            "instance_id": 197,
            "example_instance_id": 196,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-0)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l0-0)\n    (at p2 l1-2)\n    (at p3 l0-0)\n    (at p4 l0-0)\n    (at p5 l1-0)\n    (at p6 l2-0)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l2-0)\n        (at p2 l2-2)\n        (at p3 l2-0)\n        (at p4 l2-0)\n        (at p5 l1-2)\n        (at p6 l1-0)\n    )\n)\n)\n\n[PLAN]\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-truck p5 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p5 t1 l1-2)\n(load-truck p2 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p2 t1 l1-0)\n(load-airplane p2 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(load-airplane p4 a1 l0-0)\n(load-airplane p3 a1 l0-0)\n(load-airplane p1 a1 l0-0)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n(unload-airplane p3 a1 l2-0)\n(unload-airplane p1 a1 l2-0)\n(load-airplane p6 a1 l2-0)\n(unload-airplane p2 a1 l2-0)\n(load-truck p2 t2 l2-0)\n(drive-truck t2 l2-0 l2-2 c2)\n(unload-truck p2 t2 l2-2)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p0 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p6 a1 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p0 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p0 t0 l0-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-2)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l2-0)\n    (at p5 l0-2)\n    (at p6 l1-0)\n    (at a0 l2-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l2-1)\n        (at p4 l1-0)\n        (at p5 l0-2)\n        (at p6 l2-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the given problem:\n\n(load-truck p1 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(load-truck p6 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p6 t1 l1-1)\n(load-airplane p6 a1 l1-1)\n(fly-airplane a1 l1-0 l2-0)\n(load-airplane p4 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p4 a1 l1-0)\n(unload-airplane p6 a1 l2-1)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(load-airplane p0 a0 l2-0)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l1-1 c1)\n(load-truck p4 t1 l1-0)\n(drive-truck t1 l1-0 l1-1 c1)\n(unload-truck p4 t1 l1-1)\n(load-airplane p4 a1 l1-1)\n(load-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p2 t0 l0-2)\n(load-airplane p2 a0 l0-0)\n(fly-airplane a0 l0-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(load-airplane p1 a1 l1-0)\n(unload-airplane p3 a0 l0-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p1 a1 l2-1)\n",
            "ground_truth_plan": [
                "(load-truck p2 t2 l2-1)",
                "(load-airplane p6 a1 l1-0)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(load-truck p1 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p2 t2 l2-0)",
                "(load-airplane p2 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p2 a0 l0-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p6 a1 l2-0)",
                "(load-truck p6 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p6 t2 l2-1)",
                "(load-airplane p4 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p4 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p1 t1 l1-0)",
                "(load-truck p6 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p6 t1 l1-1)",
                "(load-airplane p6 a1 l1-1)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(load-airplane p4 a1 l2-0)",
                "(fly-airplane a1 l2-0 l1-0)",
                "(unload-airplane p4 a1 l1-0)",
                "(unload-airplane p6 a1 l2-1)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(load-airplane p0 a0 l2-0)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l1-1 c1)",
                "(load-truck p4 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p4 t1 l1-1)",
                "(load-airplane p4 a1 l1-1)",
                "(load-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p2 t0 l0-2)",
                "(load-airplane p2 a0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(load-airplane p1 a1 l1-0)",
                "(unload-airplane p3 a0 l0-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(unload-airplane p1 a1 l2-1)"
            ],
            "correct": false,
            "instance_id": 198,
            "example_instance_id": 197,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-1)\n    (at t2 l2-1)\n    (at p0 l2-1)\n    (at p1 l1-2)\n    (at p2 l2-1)\n    (at p3 l2-1)\n    (at p4 l2-0)\n    (at p5 l0-2)\n    (at p6 l1-0)\n    (at a0 l2-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l1-0)\n        (at p2 l0-0)\n        (at p3 l2-1)\n        (at p4 l1-0)\n        (at p5 l0-2)\n        (at p6 l2-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t2 l2-1)\n(load-airplane p6 a1 l1-0)\n(drive-truck t1 l1-1 l1-2 c1)\n(load-truck p1 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(unload-truck p1 t1 l1-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p2 t2 l2-0)\n(load-airplane p2 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p2 a0 l0-0)\n(fly-airplane a1 l1-0 l2-0)\n(unload-airplane p6 a1 l2-0)\n(load-truck p6 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p6 t2 l2-1)\n(load-airplane p4 a1 l2-0)\n(fly-airplane a1 l2-0 l1-0)\n(unload-airplane p4 a1 l1-0)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at p3 l2-1)\n    (at p4 l1-1)\n    (at p5 l2-1)\n    (at p6 l2-1)\n    (at a0 l2-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l1-0)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l0-0)\n        (at p5 l2-1)\n        (at p6 l2-0)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l2-1 c2)\n(unload-truck p0 t1 l2-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(load-airplane p4 a1 l1-1)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(load-truck p3 t2 l2-1)\n(drive-truck t2 l2-1 l1-2 c1)\n(unload-truck p3 t2 l1-2)\n(drive-truck t0 l0-0 l0-1 c0)\n(load-truck p5 t2 l2-1)\n(drive-truck t2 l2-1 l1-2 c1)\n(unload-truck p5 t2 l1-2)\n(load-airplane p6 a0 l2-1)\n(fly-airplane a0 l2-0 l2-1)\n(unload-airplane p6 a0 l2-1)\n",
            "ground_truth_plan": [
                "(drive-truck t2 l2-2 l2-1 c2)",
                "(load-truck p6 t2 l2-1)",
                "(load-truck p3 t2 l2-1)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p4 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-0 c1)",
                "(unload-truck p4 t1 l1-0)",
                "(unload-truck p0 t1 l1-0)",
                "(load-airplane p4 a1 l1-0)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p6 t2 l2-0)",
                "(unload-truck p3 t2 l2-0)",
                "(load-airplane p3 a0 l2-0)",
                "(fly-airplane a0 l2-0 l1-0)",
                "(unload-airplane p3 a0 l1-0)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p3 t1 l1-2)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p0 a0 l2-0)",
                "(load-truck p0 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p0 t2 l2-1)"
            ],
            "extracted_llm_plan": [
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l2-1 c2)",
                "(unload-truck p0 t1 l2-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(load-airplane p4 a1 l1-1)",
                "(fly-airplane a1 l1-0 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(load-truck p3 t2 l2-1)",
                "(drive-truck t2 l2-1 l1-2 c1)",
                "(unload-truck p3 t2 l1-2)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(load-truck p5 t2 l2-1)",
                "(drive-truck t2 l2-1 l1-2 c1)",
                "(unload-truck p5 t2 l1-2)",
                "(load-airplane p6 a0 l2-1)",
                "(fly-airplane a0 l2-0 l2-1)",
                "(unload-airplane p6 a0 l2-1)"
            ],
            "correct": false,
            "instance_id": 199,
            "example_instance_id": 198,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-1)\n    (at t1 l1-2)\n    (at t2 l2-2)\n    (at p0 l1-2)\n    (at p1 l1-0)\n    (at p2 l1-0)\n    (at p3 l2-1)\n    (at p4 l1-1)\n    (at p5 l2-1)\n    (at p6 l2-1)\n    (at a0 l2-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l2-1)\n        (at p1 l1-0)\n        (at p2 l1-0)\n        (at p3 l1-2)\n        (at p4 l0-0)\n        (at p5 l2-1)\n        (at p6 l2-0)\n    )\n)\n)\n\n[PLAN]\n(drive-truck t2 l2-2 l2-1 c2)\n(load-truck p6 t2 l2-1)\n(load-truck p3 t2 l2-1)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p4 t1 l1-1)\n(drive-truck t1 l1-1 l1-0 c1)\n(unload-truck p4 t1 l1-0)\n(unload-truck p0 t1 l1-0)\n(load-airplane p4 a1 l1-0)\n(fly-airplane a1 l1-0 l0-0)\n(unload-airplane p4 a1 l0-0)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p6 t2 l2-0)\n(unload-truck p3 t2 l2-0)\n(load-airplane p3 a0 l2-0)\n(fly-airplane a0 l2-0 l1-0)\n(unload-airplane p3 a0 l1-0)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p3 t1 l1-2)\n(load-airplane p0 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(load-truck p0 t2 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p0 t2 l2-1)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l0-2)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at p5 l2-0)\n    (at p6 l1-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l0-2)\n        (at p5 l0-2)\n        (at p6 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(drive-truck t0 l0-2 l0-1 c0)\n(load-truck p2 t0 l0-1)\n(drive-truck t0 l0-1 l0-0 c0)\n(unload-truck p2 t0 l0-0)\n(load-truck p3 a0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 a0 l0-1)\n(fly-airplane a0 l1-0 l2-0)\n(load-airplane p5 a0 l2-0)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(load-truck p5 t0 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(load-airplane p0 a1 l2-1)\n(fly-airplane a1 l2-1 l1-2)\n(unload-airplane p0 a1 l1-2)\n(drive-truck t2 l2-0 l2-1 c2)\n(unload-truck p1 t2 l2-1)\n(load-truck p1 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p1 t2 l2-0)\n(load-truck p4 a0 l1-0)\n(fly-airplane a0 l1-0 l0-2)\n(unload-airplane p4 a0 l0-2)\n",
            "ground_truth_plan": [
                "(load-truck p2 t0 l0-2)",
                "(load-airplane p4 a1 l1-0)",
                "(fly-airplane a1 l1-0 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p0 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p0 t2 l2-0)",
                "(load-airplane p5 a1 l2-0)",
                "(load-airplane p0 a1 l2-0)",
                "(fly-airplane a1 l2-0 l0-0)",
                "(unload-airplane p5 a1 l0-0)",
                "(unload-airplane p4 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p0 a1 l1-0)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(load-truck p5 t0 l0-0)",
                "(load-truck p4 t0 l0-0)",
                "(load-truck p3 t0 l0-0)",
                "(unload-truck p2 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(unload-truck p4 t0 l0-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p0 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)"
            ],
            "extracted_llm_plan": [
                "(drive-truck t0 l0-2 l0-1 c0)",
                "(load-truck p2 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-0 c0)",
                "(unload-truck p2 t0 l0-0)",
                "(load-truck p3 a0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p3 a0 l0-1)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(load-airplane p5 a0 l2-0)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(load-truck p5 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(unload-truck p5 t0 l0-2)",
                "(load-airplane p0 a1 l2-1)",
                "(fly-airplane a1 l2-1 l1-2)",
                "(unload-airplane p0 a1 l1-2)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p1 t2 l2-1)",
                "(load-truck p1 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p1 t2 l2-0)",
                "(load-truck p4 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-2)",
                "(unload-airplane p4 a0 l0-2)"
            ],
            "correct": false,
            "instance_id": 200,
            "example_instance_id": 199,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain logistics-strips)\n  (:requirements :strips) \n  (:predicates \t(OBJ ?obj)\n\t       \t(TRUCK ?truck)\n               \t(LOCATION ?loc)\n\t\t(AIRPLANE ?airplane)\n                (CITY ?city)\n                (AIRPORT ?airport)\n\t\t(at ?obj ?loc)\n\t\t(in ?obj1 ?obj2)\n\t\t(in-city ?obj ?city))\n \n  ; (:types )\t\t; default object\n\n(:action LOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n   (at ?truck ?loc) (at ?obj ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?truck)))\n\n(:action LOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n   (at ?obj ?loc) (at ?airplane ?loc))\n  :effect\n   (and (not (at ?obj ?loc)) (in ?obj ?airplane)))\n\n\n\n(:action UNLOAD-TRUCK\n  :parameters\n   (?obj\n    ?truck\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)\n        (at ?truck ?loc) (in ?obj ?truck))\n  :effect\n   (and (not (in ?obj ?truck)) (at ?obj ?loc)))\n\n(:action UNLOAD-AIRPLANE\n  :parameters\n   (?obj\n    ?airplane\n    ?loc)\n  :precondition\n   (and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)\n        (in ?obj ?airplane) (at ?airplane ?loc))\n  :effect\n   (and (not (in ?obj ?airplane)) (at ?obj ?loc)))\n\n(:action DRIVE-TRUCK\n  :parameters\n   (?truck\n    ?loc-from\n    ?loc-to\n    ?city)\n  :precondition\n   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)\n   (at ?truck ?loc-from)\n   (in-city ?loc-from ?city)\n   (in-city ?loc-to ?city))\n  :effect\n   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))\n\n(:action FLY-AIRPLANE\n  :parameters\n   (?airplane\n    ?loc-from\n    ?loc-to)\n  :precondition\n   (and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)\n\t(at ?airplane ?loc-from))\n  :effect\n   (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))\n)\n\n[PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-2)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l2-1)\n    (at p1 l2-0)\n    (at p2 l0-2)\n    (at p3 l0-0)\n    (at p4 l1-0)\n    (at p5 l2-0)\n    (at p6 l1-1)\n    (at a0 l1-0)\n    (at a1 l1-0)\n)\n(:goal\n    (and\n        (at p0 l1-2)\n        (at p1 l2-0)\n        (at p2 l0-0)\n        (at p3 l0-1)\n        (at p4 l0-2)\n        (at p5 l0-2)\n        (at p6 l1-1)\n    )\n)\n)\n\n[PLAN]\n(load-truck p2 t0 l0-2)\n(load-airplane p4 a1 l1-0)\n(fly-airplane a1 l1-0 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p0 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p0 t2 l2-0)\n(load-airplane p5 a1 l2-0)\n(load-airplane p0 a1 l2-0)\n(fly-airplane a1 l2-0 l0-0)\n(unload-airplane p5 a1 l0-0)\n(unload-airplane p4 a1 l0-0)\n(fly-airplane a1 l0-0 l1-0)\n(unload-airplane p0 a1 l1-0)\n(drive-truck t0 l0-2 l0-0 c0)\n(load-truck p5 t0 l0-0)\n(load-truck p4 t0 l0-0)\n(load-truck p3 t0 l0-0)\n(unload-truck p2 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p3 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p5 t0 l0-2)\n(unload-truck p4 t0 l0-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p0 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem logistics-c3-s3-p7-a2)\n(:domain logistics-strips)\n(:objects a0 a1 \n          c0 c1 c2 \n          t0 t1 t2 \n          l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2 \n          p0 p1 p2 p3 p4 p5 p6 \n)\n(:init\n    (AIRPLANE a0)\n    (AIRPLANE a1)\n    (CITY c0)\n    (CITY c1)\n    (CITY c2)\n    (TRUCK t0)\n    (TRUCK t1)\n    (TRUCK t2)\n    (LOCATION l0-0)\n    (in-city  l0-0 c0)\n    (LOCATION l0-1)\n    (in-city  l0-1 c0)\n    (LOCATION l0-2)\n    (in-city  l0-2 c0)\n    (LOCATION l1-0)\n    (in-city  l1-0 c1)\n    (LOCATION l1-1)\n    (in-city  l1-1 c1)\n    (LOCATION l1-2)\n    (in-city  l1-2 c1)\n    (LOCATION l2-0)\n    (in-city  l2-0 c2)\n    (LOCATION l2-1)\n    (in-city  l2-1 c2)\n    (LOCATION l2-2)\n    (in-city  l2-2 c2)\n    (AIRPORT l0-0)\n    (AIRPORT l1-0)\n    (AIRPORT l2-0)\n    (OBJ p0)\n    (OBJ p1)\n    (OBJ p2)\n    (OBJ p3)\n    (OBJ p4)\n    (OBJ p5)\n    (OBJ p6)\n    (at t0 l0-0)\n    (at t1 l1-2)\n    (at t2 l2-0)\n    (at p0 l1-2)\n    (at p1 l0-1)\n    (at p2 l1-0)\n    (at p3 l0-0)\n    (at p4 l0-0)\n    (at p5 l1-0)\n    (at p6 l0-2)\n    (at a0 l1-0)\n    (at a1 l0-0)\n)\n(:goal\n    (and\n        (at p0 l0-2)\n        (at p1 l0-0)\n        (at p2 l2-0)\n        (at p3 l1-0)\n        (at p4 l0-1)\n        (at p5 l2-1)\n        (at p6 l1-1)\n    )\n)\n)\n\n\n",
            "llm_raw_response": "(load-truck p1 t0 l0-1)\n(load-airplane p5 a0 l1-0)\n(load-airplane p2 a0 l1-0)\n(fly-airplane a0 l1-0 l2-0)\n(unload-airplane p2 a0 l2-0)\n(drive-truck t1 l1-2 l1-1 c1)\n(load-truck p6 t1 l1-1)\n(drive-truck t1 l1-1 l1-2 c1)\n(unload-truck p0 t1 l1-2)\n(load-truck p0 t1 l1-2)\n(drive-truck t1 l1-2 l1-0 c1)\n(load-truck p3 t1 l1-0)\n(drive-truck t1 l1-0 l1-2 c1)\n(unload-truck p6 t1 l1-2)\n(unload-truck p3 t1 l1-2)\n(fly-airplane a0 l2-0 l0-0)\n(unload-airplane p5 a0 l0-0)\n(load-airplane p4 a1 l0-0)\n(drive-truck t0 l0-0 l0-2 c0)\n(load-truck p6 t0 l0-2)\n(drive-truck t0 l0-2 l0-0 c0)\n(unload-truck p1 t0 l0-0)\n(drive-truck t0 l0-0 l0-1 c0)\n(unload-truck p4 t0 l0-1)\n(drive-truck t0 l0-1 l0-2 c0)\n(unload-truck p6 t0 l0-2)\n(fly-airplane a1 l0-0 l2-0)\n(unload-airplane p4 a1 l2-0)\n(drive-truck t2 l2-0 l2-1 c2)\n(load-truck p5 t2 l2-1)\n(drive-truck t2 l2-1 l2-0 c2)\n(unload-truck p5 t2 l2-0)\n",
            "ground_truth_plan": [
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(unload-truck p0 t1 l1-0)",
                "(load-truck p4 t0 l0-0)",
                "(load-airplane p3 a1 l0-0)",
                "(load-airplane p5 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(load-airplane p0 a0 l1-0)",
                "(fly-airplane a0 l1-0 l0-0)",
                "(unload-airplane p0 a0 l0-0)",
                "(load-truck p0 t0 l0-0)",
                "(fly-airplane a0 l0-0 l2-0)",
                "(unload-airplane p5 a0 l2-0)",
                "(load-truck p5 t2 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(unload-truck p5 t2 l2-1)",
                "(unload-airplane p2 a0 l2-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(load-truck p1 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(load-truck p6 t0 l0-2)",
                "(unload-truck p0 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p6 t0 l0-0)",
                "(unload-truck p1 t0 l0-0)",
                "(load-airplane p6 a1 l0-0)",
                "(fly-airplane a1 l0-0 l1-0)",
                "(unload-airplane p6 a1 l1-0)",
                "(load-truck p6 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-1 c1)",
                "(unload-truck p6 t1 l1-1)",
                "(unload-airplane p3 a1 l1-0)"
            ],
            "extracted_llm_plan": [
                "(load-truck p1 t0 l0-1)",
                "(load-airplane p5 a0 l1-0)",
                "(load-airplane p2 a0 l1-0)",
                "(fly-airplane a0 l1-0 l2-0)",
                "(unload-airplane p2 a0 l2-0)",
                "(drive-truck t1 l1-2 l1-1 c1)",
                "(load-truck p6 t1 l1-1)",
                "(drive-truck t1 l1-1 l1-2 c1)",
                "(unload-truck p0 t1 l1-2)",
                "(load-truck p0 t1 l1-2)",
                "(drive-truck t1 l1-2 l1-0 c1)",
                "(load-truck p3 t1 l1-0)",
                "(drive-truck t1 l1-0 l1-2 c1)",
                "(unload-truck p6 t1 l1-2)",
                "(unload-truck p3 t1 l1-2)",
                "(fly-airplane a0 l2-0 l0-0)",
                "(unload-airplane p5 a0 l0-0)",
                "(load-airplane p4 a1 l0-0)",
                "(drive-truck t0 l0-0 l0-2 c0)",
                "(load-truck p6 t0 l0-2)",
                "(drive-truck t0 l0-2 l0-0 c0)",
                "(unload-truck p1 t0 l0-0)",
                "(drive-truck t0 l0-0 l0-1 c0)",
                "(unload-truck p4 t0 l0-1)",
                "(drive-truck t0 l0-1 l0-2 c0)",
                "(unload-truck p6 t0 l0-2)",
                "(fly-airplane a1 l0-0 l2-0)",
                "(unload-airplane p4 a1 l2-0)",
                "(drive-truck t2 l2-0 l2-1 c2)",
                "(load-truck p5 t2 l2-1)",
                "(drive-truck t2 l2-1 l2-0 c2)",
                "(unload-truck p5 t2 l2-0)"
            ],
            "correct": false,
            "instance_id": 201,
            "example_instance_id": 200,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        }
    ]
}