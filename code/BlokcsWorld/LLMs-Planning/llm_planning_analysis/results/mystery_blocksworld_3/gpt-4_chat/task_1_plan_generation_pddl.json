{
    "task": "t1",
    "engine": "gpt-4_chat",
    "prompt_type": "oneshot",
    "domain": "mystery_blocksworld_3",
    "instances": [
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(craves c b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(feast b a)\n(succumb b)\n(attack a)\n(overcome a b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(succumb a)\n(attack c)\n(overcome c b)\n(attack a)\n(overcome a c)\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)",
                "(attack a)",
                "(overcome a c)",
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 2,
            "example_instance_id": 1,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(feast c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 3,
            "example_instance_id": 2,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(feast c a)\n(succumb c)\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(craves b c)\n(planet c)\n(province a)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast a b)\n(succumb a)\n(feast b c)\n(succumb b)\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(feast b c)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(succumb a)",
                "(feast b c)",
                "(succumb b)",
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": true,
            "instance_id": 4,
            "example_instance_id": 3,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(craves b c)\n(planet c)\n(province a)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(feast b c)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(craves b c)\n(planet c)\n(province a)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast a b)\n(succumb a)\n(overcome c b)\n(feast b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(feast b c)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(succumb a)",
                "(overcome c b)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 5,
            "example_instance_id": 4,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(craves b c)\n(planet c)\n(province a)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(feast b c)\n(succumb b)\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b c)\n(attack c)\n(overcome c a)\n(feast c b)\n(succumb c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(feast c b)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack c)",
                "(overcome c a)",
                "(feast c b)",
                "(succumb c)"
            ],
            "correct": false,
            "instance_id": 6,
            "example_instance_id": 5,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(feast c b)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack c)\n(overcome a c)\n(feast a b)\n(overcome b c)\n(succumb b)\n(feast a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(attack c)",
                "(overcome a c)",
                "(feast a b)",
                "(overcome b c)",
                "(succumb b)",
                "(feast a c)"
            ],
            "correct": false,
            "instance_id": 7,
            "example_instance_id": 6,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack a)\n(overcome a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a c)"
            ],
            "correct": true,
            "instance_id": 8,
            "example_instance_id": 7,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n[PLAN]\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast a c)\n(attack c)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 9,
            "example_instance_id": 8,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(succumb b)\n(attack a)\n(overcome a c)\n(succumb c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(attack c)",
                "(overcome c b)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(succumb b)",
                "(attack a)",
                "(overcome a c)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 10,
            "example_instance_id": 9,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(attack c)\n(overcome c b)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 11,
            "example_instance_id": 10,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack a)\n(succumb a)\n(attack b)\n(overcome a b)\n(attack c)\n(overcome c a)\n(succumb b)\n(feast b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack a)",
                "(overcome a b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(attack b)",
                "(overcome a b)",
                "(attack c)",
                "(overcome c a)",
                "(succumb b)",
                "(feast b a)"
            ],
            "correct": false,
            "instance_id": 12,
            "example_instance_id": 11,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(attack a)\n(overcome a b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "correct": true,
            "instance_id": 13,
            "example_instance_id": 12,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b c)\n(attack c)\n(overcome c a)\n(attack a)\n(overcome a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack c)",
                "(overcome c a)",
                "(attack a)",
                "(overcome a b)"
            ],
            "correct": false,
            "instance_id": 14,
            "example_instance_id": 13,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(attack c)\n(overcome c b)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack a)\n(overcome a b)\n(attack c)\n(succumb c)\n(feast a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c b)",
                "(succumb c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a b)",
                "(attack c)",
                "(succumb c)",
                "(feast a b)"
            ],
            "correct": false,
            "instance_id": 15,
            "example_instance_id": 14,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast b c)\n(succumb b)\n(attack a)\n(overcome a c)\n(feast c a)\n(succumb c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(feast c a)",
                "(succumb c)",
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(feast b c)",
                "(succumb b)",
                "(attack a)",
                "(overcome a c)",
                "(feast c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 16,
            "example_instance_id": 15,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(feast c a)\n(succumb c)\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack b)\n(overcome b c)\n(attack a)\n(overcome a a)\n(attack c)\n(succumb a)\n(attack a)\n(overcome a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack a)",
                "(overcome a b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a a)",
                "(attack c)",
                "(succumb a)",
                "(attack a)",
                "(overcome a b)"
            ],
            "correct": false,
            "instance_id": 17,
            "example_instance_id": 16,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n[PLAN]\n(attack a)\n(overcome a b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(craves c b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack c)\n(overcome a c)\n(attack b)\n(overcome c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c b)",
                "(succumb c)",
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c b)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(attack c)",
                "(overcome a c)",
                "(attack b)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 18,
            "example_instance_id": 17,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(craves c b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c b)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack a)\n(overcome a b)\n(attack b)\n(succumb a)\n(feast a b)\n(succumb b)\n(attack c)\n(overcome c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a b)",
                "(attack b)",
                "(succumb a)",
                "(feast a b)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 19,
            "example_instance_id": 18,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(feast a b)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(feast a c)\n(overcome a b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(overcome a b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 20,
            "example_instance_id": 19,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n[PLAN]\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c b)",
                "(succumb c)",
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 21,
            "example_instance_id": 20,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(succumb a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(feast c b)",
                "(succumb c)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "correct": false,
            "instance_id": 22,
            "example_instance_id": 21,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(feast c b)\n(succumb c)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(attack c)\n(overcome c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "correct": true,
            "instance_id": 23,
            "example_instance_id": 22,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(succumb a)\n(overcome a b)\n(attack b)\n(succumb b)\n(overcome b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(overcome a b)",
                "(attack b)",
                "(succumb b)",
                "(overcome b c)"
            ],
            "correct": false,
            "instance_id": 24,
            "example_instance_id": 23,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n[PLAN]\n(attack b)\n(overcome b c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack c)\n(overcome c b)\n(attack b)\n(overcome b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c b)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(attack c)",
                "(overcome c b)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 25,
            "example_instance_id": 24,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(feast a c)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 26,
            "example_instance_id": 25,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(feast a c)\n(succumb a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome a b)\n(succumb a)\n(feast a c)\n(feast b c)\n(succumb b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(feast c a)",
                "(overcome c b)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a b)",
                "(succumb a)",
                "(feast a c)",
                "(feast b c)",
                "(succumb b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 27,
            "example_instance_id": 26,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(feast c a)\n(overcome c b)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(overcome b a)\n(succumb c)\n(attack b)\n(feast c a)\n(overcome c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(overcome b a)",
                "(succumb c)",
                "(attack b)",
                "(feast c a)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 28,
            "example_instance_id": 27,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(succumb a)\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "correct": false,
            "instance_id": 29,
            "example_instance_id": 28,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the given query problem in PDDL syntax:\n\n(feast c a)\n(succumb c)\n(attack a)\n(overcome a c)\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(feast c a)",
                "(succumb c)",
                "(attack a)",
                "(overcome a c)"
            ],
            "correct": true,
            "instance_id": 30,
            "example_instance_id": 29,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack b)\n(overcome c b)\n(succumb c)\n(attack a)\n(overcome b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(attack b)",
                "(overcome c b)",
                "(succumb c)",
                "(attack a)",
                "(overcome b c)"
            ],
            "correct": false,
            "instance_id": 31,
            "example_instance_id": 30,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast b c)\n(succumb b)\n(attack c)\n(overcome c b)\n(attack b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(feast b c)",
                "(succumb b)",
                "(attack c)",
                "(overcome c b)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 32,
            "example_instance_id": 31,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast b c)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast a b)\n(attack c)\n(overcome c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 33,
            "example_instance_id": 32,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n[PLAN]\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c b)",
                "(succumb c)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a c)"
            ],
            "correct": false,
            "instance_id": 34,
            "example_instance_id": 33,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(craves c b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(feast c b)\n(succumb c)\n(attack a)\n(overcome a c)\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c b)",
                "(succumb c)",
                "(feast b a)",
                "(succumb b)",
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(feast c b)",
                "(succumb c)",
                "(attack a)",
                "(overcome a c)",
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 35,
            "example_instance_id": 34,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(craves c b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(feast b a)\n(succumb b)\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack a)\n(overcome b a)\n(feast c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome b a)",
                "(feast c b)"
            ],
            "correct": false,
            "instance_id": 36,
            "example_instance_id": 35,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n[PLAN]\n(feast c a)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast c a)\n(overcome b a)\n(overcome c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(feast c a)",
                "(overcome b a)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 37,
            "example_instance_id": 36,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast c a)\n(succumb c)\n(attack b)\n(overcome b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(feast c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 38,
            "example_instance_id": 37,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome b a)\n(attack b)\n(overcome a b)\n(succumb a)\n(succumb b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(feast c a)",
                "(succumb c)",
                "(attack a)",
                "(overcome a b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome b a)",
                "(attack b)",
                "(overcome a b)",
                "(succumb a)",
                "(succumb b)"
            ],
            "correct": false,
            "instance_id": 39,
            "example_instance_id": 38,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(feast c a)\n(succumb c)\n(attack a)\n(overcome a b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast a c)\n(succumb a)\n(feast c b)\n(succumb c)\n(attack b)\n(overcome b a)\n(attack a)\n(overcome a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(feast c b)",
                "(succumb c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(succumb a)",
                "(feast c b)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)",
                "(attack a)",
                "(overcome a b)"
            ],
            "correct": false,
            "instance_id": 40,
            "example_instance_id": 39,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(feast c b)\n(succumb c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack a)\n(succumb b)\n(feast c a)\n(succumb c)\n(attack b)\n(overcome c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb b)",
                "(feast c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 41,
            "example_instance_id": 40,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n[PLAN]\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack a)\n(overcome a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a c)"
            ],
            "correct": false,
            "instance_id": 42,
            "example_instance_id": 41,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(craves b c)\n(planet c)\n(province a)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n\n",
            "llm_raw_response": "[NEW_PLAN]\n(feast a b)\n(succumb a)\n(attack c)\n(overcome a c)\n[NEW_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(feast b c)",
                "(succumb b)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome a c)"
            ],
            "correct": false,
            "instance_id": 43,
            "example_instance_id": 42,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(craves b c)\n(planet c)\n(province a)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(feast b c)\n(succumb b)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome a b)\n(succumb a)\n(attack c)\n(overcome c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(feast b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 44,
            "example_instance_id": 43,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(attack b)\n(overcome b c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast c b)\n(succumb c)\n(overcome a c)\n(attack a)\n(overcome a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(feast c b)",
                "(succumb c)",
                "(overcome a c)",
                "(attack a)",
                "(overcome a c)"
            ],
            "correct": false,
            "instance_id": 45,
            "example_instance_id": 44,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n[PLAN]\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack b)\n(overcome a b)\n(attack c)\n(overcome b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(attack b)",
                "(overcome a b)",
                "(attack c)",
                "(overcome b c)"
            ],
            "correct": false,
            "instance_id": 46,
            "example_instance_id": 45,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n[PLAN]\n(feast b a)\n(overcome b c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast a c)\n(overcome a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(overcome a b)"
            ],
            "correct": true,
            "instance_id": 47,
            "example_instance_id": 46,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n[PLAN]\n(feast a c)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(succumb a)\n(feast b c)\n(overcome a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(feast b c)",
                "(overcome a b)"
            ],
            "correct": false,
            "instance_id": 48,
            "example_instance_id": 47,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n[PLAN]\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack a)\n(overcome a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a c)"
            ],
            "correct": false,
            "instance_id": 49,
            "example_instance_id": 48,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(feast c b)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 50,
            "example_instance_id": 49,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(feast c b)\n(succumb c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b a)\n(attack a)\n(overcome a c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)",
                "(attack a)",
                "(overcome a c)"
            ],
            "correct": false,
            "instance_id": 51,
            "example_instance_id": 50,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome a b)\n(feast a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a b)",
                "(feast a b)"
            ],
            "correct": false,
            "instance_id": 52,
            "example_instance_id": 51,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(succumb b)\n(attack a)\n(overcome a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(succumb b)",
                "(attack a)",
                "(overcome a b)"
            ],
            "correct": false,
            "instance_id": 53,
            "example_instance_id": 52,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "Here's the plan for the query problem in PDDL syntax:\n\n1. (feast b a)\n2. (succumb b)\n3. (feast a c)\n4. (succumb a)\n5. (feast c a)\n6. (succumb c)\n7. (attack b)\n8. (overcome b a)\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(feast a c)",
                "(overcome a b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(feast b a)",
                "(succumb b)",
                "(feast a c)",
                "(succumb a)",
                "(feast c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 54,
            "example_instance_id": 53,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(feast a c)\n(overcome a b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(overcome b a)\n(feast b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(overcome b a)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 55,
            "example_instance_id": 54,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(succumb c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(feast a c)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(succumb c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 56,
            "example_instance_id": 55,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(feast a c)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast b a)\n(succumb b)\n(feast a c)\n(overcome a b)\n(attack c)\n(feast b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(feast b a)",
                "(succumb b)",
                "(feast a c)",
                "(overcome a b)",
                "(attack c)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 57,
            "example_instance_id": 56,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack a)\n(succumb a)\n(attack c)\n(overcome c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 58,
            "example_instance_id": 57,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(feast a c)",
                "(succumb a)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 59,
            "example_instance_id": 58,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(feast a c)\n(succumb a)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome a b)\n(succumb a)\n(feast a c)\n(succumb a)\n(attack c)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(overcome a b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a b)",
                "(succumb a)",
                "(feast a c)",
                "(succumb a)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 60,
            "example_instance_id": 59,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast a c)\n(overcome a b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack a)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(attack a)",
                "(overcome a b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 61,
            "example_instance_id": 60,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(attack a)\n(overcome a b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(succumb a)\n(attack b)\n(overcome b c)\n(attack a)\n(overcome a b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "correct": false,
            "instance_id": 62,
            "example_instance_id": 61,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack a)\n(overcome c a)\n(succumb c)\n(attack b)\n(overcome a b)\n(attack c)\n(overcome c b)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c b)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome a b)",
                "(attack c)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 63,
            "example_instance_id": 62,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c b)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b c)\n(attack c)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 64,
            "example_instance_id": 63,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "correct": true,
            "instance_id": 65,
            "example_instance_id": 64,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(craves b c)\n(planet c)\n(province a)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n(feast a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(feast b c)",
                "(succumb b)",
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)",
                "(feast a c)"
            ],
            "correct": false,
            "instance_id": 66,
            "example_instance_id": 65,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(craves b c)\n(planet c)\n(province a)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(feast b c)\n(succumb b)\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack a)\n(attack b)\n(overcome a c)\n(succumb b)\n(feast b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(attack b)",
                "(overcome a c)",
                "(succumb b)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 67,
            "example_instance_id": 66,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast a b)\n(succumb a)\n(attack c)\n(overcome c b)\n(feast a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)",
                "(feast a c)"
            ],
            "correct": false,
            "instance_id": 68,
            "example_instance_id": 67,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(attack c)\n(overcome c b)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack a)\n(succumb a)\n(attack b)\n(overcome b c)\n(attack c)\n(overcome c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 69,
            "example_instance_id": 68,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem using PDDL syntax:\n\n1. (attack a)\n2. (overcome a b)\n3. (attack c)\n4. (overcome b c)\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a b)",
                "(attack c)",
                "(overcome b c)"
            ],
            "correct": false,
            "instance_id": 70,
            "example_instance_id": 69,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 71,
            "example_instance_id": 70,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack b)\n(feast c a)\n(overcome a b)\n(succumb a)\n(feast b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(feast c a)",
                "(succumb c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(attack b)",
                "(feast c a)",
                "(overcome a b)",
                "(succumb a)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 72,
            "example_instance_id": 71,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(feast c a)\n(succumb c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack b)\n(succumb b)\n(attack c)\n(overcome c a)\n(succumb c)\n(feast b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack b)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)",
                "(succumb c)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 73,
            "example_instance_id": 72,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n[PLAN]\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(succumb a)\n(attack b)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(feast c b)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(attack b)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 74,
            "example_instance_id": 73,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(feast c b)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(feast a b)\n(succumb a)\n(overcome b a)\n(feast c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(succumb a)",
                "(overcome b a)",
                "(feast c b)"
            ],
            "correct": false,
            "instance_id": 75,
            "example_instance_id": 74,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b a)\n(feast b c)\n[QUERY PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 76,
            "example_instance_id": 75,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(craves b a)\n(planet c)\n(province b)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(feast a c)\n(succumb a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack c)\n(succumb c)\n(attack a)\n(overcome a c)\n(feast b c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack c)",
                "(succumb c)",
                "(attack a)",
                "(overcome a c)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 77,
            "example_instance_id": 76,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n[PLAN]\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "correct": false,
            "instance_id": 78,
            "example_instance_id": 77,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome a c)\n(succumb a)\n(feast b c)\n(succumb b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(feast c a)",
                "(succumb c)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a c)",
                "(succumb a)",
                "(feast b c)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 79,
            "example_instance_id": 78,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(feast c a)\n(succumb c)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast b a)\n(succumb b)\n(attack c)\n(overcome a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome a c)"
            ],
            "correct": false,
            "instance_id": 80,
            "example_instance_id": 79,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n[PLAN]\n(feast b a)\n(succumb b)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast c a)\n(succumb c)\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(feast c a)",
                "(succumb c)",
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": true,
            "instance_id": 81,
            "example_instance_id": 80,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": 1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b c)\n(attack a)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 82,
            "example_instance_id": 81,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack a)\n(overcome a c)\n(attack b)\n(overcome b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 83,
            "example_instance_id": 82,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves a c)\n(craves b a))\n)\n)\n\n[PLAN]\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack c)\n(overcome c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 84,
            "example_instance_id": 83,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": 0,
                "precond_relax_only": 0,
                "no_relax": 0
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(succumb a)\n(overcome a c)\n(feast a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb a)",
                "(overcome a c)",
                "(feast a c)"
            ],
            "correct": false,
            "instance_id": 85,
            "example_instance_id": 84,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves a c))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(feast b a)\n(succumb b)\n(feast c a)\n(overcome c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(feast b a)",
                "(succumb b)",
                "(feast c a)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 86,
            "example_instance_id": 85,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves c b))\n)\n)\n\n[PLAN]\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome b a)\n(attack b)\n(overcome c b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack b)",
                "(overcome b a)",
                "(attack c)",
                "(overcome c b)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome b a)",
                "(attack b)",
                "(overcome c b)"
            ],
            "correct": false,
            "instance_id": 87,
            "example_instance_id": 86,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a)\n(craves c b))\n)\n)\n\n[PLAN]\n(attack b)\n(overcome b a)\n(attack c)\n(overcome c b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "Here is the plan for the query problem in PDDL syntax:\n\n(attack a)\n(overcome a b)\n(feast c a)\n(overcome c a)\n",
            "ground_truth_plan": [
                "(feast c b)",
                "(succumb c)",
                "(attack a)",
                "(overcome a b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome a b)",
                "(feast c a)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 88,
            "example_instance_id": 87,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c b)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves a b)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(attack a)\n(overcome a b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 89,
            "example_instance_id": 88,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n[PLAN]\n(attack b)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack b)\n(attack c)\n(overcome b c)\n(overcome c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack b)",
                "(attack c)",
                "(overcome b c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 90,
            "example_instance_id": 89,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n[PLAN]\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack c)\n(overcome c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 91,
            "example_instance_id": 90,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n[PLAN]\n(feast b c)\n(succumb b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(succumb b)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(succumb b)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 92,
            "example_instance_id": 91,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(planet c)\n(province a)\n(province b)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n[PLAN]\n(feast b c)\n(overcome b a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast c b)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(feast c b)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 93,
            "example_instance_id": 92,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(planet c)\n(province a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n[PLAN]\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n; Plan\n(feast a b)\n(attack b)\n(overcome b c)\n(attack c)\n(overcome c a)\n; Plan_End\n",
            "ground_truth_plan": [
                "(feast a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome c a)",
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(feast a b)",
                "(attack b)",
                "(overcome b c)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 94,
            "example_instance_id": 93,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": 1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(planet c)\n(province a)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n[PLAN]\n(feast a b)\n(succumb a)\n(attack c)\n(overcome c a)\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast a c)\n(succumb c)\n(attack b)\n(overcome b c)\n(succumb a)\n(attack c)\n(overcome a b)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast a c)",
                "(succumb a)",
                "(feast c b)",
                "(succumb c)",
                "(attack b)",
                "(overcome b c)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(feast a c)",
                "(succumb c)",
                "(attack b)",
                "(overcome b c)",
                "(succumb a)",
                "(attack c)",
                "(overcome a b)"
            ],
            "correct": false,
            "instance_id": 95,
            "example_instance_id": 94,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a c)\n(planet b)\n(craves c b)\n(province a)\n)\n(:goal\n(and\n(craves a b)\n(craves b c))\n)\n)\n\n[PLAN]\n(feast a c)\n(succumb a)\n(feast c b)\n(succumb c)\n(attack b)\n(overcome b c)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(attack a)\n(overcome b a)\n(succumb b)\n(attack c)\n(feast b c)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b a)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome b a)",
                "(succumb b)",
                "(attack c)",
                "(feast b c)"
            ],
            "correct": false,
            "instance_id": 96,
            "example_instance_id": 95,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(planet c)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c))\n)\n)\n\n[PLAN]\n(feast b a)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(craves c b)\n(province c)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(feast c b)\n(overcome c a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c b)",
                "(succumb c)",
                "(feast b a)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "extracted_llm_plan": [
                "(feast c b)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 97,
            "example_instance_id": 96,
            "relaxed_checks": {
                "del_and_precond_relax": 1,
                "del_relax_only": -1,
                "precond_relax_only": 1,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(craves c b)\n(province c)\n)\n(:goal\n(and\n(craves c a))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(feast b a)\n(succumb b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(craves c b)\n(province c)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(feast c b)\n(succumb c)\n(attack a)\n(overcome b a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c b)",
                "(succumb c)",
                "(feast b a)",
                "(succumb b)",
                "(attack a)",
                "(overcome a b)"
            ],
            "extracted_llm_plan": [
                "(feast c b)",
                "(succumb c)",
                "(attack a)",
                "(overcome b a)"
            ],
            "correct": false,
            "instance_id": 98,
            "example_instance_id": 97,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b a)\n(craves c b)\n(province c)\n)\n(:goal\n(and\n(craves a b))\n)\n)\n\n[PLAN]\n(feast c b)\n(succumb c)\n(feast b a)\n(succumb b)\n(attack a)\n(overcome a b)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY PLAN]\n(overcome c a)\n(succumb a)\n(feast a b)\n(succumb a)\n(attack b)\n(overcome b c)\n(overcome a c)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(feast c a)",
                "(succumb c)",
                "(feast a b)",
                "(succumb a)",
                "(attack c)",
                "(overcome c b)",
                "(attack a)",
                "(overcome a c)"
            ],
            "extracted_llm_plan": [
                "(overcome c a)",
                "(succumb a)",
                "(feast a b)",
                "(succumb a)",
                "(attack b)",
                "(overcome b c)",
                "(overcome a c)"
            ],
            "correct": false,
            "instance_id": 99,
            "example_instance_id": 98,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(craves a b)\n(planet b)\n(craves c a)\n(province c)\n)\n(:goal\n(and\n(craves a c)\n(craves c b))\n)\n)\n\n[PLAN]\n(feast c a)\n(succumb c)\n(feast a b)\n(succumb a)\n(attack c)\n(overcome c b)\n(attack a)\n(overcome a c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n\n",
            "llm_raw_response": "[PLAN]\n(attack a)\n(overcome b a)\n(succumb b)\n(feast b c)\n(succumb b)\n(attack c)\n(overcome c a)\n[PLAN_END]\n",
            "ground_truth_plan": [
                "(attack b)",
                "(overcome b c)"
            ],
            "extracted_llm_plan": [
                "(attack a)",
                "(overcome b a)",
                "(succumb b)",
                "(feast b c)",
                "(succumb b)",
                "(attack c)",
                "(overcome c a)"
            ],
            "correct": false,
            "instance_id": 100,
            "example_instance_id": 99,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        },
        {
            "query": "Here is a pddl domain, an example problem and it's corresponding plan. Provide the plan for the query problem. Provide only the pddl syntax for the plan.\n[DOMAIN]\n(define (domain mystery-4ops)\n  (:requirements :strips)\n(:predicates (province ?x)\n             (planet ?x)\n             (harmony)\n             (pain ?x)\n             (craves ?x ?y))\n\n(:action attack\n  :parameters (?ob)\n  :precondition (and (province ?ob) (planet ?ob) (harmony))\n  :effect (and (pain ?ob) (not (province ?ob)) (not (planet ?ob))\n               (not (harmony))))\n\n(:action succumb\n  :parameters  (?ob)\n  :precondition (pain ?ob)\n  :effect (and (province ?ob) (harmony) (planet ?ob)\n               (not (pain ?ob))))\n\n(:action overcome\n  :parameters  (?ob ?underob)\n  :precondition (and (province ?underob) (pain ?ob))\n  :effect (and (harmony) (province ?ob) (craves ?ob ?underob)\n               (not (province ?underob)) (not (pain ?ob))))\n\n(:action feast\n  :parameters  (?ob ?underob)\n  :precondition (and (craves ?ob ?underob) (province ?ob) (harmony))\n  :effect (and (pain ?ob) (province ?underob)\n               (not (craves ?ob ?underob)) (not (province ?ob)) (not (harmony)))))\n\n[PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(planet b)\n(craves c a)\n(province b)\n(province c)\n)\n(:goal\n(and\n(craves b c)\n(craves c a))\n)\n)\n\n[PLAN]\n(attack b)\n(overcome b c)\n[PLAN_END]\n\n[QUERY PROBLEM]\n(define (problem MY-rand-3)\n(:domain mystery-4ops)\n(:objects a b c )\n(:init\n(harmony)\n(planet a)\n(craves b c)\n(craves c a)\n(province b)\n)\n(:goal\n(and\n(craves b a))\n)\n)\n\n\n",
            "llm_raw_response": "[QUERY_PLAN]\n(attack b)\n(succumb b)\n(feast b a)\n[QUERY_PLAN_END]\n",
            "ground_truth_plan": [
                "(feast b c)",
                "(succumb b)",
                "(feast c a)",
                "(succumb c)",
                "(attack b)",
                "(overcome b a)"
            ],
            "extracted_llm_plan": [
                "(attack b)",
                "(succumb b)",
                "(feast b a)"
            ],
            "correct": false,
            "instance_id": 101,
            "example_instance_id": 100,
            "relaxed_checks": {
                "del_and_precond_relax": 0,
                "del_relax_only": -1,
                "precond_relax_only": 0,
                "no_relax": -1
            }
        }
    ]
}